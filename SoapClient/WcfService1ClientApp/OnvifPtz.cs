//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AstroSoft.WindowsStore.Onvif.Proxies.OnvifServices.PTZ
{
    
    
    public interface PTZ
    {
        
        /// <summary>
        /// Returns the capabilities of the PTZ service. The result is returned in a typed answer.
        /// </summary>
        System.Threading.Tasks.Task<GetServiceCapabilitiesResponse> GetServiceCapabilitiesAsync(GetServiceCapabilitiesRequest request);
        
        /// <summary>
        /// 
        ///				Get the descriptions of the available PTZ Nodes.
        ///				
        ///				A PTZ-capable device may have multiple PTZ Nodes. The PTZ Nodes may represent
        ///				mechanical PTZ drivers, uploaded PTZ drivers or digital PTZ drivers. PTZ Nodes are the
        ///				lowest level entities in the PTZ control API and reflect the supported PTZ capabilities. The
        ///				PTZ Node is referenced either by its name or by its reference token. 
        ///      		
        /// </summary>
        System.Threading.Tasks.Task<GetNodesResponse> GetNodesAsync(GetNodesRequest request);
        
        /// <summary>
        /// Get a specific PTZ Node identified by a reference
        ///        token or a name.
        ///	  
        /// </summary>
        System.Threading.Tasks.Task<GetNodeResponse> GetNodeAsync(GetNodeRequest request);
        
        /// <summary>
        /// Get a specific PTZonfiguration from the device, identified by its reference token or name.
        ///				
        ///				The default Position/Translation/Velocity Spaces are introduced to allow NVCs sending move
        ///				requests without the need to specify a certain coordinate system. The default Speeds are
        ///				introduced to control the speed of move requests (absolute, relative, preset), where no
        ///				explicit speed has been set.
        ///				The allowed pan and tilt range for Pan/Tilt Limits is defined by a two-dimensional space range
        ///				that is mapped to a specific Absolute Pan/Tilt Position Space. At least one Pan/Tilt Position
        ///				Space is required by the PTZNode to support Pan/Tilt limits. The limits apply to all supported
        ///				absolute, relative and continuous Pan/Tilt movements. The limits shall be checked within the
        ///				coordinate system for which the limits have been specified. That means that even if
        ///				movements are specified in a different coordinate system, the requested movements shall be
        ///				transformed to the coordinate system of the limits where the limits can be checked. When a
        ///				relative or continuous movements is specified, which would leave the specified limits, the PTZ
        ///				unit has to move along the specified limits. The Zoom Limits have to be interpreted
        ///				accordingly.
        ///			
        /// </summary>
        System.Threading.Tasks.Task<GetConfigurationResponse> GetConfigurationAsync(GetConfigurationRequest request);
        
        /// <summary>
        /// 
        ///		        Get all the existing PTZConfigurations from the device.
        ///				
        ///				The default Position/Translation/Velocity Spaces are introduced to allow NVCs sending move
        ///				requests without the need to specify a certain coordinate system. The default Speeds are
        ///				introduced to control the speed of move requests (absolute, relative, preset), where no
        ///				explicit speed has been set.
        ///				The allowed pan and tilt range for Pan/Tilt Limits is defined by a two-dimensional space range
        ///				that is mapped to a specific Absolute Pan/Tilt Position Space. At least one Pan/Tilt Position
        ///				Space is required by the PTZNode to support Pan/Tilt limits. The limits apply to all supported
        ///				absolute, relative and continuous Pan/Tilt movements. The limits shall be checked within the
        ///				coordinate system for which the limits have been specified. That means that even if
        ///				movements are specified in a different coordinate system, the requested movements shall be
        ///				transformed to the coordinate system of the limits where the limits can be checked. When a
        ///				relative or continuous movements is specified, which would leave the specified limits, the PTZ
        ///				unit has to move along the specified limits. The Zoom Limits have to be interpreted
        ///				accordingly.
        ///			
        /// </summary>
        System.Threading.Tasks.Task<GetConfigurationsResponse> GetConfigurationsAsync(GetConfigurationsRequest request);
        
        /// <summary>
        /// 
        ///        Set/update a existing PTZConfiguration on the device.
        ///      
        /// </summary>
        System.Threading.Tasks.Task<SetConfigurationResponse> SetConfigurationAsync(SetConfigurationRequest request);
        
        /// <summary>
        /// 
        ///				List supported coordinate systems including their range limitations. Therefore, the options
        ///				MAY differ depending on whether the PTZ Configuration is assigned to a Profile containing a
        ///				Video Source Configuration. In that case, the options may additionally contain coordinate
        ///				systems referring to the image coordinate system described by the Video Source
        ///				Configuration. If the PTZ Node supports continuous movements, it shall return a Timeout Range within
        ///				which Timeouts are accepted by the PTZ Node.				
        ///			
        /// </summary>
        System.Threading.Tasks.Task<GetConfigurationOptionsResponse> GetConfigurationOptionsAsync(GetConfigurationOptionsRequest request);
        
        /// <summary>
        /// 
        ///        Operation to send auxiliary commands to the PTZ device
        ///        mapped by the PTZNode in the selected profile. The
        ///        operation is supported
        ///        if the AuxiliarySupported element of the PTZNode is true
        ///      
        /// </summary>
        System.Threading.Tasks.Task<SendAuxiliaryCommandResponse> SendAuxiliaryCommandAsync(SendAuxiliaryCommandRequest request);
        
        /// <summary>
        /// 
        ///        Operation to request all PTZ presets for the PTZNode
        ///        in the selected profile. The operation is supported if there is support
        ///        for at least on PTZ preset by the PTZNode.
        /// </summary>
        System.Threading.Tasks.Task<GetPresetsResponse> GetPresetsAsync(GetPresetsRequest request);
        
        /// <summary>
        /// 
        ///				The SetPreset command saves the current device position parameters so that the device can
        ///				move to the saved preset position through the GotoPreset operation.
        ///				In order to create a new preset, the SetPresetRequest contains no PresetToken. If creation is
        ///				successful, the Response contains the PresetToken which uniquely identifies the Preset. An
        ///				existing Preset can be overwritten by specifying the PresetToken of the corresponding Preset.
        ///				In both cases (overwriting or creation) an optional PresetName can be specified. The
        ///				operation fails if the PTZ device is moving during the SetPreset operation.
        ///				The device MAY internally save additional states such as imaging properties in the PTZ
        ///				Preset which then should be recalled in the GotoPreset operation.      
        /// </summary>
        System.Threading.Tasks.Task<SetPresetResponse> SetPresetAsync(SetPresetRequest request);
        
        /// <summary>
        /// 
        ///        Operation to remove a PTZ preset for the Node in
        ///        the
        ///        selected profile. The operation is supported if the
        ///        PresetPosition
        ///        capability exists for teh Node in the
        ///        selected profile.
        ///      
        /// </summary>
        System.Threading.Tasks.Task<RemovePresetResponse> RemovePresetAsync(RemovePresetRequest request);
        
        /// <summary>
        /// 
        ///        Operation to go to a saved preset position for the
        ///        PTZNode in the selected profile. The operation is supported if there is
        ///        support for at least on PTZ preset by the PTZNode.
        /// </summary>
        System.Threading.Tasks.Task<GotoPresetResponse> GotoPresetAsync(GotoPresetRequest request);
        
        /// <summary>
        /// 
        ///        Operation to move the PTZ device to it's "home" position. The operation is supported if the HomeSupported element in the PTZNode is true.
        /// </summary>
        System.Threading.Tasks.Task<GotoHomePositionResponse> GotoHomePositionAsync(GotoHomePositionRequest request);
        
        /// <summary>
        /// Operation to save current position as the home position.
        ///				The SetHomePosition command returns with a failure if the “home” position is fixed and
        ///				cannot be overwritten. If the SetHomePosition is successful, it is possible to recall the
        ///				Home Position with the GotoHomePosition command.
        /// </summary>
        System.Threading.Tasks.Task<SetHomePositionResponse> SetHomePositionAsync(SetHomePositionRequest request);
        
        /// <summary>
        /// Operation for continuous Pan/Tilt and Zoom movements. The operation is supported if the PTZNode supports at least one continuous Pan/Tilt or Zoom space. If the space argument is omitted, the default space set by the PTZConfiguration will be used.
        /// </summary>
        System.Threading.Tasks.Task<ContinuousMoveResponse> ContinuousMoveAsync(ContinuousMoveRequest request);
        
        /// <summary>
        /// Operation for Relative Pan/Tilt and Zoom Move. The operation is supported if the PTZNode supports at least one relative Pan/Tilt or Zoom space. 
        ///				The speed argument is optional. If an x/y speed value is given it is up to the device to either use 
        ///				the x value as absolute resoluting speed vector or to map x and y to the component speed. 
        ///				If the speed argument is omitted, the default speed set by the PTZConfiguration will be used.
        ///			
        /// </summary>
        System.Threading.Tasks.Task<RelativeMoveResponse> RelativeMoveAsync(RelativeMoveRequest request);
        
        /// <summary>
        /// 
        ///				Operation to request PTZ status for the Node in the
        ///				selected profile.
        /// </summary>
        System.Threading.Tasks.Task<GetStatusResponse> GetStatusAsync(GetStatusRequest request);
        
        /// <summary>
        /// Operation to move pan,tilt or zoom to a absolute destination. 
        ///				The speed argument is optional. If an x/y speed value is given it is up to the device to either use 
        ///				the x value as absolute resoluting speed vector or to map x and y to the component speed. 
        ///				If the speed argument is omitted, the default speed set by the PTZConfiguration will be used.
        ///			
        /// </summary>
        System.Threading.Tasks.Task<AbsoluteMoveResponse> AbsoluteMoveAsync(AbsoluteMoveRequest request);
        
        /// <summary>
        /// Operation to stop ongoing pan, tilt and zoom movements of absolute relative and continuous type.
        ///If no stop argument for pan, tilt or zoom is set, the device will stop all ongoing pan, tilt and zoom movements.
        /// </summary>
        System.Threading.Tasks.Task<StopResponse> StopAsync(StopRequest request);
        
        /// <summary>
        /// Operation to request PTZ preset tours in the selected media profiles.
        /// </summary>
        System.Threading.Tasks.Task<GetPresetToursResponse> GetPresetToursAsync(GetPresetToursRequest request);
        
        /// <summary>
        /// Operation to request a specific PTZ preset tour in the selected media profile.
        /// </summary>
        System.Threading.Tasks.Task<GetPresetTourResponse> GetPresetTourAsync(GetPresetTourRequest request);
        
        /// <summary>
        /// Operation to request available options to configure PTZ preset tour.
        /// </summary>
        System.Threading.Tasks.Task<GetPresetTourOptionsResponse> GetPresetTourOptionsAsync(GetPresetTourOptionsRequest request);
        
        /// <summary>
        /// Operation to create a preset tour for the selected media profile.
        /// </summary>
        System.Threading.Tasks.Task<CreatePresetTourResponse> CreatePresetTourAsync(CreatePresetTourRequest request);
        
        /// <summary>
        /// Operation to modify a preset tour for the selected media profile.
        /// </summary>
        System.Threading.Tasks.Task<ModifyPresetTourResponse> ModifyPresetTourAsync(ModifyPresetTourRequest request);
        
        /// <summary>
        /// Operation to perform specific operation on the preset tour in selected media profile.
        /// </summary>
        System.Threading.Tasks.Task<OperatePresetTourResponse> OperatePresetTourAsync(OperatePresetTourRequest request);
        
        /// <summary>
        /// Operation to delete a specific preset tour from the media profile.
        /// </summary>
        System.Threading.Tasks.Task<RemovePresetTourResponse> RemovePresetTourAsync(RemovePresetTourRequest request);
        
        /// <summary>
        /// Operation to get all available PTZConfigurations that can be added to the referenced media profile. 
        ///				A device providing more than one PTZConfiguration or more than one VideoSourceConfiguration or which has any other resource
        ///				interdependency between PTZConfiguration entities and other resources listable in a media profile should implement this operation.
        ///				PTZConfiguration entities returned by this operation shall not fail on adding them to the referenced media profile.
        ///			
        /// </summary>
        System.Threading.Tasks.Task<GetCompatibleConfigurationsResponse> GetCompatibleConfigurationsAsync(GetCompatibleConfigurationsRequest request);
    }
    
    public partial class PTZClient : SoapServices.SoapClientBase, PTZ
    {
        
        /// <summary>
        /// Returns the capabilities of the PTZ service. The result is returned in a typed answer.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetServiceCapabilitiesResponse> GetServiceCapabilitiesAsync(GetServiceCapabilitiesRequest request)
        {
            return this.CallAsync<GetServiceCapabilitiesRequest, GetServiceCapabilitiesResponse>(null, request);
        }
        
        /// <summary>
        /// 
        ///				Get the descriptions of the available PTZ Nodes.
        ///				
        ///				A PTZ-capable device may have multiple PTZ Nodes. The PTZ Nodes may represent
        ///				mechanical PTZ drivers, uploaded PTZ drivers or digital PTZ drivers. PTZ Nodes are the
        ///				lowest level entities in the PTZ control API and reflect the supported PTZ capabilities. The
        ///				PTZ Node is referenced either by its name or by its reference token. 
        ///      		
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetNodesResponse> GetNodesAsync(GetNodesRequest request)
        {
            return this.CallAsync<GetNodesRequest, GetNodesResponse>(null, request);
        }
        
        /// <summary>
        /// Get a specific PTZ Node identified by a reference
        ///        token or a name.
        ///	  
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetNodeResponse> GetNodeAsync(GetNodeRequest request)
        {
            return this.CallAsync<GetNodeRequest, GetNodeResponse>(null, request);
        }
        
        /// <summary>
        /// Get a specific PTZonfiguration from the device, identified by its reference token or name.
        ///				
        ///				The default Position/Translation/Velocity Spaces are introduced to allow NVCs sending move
        ///				requests without the need to specify a certain coordinate system. The default Speeds are
        ///				introduced to control the speed of move requests (absolute, relative, preset), where no
        ///				explicit speed has been set.
        ///				The allowed pan and tilt range for Pan/Tilt Limits is defined by a two-dimensional space range
        ///				that is mapped to a specific Absolute Pan/Tilt Position Space. At least one Pan/Tilt Position
        ///				Space is required by the PTZNode to support Pan/Tilt limits. The limits apply to all supported
        ///				absolute, relative and continuous Pan/Tilt movements. The limits shall be checked within the
        ///				coordinate system for which the limits have been specified. That means that even if
        ///				movements are specified in a different coordinate system, the requested movements shall be
        ///				transformed to the coordinate system of the limits where the limits can be checked. When a
        ///				relative or continuous movements is specified, which would leave the specified limits, the PTZ
        ///				unit has to move along the specified limits. The Zoom Limits have to be interpreted
        ///				accordingly.
        ///			
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetConfigurationResponse> GetConfigurationAsync(GetConfigurationRequest request)
        {
            return this.CallAsync<GetConfigurationRequest, GetConfigurationResponse>(null, request);
        }
        
        /// <summary>
        /// 
        ///		        Get all the existing PTZConfigurations from the device.
        ///				
        ///				The default Position/Translation/Velocity Spaces are introduced to allow NVCs sending move
        ///				requests without the need to specify a certain coordinate system. The default Speeds are
        ///				introduced to control the speed of move requests (absolute, relative, preset), where no
        ///				explicit speed has been set.
        ///				The allowed pan and tilt range for Pan/Tilt Limits is defined by a two-dimensional space range
        ///				that is mapped to a specific Absolute Pan/Tilt Position Space. At least one Pan/Tilt Position
        ///				Space is required by the PTZNode to support Pan/Tilt limits. The limits apply to all supported
        ///				absolute, relative and continuous Pan/Tilt movements. The limits shall be checked within the
        ///				coordinate system for which the limits have been specified. That means that even if
        ///				movements are specified in a different coordinate system, the requested movements shall be
        ///				transformed to the coordinate system of the limits where the limits can be checked. When a
        ///				relative or continuous movements is specified, which would leave the specified limits, the PTZ
        ///				unit has to move along the specified limits. The Zoom Limits have to be interpreted
        ///				accordingly.
        ///			
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetConfigurationsResponse> GetConfigurationsAsync(GetConfigurationsRequest request)
        {
            return this.CallAsync<GetConfigurationsRequest, GetConfigurationsResponse>(null, request);
        }
        
        /// <summary>
        /// 
        ///        Set/update a existing PTZConfiguration on the device.
        ///      
        /// </summary>
        public virtual System.Threading.Tasks.Task<SetConfigurationResponse> SetConfigurationAsync(SetConfigurationRequest request)
        {
            return this.CallAsync<SetConfigurationRequest, SetConfigurationResponse>(null, request);
        }
        
        /// <summary>
        /// 
        ///				List supported coordinate systems including their range limitations. Therefore, the options
        ///				MAY differ depending on whether the PTZ Configuration is assigned to a Profile containing a
        ///				Video Source Configuration. In that case, the options may additionally contain coordinate
        ///				systems referring to the image coordinate system described by the Video Source
        ///				Configuration. If the PTZ Node supports continuous movements, it shall return a Timeout Range within
        ///				which Timeouts are accepted by the PTZ Node.				
        ///			
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetConfigurationOptionsResponse> GetConfigurationOptionsAsync(GetConfigurationOptionsRequest request)
        {
            return this.CallAsync<GetConfigurationOptionsRequest, GetConfigurationOptionsResponse>(null, request);
        }
        
        /// <summary>
        /// 
        ///        Operation to send auxiliary commands to the PTZ device
        ///        mapped by the PTZNode in the selected profile. The
        ///        operation is supported
        ///        if the AuxiliarySupported element of the PTZNode is true
        ///      
        /// </summary>
        public virtual System.Threading.Tasks.Task<SendAuxiliaryCommandResponse> SendAuxiliaryCommandAsync(SendAuxiliaryCommandRequest request)
        {
            return this.CallAsync<SendAuxiliaryCommandRequest, SendAuxiliaryCommandResponse>(null, request);
        }
        
        /// <summary>
        /// 
        ///        Operation to request all PTZ presets for the PTZNode
        ///        in the selected profile. The operation is supported if there is support
        ///        for at least on PTZ preset by the PTZNode.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetPresetsResponse> GetPresetsAsync(GetPresetsRequest request)
        {
            return this.CallAsync<GetPresetsRequest, GetPresetsResponse>(null, request);
        }
        
        /// <summary>
        /// 
        ///				The SetPreset command saves the current device position parameters so that the device can
        ///				move to the saved preset position through the GotoPreset operation.
        ///				In order to create a new preset, the SetPresetRequest contains no PresetToken. If creation is
        ///				successful, the Response contains the PresetToken which uniquely identifies the Preset. An
        ///				existing Preset can be overwritten by specifying the PresetToken of the corresponding Preset.
        ///				In both cases (overwriting or creation) an optional PresetName can be specified. The
        ///				operation fails if the PTZ device is moving during the SetPreset operation.
        ///				The device MAY internally save additional states such as imaging properties in the PTZ
        ///				Preset which then should be recalled in the GotoPreset operation.      
        /// </summary>
        public virtual System.Threading.Tasks.Task<SetPresetResponse> SetPresetAsync(SetPresetRequest request)
        {
            return this.CallAsync<SetPresetRequest, SetPresetResponse>(null, request);
        }
        
        /// <summary>
        /// 
        ///        Operation to remove a PTZ preset for the Node in
        ///        the
        ///        selected profile. The operation is supported if the
        ///        PresetPosition
        ///        capability exists for teh Node in the
        ///        selected profile.
        ///      
        /// </summary>
        public virtual System.Threading.Tasks.Task<RemovePresetResponse> RemovePresetAsync(RemovePresetRequest request)
        {
            return this.CallAsync<RemovePresetRequest, RemovePresetResponse>(null, request);
        }
        
        /// <summary>
        /// 
        ///        Operation to go to a saved preset position for the
        ///        PTZNode in the selected profile. The operation is supported if there is
        ///        support for at least on PTZ preset by the PTZNode.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GotoPresetResponse> GotoPresetAsync(GotoPresetRequest request)
        {
            return this.CallAsync<GotoPresetRequest, GotoPresetResponse>(null, request);
        }
        
        /// <summary>
        /// 
        ///        Operation to move the PTZ device to it's "home" position. The operation is supported if the HomeSupported element in the PTZNode is true.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GotoHomePositionResponse> GotoHomePositionAsync(GotoHomePositionRequest request)
        {
            return this.CallAsync<GotoHomePositionRequest, GotoHomePositionResponse>(null, request);
        }
        
        /// <summary>
        /// Operation to save current position as the home position.
        ///				The SetHomePosition command returns with a failure if the “home” position is fixed and
        ///				cannot be overwritten. If the SetHomePosition is successful, it is possible to recall the
        ///				Home Position with the GotoHomePosition command.
        /// </summary>
        public virtual System.Threading.Tasks.Task<SetHomePositionResponse> SetHomePositionAsync(SetHomePositionRequest request)
        {
            return this.CallAsync<SetHomePositionRequest, SetHomePositionResponse>(null, request);
        }
        
        /// <summary>
        /// Operation for continuous Pan/Tilt and Zoom movements. The operation is supported if the PTZNode supports at least one continuous Pan/Tilt or Zoom space. If the space argument is omitted, the default space set by the PTZConfiguration will be used.
        /// </summary>
        public virtual System.Threading.Tasks.Task<ContinuousMoveResponse> ContinuousMoveAsync(ContinuousMoveRequest request)
        {
            return this.CallAsync<ContinuousMoveRequest, ContinuousMoveResponse>(null, request);
        }
        
        /// <summary>
        /// Operation for Relative Pan/Tilt and Zoom Move. The operation is supported if the PTZNode supports at least one relative Pan/Tilt or Zoom space. 
        ///				The speed argument is optional. If an x/y speed value is given it is up to the device to either use 
        ///				the x value as absolute resoluting speed vector or to map x and y to the component speed. 
        ///				If the speed argument is omitted, the default speed set by the PTZConfiguration will be used.
        ///			
        /// </summary>
        public virtual System.Threading.Tasks.Task<RelativeMoveResponse> RelativeMoveAsync(RelativeMoveRequest request)
        {
            return this.CallAsync<RelativeMoveRequest, RelativeMoveResponse>(null, request);
        }
        
        /// <summary>
        /// 
        ///				Operation to request PTZ status for the Node in the
        ///				selected profile.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetStatusResponse> GetStatusAsync(GetStatusRequest request)
        {
            return this.CallAsync<GetStatusRequest, GetStatusResponse>(null, request);
        }
        
        /// <summary>
        /// Operation to move pan,tilt or zoom to a absolute destination. 
        ///				The speed argument is optional. If an x/y speed value is given it is up to the device to either use 
        ///				the x value as absolute resoluting speed vector or to map x and y to the component speed. 
        ///				If the speed argument is omitted, the default speed set by the PTZConfiguration will be used.
        ///			
        /// </summary>
        public virtual System.Threading.Tasks.Task<AbsoluteMoveResponse> AbsoluteMoveAsync(AbsoluteMoveRequest request)
        {
            return this.CallAsync<AbsoluteMoveRequest, AbsoluteMoveResponse>(null, request);
        }
        
        /// <summary>
        /// Operation to stop ongoing pan, tilt and zoom movements of absolute relative and continuous type.
        ///If no stop argument for pan, tilt or zoom is set, the device will stop all ongoing pan, tilt and zoom movements.
        /// </summary>
        public virtual System.Threading.Tasks.Task<StopResponse> StopAsync(StopRequest request)
        {
            return this.CallAsync<StopRequest, StopResponse>(null, request);
        }
        
        /// <summary>
        /// Operation to request PTZ preset tours in the selected media profiles.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetPresetToursResponse> GetPresetToursAsync(GetPresetToursRequest request)
        {
            return this.CallAsync<GetPresetToursRequest, GetPresetToursResponse>(null, request);
        }
        
        /// <summary>
        /// Operation to request a specific PTZ preset tour in the selected media profile.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetPresetTourResponse> GetPresetTourAsync(GetPresetTourRequest request)
        {
            return this.CallAsync<GetPresetTourRequest, GetPresetTourResponse>(null, request);
        }
        
        /// <summary>
        /// Operation to request available options to configure PTZ preset tour.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetPresetTourOptionsResponse> GetPresetTourOptionsAsync(GetPresetTourOptionsRequest request)
        {
            return this.CallAsync<GetPresetTourOptionsRequest, GetPresetTourOptionsResponse>(null, request);
        }
        
        /// <summary>
        /// Operation to create a preset tour for the selected media profile.
        /// </summary>
        public virtual System.Threading.Tasks.Task<CreatePresetTourResponse> CreatePresetTourAsync(CreatePresetTourRequest request)
        {
            return this.CallAsync<CreatePresetTourRequest, CreatePresetTourResponse>(null, request);
        }
        
        /// <summary>
        /// Operation to modify a preset tour for the selected media profile.
        /// </summary>
        public virtual System.Threading.Tasks.Task<ModifyPresetTourResponse> ModifyPresetTourAsync(ModifyPresetTourRequest request)
        {
            return this.CallAsync<ModifyPresetTourRequest, ModifyPresetTourResponse>(null, request);
        }
        
        /// <summary>
        /// Operation to perform specific operation on the preset tour in selected media profile.
        /// </summary>
        public virtual System.Threading.Tasks.Task<OperatePresetTourResponse> OperatePresetTourAsync(OperatePresetTourRequest request)
        {
            return this.CallAsync<OperatePresetTourRequest, OperatePresetTourResponse>(null, request);
        }
        
        /// <summary>
        /// Operation to delete a specific preset tour from the media profile.
        /// </summary>
        public virtual System.Threading.Tasks.Task<RemovePresetTourResponse> RemovePresetTourAsync(RemovePresetTourRequest request)
        {
            return this.CallAsync<RemovePresetTourRequest, RemovePresetTourResponse>(null, request);
        }
        
        /// <summary>
        /// Operation to get all available PTZConfigurations that can be added to the referenced media profile. 
        ///				A device providing more than one PTZConfiguration or more than one VideoSourceConfiguration or which has any other resource
        ///				interdependency between PTZConfiguration entities and other resources listable in a media profile should implement this operation.
        ///				PTZConfiguration entities returned by this operation shall not fail on adding them to the referenced media profile.
        ///			
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetCompatibleConfigurationsResponse> GetCompatibleConfigurationsAsync(GetCompatibleConfigurationsRequest request)
        {
            return this.CallAsync<GetCompatibleConfigurationsRequest, GetCompatibleConfigurationsResponse>(null, request);
        }
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetServiceCapabilitiesRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetServiceCapabilitiesResponse
    {
        
        /// <summary>
        /// The capabilities for the PTZ service is returned in the Capabilities element.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Capabilities Capabilities;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class Capabilities
    {
        
        /// <summary>
        /// Indicates whether or not EFlip is supported.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool EFlip;
        
        /// <summary>
        /// Indicates whether or not reversing of PT control direction is supported.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool Reverse;
        
        /// <summary>
        /// Indicates support for the GetCompatibleConfigurations command.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool GetCompatibleConfigurations;
        
        /// <summary>
        /// Indicates that the PTZVector includes MoveStatus information.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool MoveStatus;
        
        /// <summary>
        /// Indicates that the PTZVector includes Position information.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool StatusPosition;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetNodesRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetNodesResponse
    {
        
        /// <summary>
        /// A list of the existing PTZ Nodes on the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PTZNode[] PTZNode;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZNode : DeviceEntity
    {
        
        /// <summary>
        /// A unique identifier that is used to reference PTZ Nodes.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name;
        
        /// <summary>
        /// A list of Coordinate Systems available for the PTZ Node. For each Coordinate System, the PTZ Node MUST specify its allowed range.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public PTZSpaces SupportedPTZSpaces;
        
        /// <summary>
        /// All preset operations MUST be available for this PTZ Node if one preset is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int MaximumNumberOfPresets;
        
        /// <summary>
        /// A boolean operator specifying the availability of a home position. If set to true, the Home Position Operations MUST be available for this PTZ Node.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public bool HomeSupported;
        
        /// <summary>
        /// A list of supported Auxiliary commands. If the list is not empty, the Auxiliary Operations MUST be available for this PTZ Node.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string[] AuxiliaryCommands;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public PTZNodeExtension Extension;
    }
    
    /// <summary>
    /// Base class for physical entities like inputs and outputs.
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PTZNode))]
    public class DeviceEntity
    {
        
        /// <summary>
        /// Unique identifier referencing the physical entity.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string token;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZSpaces
    {
        
        /// <summary>
        /// The Generic Pan/Tilt Position space is provided by every PTZ node that supports absolute Pan/Tilt, since it does not relate to a specific physical range. 
        ///			Instead, the range should be defined as the full range of the PTZ unit normalized to the range -1 to 1 resulting in the following space description.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Space2DDescription[] AbsolutePanTiltPositionSpace;
        
        /// <summary>
        /// The Generic Zoom Position Space is provided by every PTZ node that supports absolute Zoom, since it does not relate to a specific physical range. 
        ///			Instead, the range should be defined as the full range of the Zoom normalized to the range 0 (wide) to 1 (tele). 
        ///			There is no assumption about how the generic zoom range is mapped to magnification, FOV or other physical zoom dimension.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public Space1DDescription[] AbsoluteZoomPositionSpace;
        
        /// <summary>
        /// The Generic Pan/Tilt translation space is provided by every PTZ node that supports relative Pan/Tilt, since it does not relate to a specific physical range. 
        ///			Instead, the range should be defined as the full positive and negative translation range of the PTZ unit normalized to the range -1 to 1, 
        ///			where positive translation would mean clockwise rotation or movement in right/up direction resulting in the following space description.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public Space2DDescription[] RelativePanTiltTranslationSpace;
        
        /// <summary>
        /// The Generic Zoom Translation Space is provided by every PTZ node that supports relative Zoom, since it does not relate to a specific physical range. 
        ///			Instead, the corresponding absolute range should be defined as the full positive and negative translation range of the Zoom normalized to the range -1 to1, 
        ///			where a positive translation maps to a movement in TELE direction. The translation is signed to indicate direction (negative is to wide, positive is to tele). 
        ///			There is no assumption about how the generic zoom range is mapped to magnification, FOV or other physical zoom dimension. This results in the following space description.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public Space1DDescription[] RelativeZoomTranslationSpace;
        
        /// <summary>
        /// The generic Pan/Tilt velocity space shall be provided by every PTZ node, since it does not relate to a specific physical range. 
        ///			Instead, the range should be defined as a range of the PTZ unit’s speed normalized to the range -1 to 1, where a positive velocity would map to clockwise 
        ///			rotation or movement in the right/up direction. A signed speed can be independently specified for the pan and tilt component resulting in the following space description.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public Space2DDescription[] ContinuousPanTiltVelocitySpace;
        
        /// <summary>
        /// The generic zoom velocity space specifies a zoom factor velocity without knowing the underlying physical model. The range should be normalized from -1 to 1, 
        ///			where a positive velocity would map to TELE direction. A generic zoom velocity space description resembles the following.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public Space1DDescription[] ContinuousZoomVelocitySpace;
        
        /// <summary>
        /// The speed space specifies the speed for a Pan/Tilt movement when moving to an absolute position or to a relative translation. 
        ///			In contrast to the velocity spaces, speed spaces do not contain any directional information. The speed of a combined Pan/Tilt 
        ///			movement is represented by a single non-negative scalar value.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public Space1DDescription[] PanTiltSpeedSpace;
        
        /// <summary>
        /// The speed space specifies the speed for a Zoom movement when moving to an absolute position or to a relative translation. 
        ///			In contrast to the velocity spaces, speed spaces do not contain any directional information.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public Space1DDescription[] ZoomSpeedSpace;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public PTZSpacesExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Space2DDescription
    {
        
        /// <summary>
        /// A URI of coordinate systems.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string URI;
        
        /// <summary>
        /// A range of x-axis.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public FloatRange XRange;
        
        /// <summary>
        /// A range of y-axis.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public FloatRange YRange;
    }
    
    /// <summary>
    /// Range of values greater equal Min value and less equal Max value.
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class FloatRange
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public float Min;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public float Max;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Space1DDescription
    {
        
        /// <summary>
        /// A URI of coordinate systems.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string URI;
        
        /// <summary>
        /// A range of x-axis.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public FloatRange XRange;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZSpacesExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZNodeExtension
    {
        
        /// <summary>
        /// Detail of supported Preset Tour feature.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PTZPresetTourSupported SupportedPresetTour;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public PTZNodeExtension2 Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZPresetTourSupported
    {
        
        /// <summary>
        /// Indicates number of preset tours that can be created. Required preset tour operations shall be available for this PTZ Node if one or more preset tour is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int MaximumNumberOfPresetTours;
        
        /// <summary>
        /// Indicates which preset tour operations are available for this PTZ Node.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public PTZPresetTourOperation[] PTZPresetTourOperation;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public PTZPresetTourSupportedExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum PTZPresetTourOperation
    {
        
        Start,
        
        Stop,
        
        Pause,
        
        Extended,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZPresetTourSupportedExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZNodeExtension2
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetNodeRequest
    {
        
        /// <summary>
        /// Token of the requested PTZNode.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string NodeToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetNodeResponse
    {
        
        /// <summary>
        /// A requested PTZNode.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PTZNode PTZNode;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetConfigurationRequest
    {
        
        /// <summary>
        /// Token of the requested PTZConfiguration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string PTZConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetConfigurationResponse
    {
        
        /// <summary>
        /// A requested PTZConfiguration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PTZConfiguration PTZConfiguration;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZConfiguration : ConfigurationEntity
    {
        
        /// <summary>
        /// A mandatory reference to the PTZ Node that the PTZ Configuration belongs to.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string NodeToken;
        
        /// <summary>
        /// If the PTZ Node supports absolute Pan/Tilt movements, it shall specify one Absolute Pan/Tilt Position Space as default.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string DefaultAbsolutePantTiltPositionSpace;
        
        /// <summary>
        /// If the PTZ Node supports absolute zoom movements, it shall specify one Absolute Zoom Position Space as default.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string DefaultAbsoluteZoomPositionSpace;
        
        /// <summary>
        /// If the PTZ Node supports relative Pan/Tilt movements, it shall specify one RelativePan/Tilt Translation Space as default.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string DefaultRelativePanTiltTranslationSpace;
        
        /// <summary>
        /// If the PTZ Node supports relative zoom movements, it shall specify one Relative Zoom Translation Space as default.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string DefaultRelativeZoomTranslationSpace;
        
        /// <summary>
        /// If the PTZ Node supports continuous Pan/Tilt movements, it shall specify one Continuous Pan/Tilt Velocity Space as default.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string DefaultContinuousPanTiltVelocitySpace;
        
        /// <summary>
        /// If the PTZ Node supports continuous zoom movements, it shall specify one Continuous Zoom Velocity Space as default.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string DefaultContinuousZoomVelocitySpace;
        
        /// <summary>
        /// If the PTZ Node supports absolute or relative PTZ movements, it shall specify corresponding default Pan/Tilt and Zoom speeds.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public PTZSpeed DefaultPTZSpeed;
        
        /// <summary>
        /// If the PTZ Node supports continuous movements, it shall specify a default timeout, after which the movement stops.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string DefaultPTZTimeout;
        
        /// <summary>
        /// The Pan/Tilt limits element should be present for a PTZ Node that supports an absolute Pan/Tilt. If the element is present it signals the support for configurable Pan/Tilt limits. If limits are enabled, the Pan/Tilt movements shall always stay within the specified range. The Pan/Tilt limits are disabled by setting the limits to –INF or +INF.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public PanTiltLimits PanTiltLimits;
        
        /// <summary>
        /// The Zoom limits element should be present for a PTZ Node that supports absolute zoom. If the element is present it signals the supports for configurable Zoom limits. If limits are enabled the zoom movements shall always stay within the specified range. The Zoom limits are disabled by settings the limits to -INF and +INF.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public ZoomLimits ZoomLimits;
        
        /// <summary>
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public PTZConfigurationExtension Extension;
    }
    
    /// <summary>
    /// Base type defining the common properties of a configuration.
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PTZConfiguration))]
    public class ConfigurationEntity
    {
        
        /// <summary>
        /// Token that uniquely refernces this configuration. Length up to 64 characters.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string token;
        
        /// <summary>
        /// User readable name. Length up to 64 characters.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name;
        
        /// <summary>
        /// Number of internal references currently using this configuration. This parameter is read-only and cannot be changed by a set request. For example the value increases if the configuration is added to a media profile or attached to a PaneConfiguration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int UseCount;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZSpeed
    {
        
        /// <summary>
        /// Pan and tilt speed. The x component corresponds to pan and the y component to tilt. If omitted in a request, the current (if any) PanTilt movement should not be affected.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Vector2D PanTilt;
        
        /// <summary>
        /// A zoom speed. If omitted in a request, the current (if any) Zoom movement should not be affected.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public Vector1D Zoom;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Vector2D
    {
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float x;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float y;
        
        /// <summary>
        /// Pan/tilt coordinate space selector. The following options are defined: http://www.onvif.org/ver10/tptz/PanTiltSpaces/PositionGenericSpace http://www.onvif.org/ver10/tptz/PanTiltSpaces/TranslationGenericSpace http://www.onvif.org/ver10/tptz/PanTiltSpaces/VelocityGenericSpace http://www.onvif.org/ver10/tptz/PanTiltSpaces/GenericSpeedSpace
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string space;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Vector1D
    {
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float x;
        
        /// <summary>
        /// Pan/tilt coordinate space selector. The following options are defined: http://www.onvif.org/ver10/tptz/PanTiltSpaces/PositionGenericSpace http://www.onvif.org/ver10/tptz/PanTiltSpaces/TranslationGenericSpace http://www.onvif.org/ver10/tptz/PanTiltSpaces/VelocityGenericSpace http://www.onvif.org/ver10/tptz/PanTiltSpaces/GenericSpeedSpace
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string space;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PanTiltLimits
    {
        
        /// <summary>
        /// A range of pan tilt limits.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Space2DDescription Range;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class ZoomLimits
    {
        
        /// <summary>
        /// A range of zoom limit
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Space1DDescription Range;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZConfigurationExtension
    {
        
        /// <summary>
        /// Optional element to configure PT Control Direction related features.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PTControlDirection PTControlDirection;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public PTZConfigurationExtension2 Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTControlDirection
    {
        
        /// <summary>
        /// Optional element to configure related parameters for E-Flip.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public EFlip EFlip;
        
        /// <summary>
        /// Optional element to configure related parameters for reversing of PT Control Direction.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public Reverse Reverse;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public PTControlDirectionExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class EFlip
    {
        
        /// <summary>
        /// Parameter to enable/disable E-Flip feature.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public EFlipMode Mode;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum EFlipMode
    {
        
        OFF,
        
        ON,
        
        Extended,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Reverse
    {
        
        /// <summary>
        /// Parameter to enable/disable Reverse feature.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ReverseMode Mode;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum ReverseMode
    {
        
        OFF,
        
        ON,
        
        AUTO,
        
        Extended,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTControlDirectionExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZConfigurationExtension2
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetConfigurationsRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetConfigurationsResponse
    {
        
        /// <summary>
        /// A list of all existing PTZConfigurations on the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PTZConfiguration[] PTZConfiguration;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class SetConfigurationRequest
    {
        
        /// <summary>
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PTZConfiguration PTZConfiguration;
        
        /// <summary>
        /// Flag that makes configuration persistent. Example: User wants the configuration to exist after reboot.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool ForcePersistence;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class SetConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetConfigurationOptionsRequest
    {
        
        /// <summary>
        /// Token of an existing configuration that the options are intended for.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetConfigurationOptionsResponse
    {
        
        /// <summary>
        /// The requested PTZ configuration options.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PTZConfigurationOptions PTZConfigurationOptions;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZConfigurationOptions
    {
        
        /// <summary>
        /// The list of acceleration ramps supported by the device. The
        ///					smallest acceleration value corresponds to the minimal index, the
        ///					highest acceleration corresponds to the maximum index.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int[] PTZRamps;
        
        /// <summary>
        /// A list of supported coordinate systems including their range limitations.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PTZSpaces Spaces;
        
        /// <summary>
        /// A timeout Range within which Timeouts are accepted by the PTZ Node.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public DurationRange PTZTimeout;
        
        /// <summary>
        /// Supported options for PT Direction Control.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public PTControlDirectionOptions PTControlDirection;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public PTZConfigurationOptions2 Extension;
    }
    
    /// <summary>
    /// Range of duration greater equal Min duration and less equal Max duration.
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class DurationRange
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Min;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Max;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTControlDirectionOptions
    {
        
        /// <summary>
        /// Supported options for EFlip feature.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public EFlipOptions EFlip;
        
        /// <summary>
        /// Supported options for Reverse feature.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ReverseOptions Reverse;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public PTControlDirectionOptionsExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class EFlipOptions
    {
        
        /// <summary>
        /// Options of EFlip mode parameter.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public EFlipMode[] Mode;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public EFlipOptionsExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class EFlipOptionsExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class ReverseOptions
    {
        
        /// <summary>
        /// Options of Reverse mode parameter.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ReverseMode[] Mode;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ReverseOptionsExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class ReverseOptionsExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTControlDirectionOptionsExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZConfigurationOptions2
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class SendAuxiliaryCommandRequest
    {
        
        /// <summary>
        /// A reference to the MediaProfile where the operation should take place.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        /// <summary>
        /// The Auxiliary request data.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string AuxiliaryData;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class SendAuxiliaryCommandResponse
    {
        
        /// <summary>
        /// The response contains the auxiliary response.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string AuxiliaryResponse;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetPresetsRequest
    {
        
        /// <summary>
        /// A reference to the MediaProfile where the operation should take place.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetPresetsResponse
    {
        
        /// <summary>
        /// A list of presets which are available for the requested MediaProfile.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PTZPreset[] Preset;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZPreset
    {
        
        /// <summary>
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string token;
        
        /// <summary>
        /// A list of preset position name.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name;
        
        /// <summary>
        /// A list of preset position.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public PTZVector PTZPosition;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZVector
    {
        
        /// <summary>
        /// Pan and tilt position. The x component corresponds to pan and the y component to tilt.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Vector2D PanTilt;
        
        /// <summary>
        /// A zoom position.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public Vector1D Zoom;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class SetPresetRequest
    {
        
        /// <summary>
        /// A reference to the MediaProfile where the operation should take place.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        /// <summary>
        /// A requested preset name.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string PresetName;
        
        /// <summary>
        /// A requested preset token.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string PresetToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class SetPresetResponse
    {
        
        /// <summary>
        /// A token to the Preset which has been set.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string PresetToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class RemovePresetRequest
    {
        
        /// <summary>
        /// A reference to the MediaProfile where the operation should take place.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        /// <summary>
        /// A requested preset token.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string PresetToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class RemovePresetResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GotoPresetRequest
    {
        
        /// <summary>
        /// A reference to the MediaProfile where the operation should take place.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        /// <summary>
        /// A requested preset token.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string PresetToken;
        
        /// <summary>
        /// A requested speed.The speed parameter can only be specified when Speed Spaces are available for the PTZ Node.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public PTZSpeed Speed;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GotoPresetResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GotoHomePositionRequest
    {
        
        /// <summary>
        /// A reference to the MediaProfile where the operation should take place.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        /// <summary>
        /// A requested speed.The speed parameter can only be specified when Speed Spaces are available for the PTZ Node.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public PTZSpeed Speed;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GotoHomePositionResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class SetHomePositionRequest
    {
        
        /// <summary>
        /// A reference to the MediaProfile where the home position should be set.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class SetHomePositionResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class ContinuousMoveRequest
    {
        
        /// <summary>
        /// A reference to the MediaProfile.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        /// <summary>
        /// A Velocity vector specifying the velocity of pan, tilt and zoom.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public PTZSpeed Velocity;
        
        /// <summary>
        /// An optional Timeout parameter.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Timeout;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class ContinuousMoveResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class RelativeMoveRequest
    {
        
        /// <summary>
        /// A reference to the MediaProfile.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        /// <summary>
        /// A positional Translation relative to the current position
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public PTZVector Translation;
        
        /// <summary>
        /// An optional Speed parameter.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public PTZSpeed Speed;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class RelativeMoveResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetStatusRequest
    {
        
        /// <summary>
        /// A reference to the MediaProfile where the PTZStatus should be requested.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetStatusResponse
    {
        
        /// <summary>
        /// The PTZStatus for the requested MediaProfile.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PTZStatus PTZStatus;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZStatus
    {
        
        /// <summary>
        /// Specifies the absolute position of the PTZ unit together with the Space references. The default absolute spaces of the corresponding PTZ configuration MUST be referenced within the Position element.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PTZVector Position;
        
        /// <summary>
        /// Indicates if the Pan/Tilt/Zoom device unit is currently moving, idle or in an unknown state.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public PTZMoveStatus MoveStatus;
        
        /// <summary>
        /// States a current PTZ error.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Error;
        
        /// <summary>
        /// Specifies the UTC time when this status was generated.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public System.DateTime UtcTime;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZMoveStatus
    {
        
        /// <summary>
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public MoveStatus PanTilt;
        
        /// <summary>
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public MoveStatus Zoom;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum MoveStatus
    {
        
        IDLE,
        
        MOVING,
        
        UNKNOWN,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class AbsoluteMoveRequest
    {
        
        /// <summary>
        /// A reference to the MediaProfile.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        /// <summary>
        /// A Position vector specifying the absolute target position.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public PTZVector Position;
        
        /// <summary>
        /// An optional Speed.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public PTZSpeed Speed;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class AbsoluteMoveResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class StopRequest
    {
        
        /// <summary>
        /// A reference to the MediaProfile that indicate what should be stopped.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        /// <summary>
        /// Set true when we want to stop ongoing pan and tilt movements.If PanTilt arguments are not present, this command stops these movements.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool PanTilt;
        
        /// <summary>
        /// Set true when we want to stop ongoing zoom movement.If Zoom arguments are not present, this command stops ongoing zoom movement.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool Zoom;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class StopResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetPresetToursRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetPresetToursResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PresetTour[] PresetTour;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PresetTour
    {
        
        /// <summary>
        /// Unique identifier of this preset tour.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string token;
        
        /// <summary>
        /// Readable name of the preset tour.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name;
        
        /// <summary>
        /// Read only parameters to indicate the status of the preset tour.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public PTZPresetTourStatus Status;
        
        /// <summary>
        /// Auto Start flag of the preset tour. True allows the preset tour to be activated always.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool AutoStart;
        
        /// <summary>
        /// Parameters to specify the detail behavior of the preset tour.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public PTZPresetTourStartingCondition StartingCondition;
        
        /// <summary>
        /// A list of detail of touring spots including preset positions.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public PTZPresetTourSpot[] TourSpot;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public PTZPresetTourExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZPresetTourStatus
    {
        
        /// <summary>
        /// Indicates state of this preset tour by Idle/Touring/Paused.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PTZPresetTourState State;
        
        /// <summary>
        /// Indicates a tour spot currently staying.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public PTZPresetTourSpot CurrentTourSpot;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public PTZPresetTourStatusExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum PTZPresetTourState
    {
        
        Idle,
        
        Touring,
        
        Paused,
        
        Extended,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZPresetTourSpot
    {
        
        /// <summary>
        /// Detail definition of preset position of the tour spot.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PTZPresetTourPresetDetail PresetDetail;
        
        /// <summary>
        /// Optional parameter to specify Pan/Tilt and Zoom speed on moving toward this tour spot.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public PTZSpeed Speed;
        
        /// <summary>
        /// Optional parameter to specify time duration of staying on this tour sport.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string StayTime;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public PTZPresetTourSpotExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZPresetTourPresetDetail
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZPresetTourSpotExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZPresetTourStatusExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZPresetTourStartingCondition
    {
        
        /// <summary>
        /// Execute presets in random order. If set to true and Direction is also present, Direction will be ignored and presets of the Tour will be recalled randomly.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool RandomPresetOrder;
        
        /// <summary>
        /// Optional parameter to specify how many times the preset tour is recurred.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int RecurringTime;
        
        /// <summary>
        /// Optional parameter to specify how long time duration the preset tour is recurred.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string RecurringDuration;
        
        /// <summary>
        /// Optional parameter to choose which direction the preset tour goes. Forward shall be chosen in case it is omitted.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public PTZPresetTourDirection Direction;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public PTZPresetTourStartingConditionExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum PTZPresetTourDirection
    {
        
        Forward,
        
        Backward,
        
        Extended,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZPresetTourStartingConditionExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZPresetTourExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetPresetTourRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string PresetTourToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetPresetTourResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PresetTour PresetTour;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetPresetTourOptionsRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string PresetTourToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetPresetTourOptionsResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PTZPresetTourOptions Options;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZPresetTourOptions
    {
        
        /// <summary>
        /// Indicates whether or not the AutoStart is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool AutoStart;
        
        /// <summary>
        /// Supported options for Preset Tour Starting Condition.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public PTZPresetTourStartingConditionOptions StartingCondition;
        
        /// <summary>
        /// Supported options for Preset Tour Spot.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public PTZPresetTourSpotOptions TourSpot;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZPresetTourStartingConditionOptions
    {
        
        /// <summary>
        /// Supported range of Recurring Time.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public IntRange RecurringTime;
        
        /// <summary>
        /// Supported range of Recurring Duration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public DurationRange RecurringDuration;
        
        /// <summary>
        /// Supported options for Direction of Preset Tour.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public PTZPresetTourDirection[] Direction;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public PTZPresetTourStartingConditionOptionsExtension Extension;
    }
    
    /// <summary>
    /// Range of values greater equal Min value and less equal Max value.
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class IntRange
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Min;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int Max;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZPresetTourStartingConditionOptionsExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZPresetTourSpotOptions
    {
        
        /// <summary>
        /// Supported options for detail definition of preset position of the tour spot.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PTZPresetTourPresetDetailOptions PresetDetail;
        
        /// <summary>
        /// Supported range of stay time for a tour spot.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public DurationRange StayTime;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZPresetTourPresetDetailOptions
    {
        
        /// <summary>
        /// A list of available Preset Tokens for tour spots.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string[] PresetToken;
        
        /// <summary>
        /// An option to indicate Home postion for tour spots.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool Home;
        
        /// <summary>
        /// Supported range of Pan and Tilt for tour spots.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public Space2DDescription PanTiltPositionSpace;
        
        /// <summary>
        /// Supported range of Zoom for a tour spot.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public Space1DDescription ZoomPositionSpace;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public PTZPresetTourPresetDetailOptionsExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZPresetTourPresetDetailOptionsExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class CreatePresetTourRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class CreatePresetTourResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string PresetTourToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class ModifyPresetTourRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public PresetTour PresetTour;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class ModifyPresetTourResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class OperatePresetTourRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string PresetTourToken;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public PTZPresetTourOperation Operation;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class OperatePresetTourResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class RemovePresetTourRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string PresetTourToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class RemovePresetTourResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetCompatibleConfigurationsRequest
    {
        
        /// <summary>
        /// Contains the token of an existing media profile the configurations shall be compatible with.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetCompatibleConfigurationsResponse
    {
        
        /// <summary>
        /// A list of all existing PTZConfigurations on the NVT that is suitable to be added to the addressed media profile.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PTZConfiguration[] PTZConfiguration;
    }
}
