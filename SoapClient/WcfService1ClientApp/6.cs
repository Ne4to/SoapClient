//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNs6
{
    
    
    public interface PTZ
    {
        
        System.Threading.Tasks.Task<GetServiceCapabilitiesResponse> GetServiceCapabilities(GetServiceCapabilities request);
        
        System.Threading.Tasks.Task<GetNodesResponse> GetNodes(GetNodes request);
        
        System.Threading.Tasks.Task<GetNodeResponse> GetNode(GetNode request);
        
        System.Threading.Tasks.Task<GetConfigurationResponse> GetConfiguration(GetConfiguration request);
        
        System.Threading.Tasks.Task<GetConfigurationsResponse> GetConfigurations(GetConfigurations request);
        
        System.Threading.Tasks.Task<SetConfigurationResponse> SetConfiguration(SetConfiguration request);
        
        System.Threading.Tasks.Task<GetConfigurationOptionsResponse> GetConfigurationOptions(GetConfigurationOptions request);
        
        System.Threading.Tasks.Task<SendAuxiliaryCommandResponse> SendAuxiliaryCommand(SendAuxiliaryCommand request);
        
        System.Threading.Tasks.Task<GetPresetsResponse> GetPresets(GetPresets request);
        
        System.Threading.Tasks.Task<SetPresetResponse> SetPreset(SetPreset request);
        
        System.Threading.Tasks.Task<RemovePresetResponse> RemovePreset(RemovePreset request);
        
        System.Threading.Tasks.Task<GotoPresetResponse> GotoPreset(GotoPreset request);
        
        System.Threading.Tasks.Task<GotoHomePositionResponse> GotoHomePosition(GotoHomePosition request);
        
        System.Threading.Tasks.Task<SetHomePositionResponse> SetHomePosition(SetHomePosition request);
        
        System.Threading.Tasks.Task<ContinuousMoveResponse> ContinuousMove(ContinuousMove request);
        
        System.Threading.Tasks.Task<RelativeMoveResponse> RelativeMove(RelativeMove request);
        
        System.Threading.Tasks.Task<GetStatusResponse> GetStatus(GetStatus request);
        
        System.Threading.Tasks.Task<AbsoluteMoveResponse> AbsoluteMove(AbsoluteMove request);
        
        System.Threading.Tasks.Task<StopResponse> Stop(Stop request);
        
        System.Threading.Tasks.Task<GetPresetToursResponse> GetPresetTours(GetPresetTours request);
        
        System.Threading.Tasks.Task<GetPresetTourResponse> GetPresetTour(GetPresetTour request);
        
        System.Threading.Tasks.Task<GetPresetTourOptionsResponse> GetPresetTourOptions(GetPresetTourOptions request);
        
        System.Threading.Tasks.Task<CreatePresetTourResponse> CreatePresetTour(CreatePresetTour request);
        
        System.Threading.Tasks.Task<ModifyPresetTourResponse> ModifyPresetTour(ModifyPresetTour request);
        
        System.Threading.Tasks.Task<OperatePresetTourResponse> OperatePresetTour(OperatePresetTour request);
        
        System.Threading.Tasks.Task<RemovePresetTourResponse> RemovePresetTour(RemovePresetTour request);
        
        System.Threading.Tasks.Task<GetCompatibleConfigurationsResponse> GetCompatibleConfigurations(GetCompatibleConfigurations request);
    }
    
    public partial class PTZClient : SoapServices.SoapClientBase, PTZ
    {
        
        public virtual System.Threading.Tasks.Task<GetServiceCapabilitiesResponse> GetServiceCapabilities(GetServiceCapabilities request)
        {
            return this.CallAsync<GetServiceCapabilities, GetServiceCapabilitiesResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetNodesResponse> GetNodes(GetNodes request)
        {
            return this.CallAsync<GetNodes, GetNodesResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetNodeResponse> GetNode(GetNode request)
        {
            return this.CallAsync<GetNode, GetNodeResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetConfigurationResponse> GetConfiguration(GetConfiguration request)
        {
            return this.CallAsync<GetConfiguration, GetConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetConfigurationsResponse> GetConfigurations(GetConfigurations request)
        {
            return this.CallAsync<GetConfigurations, GetConfigurationsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetConfigurationResponse> SetConfiguration(SetConfiguration request)
        {
            return this.CallAsync<SetConfiguration, SetConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetConfigurationOptionsResponse> GetConfigurationOptions(GetConfigurationOptions request)
        {
            return this.CallAsync<GetConfigurationOptions, GetConfigurationOptionsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SendAuxiliaryCommandResponse> SendAuxiliaryCommand(SendAuxiliaryCommand request)
        {
            return this.CallAsync<SendAuxiliaryCommand, SendAuxiliaryCommandResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetPresetsResponse> GetPresets(GetPresets request)
        {
            return this.CallAsync<GetPresets, GetPresetsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetPresetResponse> SetPreset(SetPreset request)
        {
            return this.CallAsync<SetPreset, SetPresetResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<RemovePresetResponse> RemovePreset(RemovePreset request)
        {
            return this.CallAsync<RemovePreset, RemovePresetResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GotoPresetResponse> GotoPreset(GotoPreset request)
        {
            return this.CallAsync<GotoPreset, GotoPresetResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GotoHomePositionResponse> GotoHomePosition(GotoHomePosition request)
        {
            return this.CallAsync<GotoHomePosition, GotoHomePositionResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetHomePositionResponse> SetHomePosition(SetHomePosition request)
        {
            return this.CallAsync<SetHomePosition, SetHomePositionResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<ContinuousMoveResponse> ContinuousMove(ContinuousMove request)
        {
            return this.CallAsync<ContinuousMove, ContinuousMoveResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<RelativeMoveResponse> RelativeMove(RelativeMove request)
        {
            return this.CallAsync<RelativeMove, RelativeMoveResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetStatusResponse> GetStatus(GetStatus request)
        {
            return this.CallAsync<GetStatus, GetStatusResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<AbsoluteMoveResponse> AbsoluteMove(AbsoluteMove request)
        {
            return this.CallAsync<AbsoluteMove, AbsoluteMoveResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<StopResponse> Stop(Stop request)
        {
            return this.CallAsync<Stop, StopResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetPresetToursResponse> GetPresetTours(GetPresetTours request)
        {
            return this.CallAsync<GetPresetTours, GetPresetToursResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetPresetTourResponse> GetPresetTour(GetPresetTour request)
        {
            return this.CallAsync<GetPresetTour, GetPresetTourResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetPresetTourOptionsResponse> GetPresetTourOptions(GetPresetTourOptions request)
        {
            return this.CallAsync<GetPresetTourOptions, GetPresetTourOptionsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<CreatePresetTourResponse> CreatePresetTour(CreatePresetTour request)
        {
            return this.CallAsync<CreatePresetTour, CreatePresetTourResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<ModifyPresetTourResponse> ModifyPresetTour(ModifyPresetTour request)
        {
            return this.CallAsync<ModifyPresetTour, ModifyPresetTourResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<OperatePresetTourResponse> OperatePresetTour(OperatePresetTour request)
        {
            return this.CallAsync<OperatePresetTour, OperatePresetTourResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<RemovePresetTourResponse> RemovePresetTour(RemovePresetTour request)
        {
            return this.CallAsync<RemovePresetTour, RemovePresetTourResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetCompatibleConfigurationsResponse> GetCompatibleConfigurations(GetCompatibleConfigurations request)
        {
            return this.CallAsync<GetCompatibleConfigurations, GetCompatibleConfigurationsResponse>(null, request);
        }
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetServiceCapabilities
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetServiceCapabilitiesResponse
    {
        
        /// <summary>
        /// The capabilities for the PTZ service is returned in the Capabilities element.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Capabilities Capabilities;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class Capabilities
    {
        
        /// <summary>
        /// Indicates whether or not EFlip is supported.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool EFlip;
        
        /// <summary>
        /// Indicates whether or not reversing of PT control direction is supported.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool Reverse;
        
        /// <summary>
        /// Indicates support for the GetCompatibleConfigurations command.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool GetCompatibleConfigurations;
        
        /// <summary>
        /// Indicates that the PTZVector includes MoveStatus information.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool MoveStatus;
        
        /// <summary>
        /// Indicates that the PTZVector includes Position information.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool StatusPosition;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetNodes
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetNodesResponse
    {
        
        /// <summary>
        /// A list of the existing PTZ Nodes on the device.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PTZNode[] PTZNode;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZNode
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetNode
    {
        
        /// <summary>
        /// Token of the requested PTZNode.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string NodeToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetNodeResponse
    {
        
        /// <summary>
        /// A requested PTZNode.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PTZNode PTZNode;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetConfiguration
    {
        
        /// <summary>
        /// Token of the requested PTZConfiguration.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string PTZConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetConfigurationResponse
    {
        
        /// <summary>
        /// A requested PTZConfiguration.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PTZConfiguration PTZConfiguration;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZConfiguration
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetConfigurations
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetConfigurationsResponse
    {
        
        /// <summary>
        /// A list of all existing PTZConfigurations on the device.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PTZConfiguration[] PTZConfiguration;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class SetConfiguration
    {
        
        /// <summary>
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PTZConfiguration PTZConfiguration;
        
        /// <summary>
        /// Flag that makes configuration persistent. Example: User wants the configuration to exist after reboot.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool ForcePersistence;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class SetConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetConfigurationOptions
    {
        
        /// <summary>
        /// Token of an existing configuration that the options are intended for.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetConfigurationOptionsResponse
    {
        
        /// <summary>
        /// The requested PTZ configuration options.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PTZConfigurationOptions PTZConfigurationOptions;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZConfigurationOptions
    {
        
        /// <summary>
        /// 
        ///					The list of acceleration ramps supported by the device. The
        ///					smallest acceleration value corresponds to the minimal index, the
        ///					highest acceleration corresponds to the maximum index.					
        ///				
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int[] PTZRamps;
        
        /// <summary>
        /// 
        ///            A list of supported coordinate systems including their range limitations.
        ///          
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PTZSpaces Spaces;
        
        /// <summary>
        /// 
        ///            A timeout Range within which Timeouts are accepted by the PTZ Node.
        ///          
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public DurationRange PTZTimeout;
        
        /// <summary>
        /// Supported options for PT Direction Control.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public PTControlDirectionOptions PTControlDirection;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public PTZConfigurationOptions2 Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZSpaces
    {
        
        /// <summary>
        /// 
        ///            The Generic Pan/Tilt Position space is provided by every PTZ node that supports absolute Pan/Tilt, since it does not relate to a specific physical range. 
        ///			Instead, the range should be defined as the full range of the PTZ unit normalized to the range -1 to 1 resulting in the following space description.
        ///          
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Space2DDescription[] AbsolutePanTiltPositionSpace;
        
        /// <summary>
        /// 
        ///            The Generic Zoom Position Space is provided by every PTZ node that supports absolute Zoom, since it does not relate to a specific physical range. 
        ///			Instead, the range should be defined as the full range of the Zoom normalized to the range 0 (wide) to 1 (tele). 
        ///			There is no assumption about how the generic zoom range is mapped to magnification, FOV or other physical zoom dimension.
        ///          
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public Space1DDescription[] AbsoluteZoomPositionSpace;
        
        /// <summary>
        /// 
        ///            The Generic Pan/Tilt translation space is provided by every PTZ node that supports relative Pan/Tilt, since it does not relate to a specific physical range. 
        ///			Instead, the range should be defined as the full positive and negative translation range of the PTZ unit normalized to the range -1 to 1, 
        ///			where positive translation would mean clockwise rotation or movement in right/up direction resulting in the following space description.
        ///          
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public Space2DDescription[] RelativePanTiltTranslationSpace;
        
        /// <summary>
        /// 
        ///            The Generic Zoom Translation Space is provided by every PTZ node that supports relative Zoom, since it does not relate to a specific physical range. 
        ///			Instead, the corresponding absolute range should be defined as the full positive and negative translation range of the Zoom normalized to the range -1 to1, 
        ///			where a positive translation maps to a movement in TELE direction. The translation is signed to indicate direction (negative is to wide, positive is to tele). 
        ///			There is no assumption about how the generic zoom range is mapped to magnification, FOV or other physical zoom dimension. This results in the following space description.
        ///          
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public Space1DDescription[] RelativeZoomTranslationSpace;
        
        /// <summary>
        /// 
        ///            The generic Pan/Tilt velocity space shall be provided by every PTZ node, since it does not relate to a specific physical range. 
        ///			Instead, the range should be defined as a range of the PTZ unit’s speed normalized to the range -1 to 1, where a positive velocity would map to clockwise 
        ///			rotation or movement in the right/up direction. A signed speed can be independently specified for the pan and tilt component resulting in the following space description.
        ///          
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public Space2DDescription[] ContinuousPanTiltVelocitySpace;
        
        /// <summary>
        /// 
        ///            The generic zoom velocity space specifies a zoom factor velocity without knowing the underlying physical model. The range should be normalized from -1 to 1, 
        ///			where a positive velocity would map to TELE direction. A generic zoom velocity space description resembles the following.
        ///          
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public Space1DDescription[] ContinuousZoomVelocitySpace;
        
        /// <summary>
        /// 
        ///            The speed space specifies the speed for a Pan/Tilt movement when moving to an absolute position or to a relative translation. 
        ///			In contrast to the velocity spaces, speed spaces do not contain any directional information. The speed of a combined Pan/Tilt 
        ///			movement is represented by a single non-negative scalar value.
        ///          
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public Space1DDescription[] PanTiltSpeedSpace;
        
        /// <summary>
        /// 
        ///            The speed space specifies the speed for a Zoom movement when moving to an absolute position or to a relative translation. 
        ///			In contrast to the velocity spaces, speed spaces do not contain any directional information. 
        ///          
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public Space1DDescription[] ZoomSpeedSpace;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public PTZSpacesExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Space2DDescription
    {
        
        /// <summary>
        /// 
        ///            A URI of coordinate systems.
        ///          
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string URI;
        
        /// <summary>
        /// 
        ///            A range of x-axis.
        ///          
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public FloatRange XRange;
        
        /// <summary>
        /// 
        ///            A range of y-axis.
        ///          
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public FloatRange YRange;
    }
    
    /// <summary>
    /// Range of values greater equal Min value and less equal Max value.
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class FloatRange
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public float Min;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public float Max;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Space1DDescription
    {
        
        /// <summary>
        /// 
        ///            A URI of coordinate systems.
        ///          
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string URI;
        
        /// <summary>
        /// 
        ///            A range of x-axis.
        ///          
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public FloatRange XRange;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZSpacesExtension
    {
    }
    
    /// <summary>
    /// Range of duration greater equal Min duration and less equal Max duration.
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class DurationRange
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Min;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Max;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTControlDirectionOptions
    {
        
        /// <summary>
        /// Supported options for EFlip feature.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public EFlipOptions EFlip;
        
        /// <summary>
        /// Supported options for Reverse feature.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ReverseOptions Reverse;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public PTControlDirectionOptionsExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class EFlipOptions
    {
        
        /// <summary>
        /// Options of EFlip mode parameter.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string[] Mode;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public EFlipOptionsExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class EFlipOptionsExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class ReverseOptions
    {
        
        /// <summary>
        /// Options of Reverse mode parameter.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string[] Mode;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ReverseOptionsExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class ReverseOptionsExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTControlDirectionOptionsExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZConfigurationOptions2
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class SendAuxiliaryCommand
    {
        
        /// <summary>
        /// A reference to the MediaProfile where the operation should take place.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        /// <summary>
        /// The Auxiliary request data.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string AuxiliaryData;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class SendAuxiliaryCommandResponse
    {
        
        /// <summary>
        /// The response contains the auxiliary response.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string AuxiliaryResponse;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetPresets
    {
        
        /// <summary>
        /// A reference to the MediaProfile where the operation should take place.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetPresetsResponse
    {
        
        /// <summary>
        /// A list of presets which are available for the requested MediaProfile.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PTZPreset[] Preset;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZPreset
    {
        
        /// <summary>
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string token;
        
        /// <summary>
        /// 
        ///            A list of preset position name.
        ///          
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name;
        
        /// <summary>
        /// 
        ///            A list of preset position.
        ///          
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public PTZVector PTZPosition;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZVector
    {
        
        /// <summary>
        /// Pan and tilt position. The x component corresponds to pan and the y component to tilt.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Vector2D PanTilt;
        
        /// <summary>
        /// 
        ///            A zoom position.
        ///          
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public Vector1D Zoom;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Vector2D
    {
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float x;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float y;
        
        /// <summary>
        /// 
        ///  				Pan/tilt coordinate space selector. The following options are defined: http://www.onvif.org/ver10/tptz/PanTiltSpaces/PositionGenericSpace http://www.onvif.org/ver10/tptz/PanTiltSpaces/TranslationGenericSpace http://www.onvif.org/ver10/tptz/PanTiltSpaces/VelocityGenericSpace http://www.onvif.org/ver10/tptz/PanTiltSpaces/GenericSpeedSpace
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string space;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Vector1D
    {
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float x;
        
        /// <summary>
        /// 
        ///  				Pan/tilt coordinate space selector. The following options are defined: http://www.onvif.org/ver10/tptz/PanTiltSpaces/PositionGenericSpace http://www.onvif.org/ver10/tptz/PanTiltSpaces/TranslationGenericSpace http://www.onvif.org/ver10/tptz/PanTiltSpaces/VelocityGenericSpace http://www.onvif.org/ver10/tptz/PanTiltSpaces/GenericSpeedSpace
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string space;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class SetPreset
    {
        
        /// <summary>
        /// A reference to the MediaProfile where the operation should take place.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        /// <summary>
        /// A requested preset name.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string PresetName;
        
        /// <summary>
        /// A requested preset token.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string PresetToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class SetPresetResponse
    {
        
        /// <summary>
        /// A token to the Preset which has been set.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string PresetToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class RemovePreset
    {
        
        /// <summary>
        /// A reference to the MediaProfile where the operation should take place.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        /// <summary>
        /// A requested preset token.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string PresetToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class RemovePresetResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GotoPreset
    {
        
        /// <summary>
        /// A reference to the MediaProfile where the operation should take place.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        /// <summary>
        /// A requested preset token.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string PresetToken;
        
        /// <summary>
        /// A requested speed.The speed parameter can only be specified when Speed Spaces are available for the PTZ Node.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public PTZSpeed Speed;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZSpeed
    {
        
        /// <summary>
        /// Pan and tilt speed. The x component corresponds to pan and the y component to tilt. If omitted in a request, the current (if any) PanTilt movement should not be affected. 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Vector2D PanTilt;
        
        /// <summary>
        /// 
        ///            A zoom speed. If omitted in a request, the current (if any) Zoom movement should not be affected.
        ///          
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public Vector1D Zoom;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GotoPresetResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GotoHomePosition
    {
        
        /// <summary>
        /// A reference to the MediaProfile where the operation should take place.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        /// <summary>
        /// A requested speed.The speed parameter can only be specified when Speed Spaces are available for the PTZ Node.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public PTZSpeed Speed;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GotoHomePositionResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class SetHomePosition
    {
        
        /// <summary>
        /// A reference to the MediaProfile where the home position should be set.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class SetHomePositionResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class ContinuousMove
    {
        
        /// <summary>
        /// A reference to the MediaProfile.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        /// <summary>
        /// A Velocity vector specifying the velocity of pan, tilt and zoom.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public PTZSpeed Velocity;
        
        /// <summary>
        /// An optional Timeout parameter.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Timeout;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class ContinuousMoveResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class RelativeMove
    {
        
        /// <summary>
        /// A reference to the MediaProfile.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        /// <summary>
        /// A positional Translation relative to the current position
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public PTZVector Translation;
        
        /// <summary>
        /// An optional Speed parameter.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public PTZSpeed Speed;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class RelativeMoveResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetStatus
    {
        
        /// <summary>
        /// A reference to the MediaProfile where the PTZStatus should be requested.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetStatusResponse
    {
        
        /// <summary>
        /// The PTZStatus for the requested MediaProfile.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PTZStatus PTZStatus;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZStatus
    {
        
        /// <summary>
        /// 
        ///            Specifies the absolute position of the PTZ unit together with the Space references. The default absolute spaces of the corresponding PTZ configuration MUST be referenced within the Position element.
        ///          
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PTZVector Position;
        
        /// <summary>
        /// 
        ///            Indicates if the Pan/Tilt/Zoom device unit is currently moving, idle or in an unknown state.
        ///          
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public PTZMoveStatus MoveStatus;
        
        /// <summary>
        /// 
        ///            States a current PTZ error.
        ///          
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Error;
        
        /// <summary>
        /// 
        ///            Specifies the UTC time when this status was generated.
        ///          
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public System.DateTime UtcTime;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZMoveStatus
    {
        
        /// <summary>
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string PanTilt;
        
        /// <summary>
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Zoom;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class AbsoluteMove
    {
        
        /// <summary>
        /// A reference to the MediaProfile.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        /// <summary>
        /// A Position vector specifying the absolute target position.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public PTZVector Position;
        
        /// <summary>
        /// An optional Speed.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public PTZSpeed Speed;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class AbsoluteMoveResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class Stop
    {
        
        /// <summary>
        /// A reference to the MediaProfile that indicate what should be stopped.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        /// <summary>
        /// Set true when we want to stop ongoing pan and tilt movements.If PanTilt arguments are not present, this command stops these movements.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool PanTilt;
        
        /// <summary>
        /// Set true when we want to stop ongoing zoom movement.If Zoom arguments are not present, this command stops ongoing zoom movement.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool Zoom;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class StopResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetPresetTours
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetPresetToursResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PresetTour[] PresetTour;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PresetTour
    {
        
        /// <summary>
        /// Unique identifier of this preset tour.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string token;
        
        /// <summary>
        /// Readable name of the preset tour.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name;
        
        /// <summary>
        /// Read only parameters to indicate the status of the preset tour.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public PTZPresetTourStatus Status;
        
        /// <summary>
        /// Auto Start flag of the preset tour. True allows the preset tour to be activated always.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool AutoStart;
        
        /// <summary>
        /// Parameters to specify the detail behavior of the preset tour.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public PTZPresetTourStartingCondition StartingCondition;
        
        /// <summary>
        /// A list of detail of touring spots including preset positions.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public PTZPresetTourSpot[] TourSpot;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public PTZPresetTourExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZPresetTourStatus
    {
        
        /// <summary>
        /// Indicates state of this preset tour by Idle/Touring/Paused.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string State;
        
        /// <summary>
        /// Indicates a tour spot currently staying.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public PTZPresetTourSpot CurrentTourSpot;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public PTZPresetTourStatusExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZPresetTourSpot
    {
        
        /// <summary>
        /// Detail definition of preset position of the tour spot.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PTZPresetTourPresetDetail PresetDetail;
        
        /// <summary>
        /// Optional parameter to specify Pan/Tilt and Zoom speed on moving toward this tour spot.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public PTZSpeed Speed;
        
        /// <summary>
        /// Optional parameter to specify time duration of staying on this tour sport.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string StayTime;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public PTZPresetTourSpotExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZPresetTourPresetDetail
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZPresetTourSpotExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZPresetTourStatusExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZPresetTourStartingCondition
    {
        
        /// <summary>
        /// Execute presets in random order. If set to true and Direction is also present, Direction will be ignored and presets of the Tour will be recalled randomly.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool RandomPresetOrder;
        
        /// <summary>
        /// Optional parameter to specify how many times the preset tour is recurred.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int RecurringTime;
        
        /// <summary>
        /// Optional parameter to specify how long time duration the preset tour is recurred.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string RecurringDuration;
        
        /// <summary>
        /// Optional parameter to choose which direction the preset tour goes. Forward shall be chosen in case it is omitted.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Direction;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public PTZPresetTourStartingConditionExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZPresetTourStartingConditionExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZPresetTourExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetPresetTour
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string PresetTourToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetPresetTourResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PresetTour PresetTour;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetPresetTourOptions
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string PresetTourToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetPresetTourOptionsResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PTZPresetTourOptions Options;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZPresetTourOptions
    {
        
        /// <summary>
        /// Indicates whether or not the AutoStart is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool AutoStart;
        
        /// <summary>
        /// Supported options for Preset Tour Starting Condition.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public PTZPresetTourStartingConditionOptions StartingCondition;
        
        /// <summary>
        /// Supported options for Preset Tour Spot.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public PTZPresetTourSpotOptions TourSpot;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZPresetTourStartingConditionOptions
    {
        
        /// <summary>
        /// Supported range of Recurring Time.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public IntRange RecurringTime;
        
        /// <summary>
        /// Supported range of Recurring Duration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public DurationRange RecurringDuration;
        
        /// <summary>
        /// Supported options for Direction of Preset Tour.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string[] Direction;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public PTZPresetTourStartingConditionOptionsExtension Extension;
    }
    
    /// <summary>
    /// Range of values greater equal Min value and less equal Max value.
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class IntRange
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Min;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int Max;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZPresetTourStartingConditionOptionsExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZPresetTourSpotOptions
    {
        
        /// <summary>
        /// Supported options for detail definition of preset position of the tour spot.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PTZPresetTourPresetDetailOptions PresetDetail;
        
        /// <summary>
        /// Supported range of stay time for a tour spot.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public DurationRange StayTime;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZPresetTourPresetDetailOptions
    {
        
        /// <summary>
        /// A list of available Preset Tokens for tour spots.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string[] PresetToken;
        
        /// <summary>
        /// An option to indicate Home postion for tour spots.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool Home;
        
        /// <summary>
        /// Supported range of Pan and Tilt for tour spots.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public Space2DDescription PanTiltPositionSpace;
        
        /// <summary>
        /// Supported range of Zoom for a tour spot.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public Space1DDescription ZoomPositionSpace;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public PTZPresetTourPresetDetailOptionsExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZPresetTourPresetDetailOptionsExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class CreatePresetTour
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class CreatePresetTourResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string PresetTourToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class ModifyPresetTour
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public PresetTour PresetTour;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class ModifyPresetTourResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class OperatePresetTour
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string PresetTourToken;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Operation;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class OperatePresetTourResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class RemovePresetTour
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string PresetTourToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class RemovePresetTourResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetCompatibleConfigurations
    {
        
        /// <summary>
        /// Contains the token of an existing media profile the configurations shall be compatible with.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver20/ptz/wsdl")]
    public class GetCompatibleConfigurationsResponse
    {
        
        /// <summary>
        /// A list of all existing PTZConfigurations on the NVT that is suitable to be added to the addressed media profile.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PTZConfiguration[] PTZConfiguration;
    }
}
