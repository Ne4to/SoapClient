//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AstroSoft.WindowsStore.Onvif.Proxies.OnvifServices.Media
{
    
    
    public interface Media
    {
        
        System.Threading.Tasks.Task<GetServiceCapabilitiesResponse> GetServiceCapabilitiesAsync(GetServiceCapabilitiesRequest request);
        
        System.Threading.Tasks.Task<GetVideoSourcesResponse> GetVideoSourcesAsync(GetVideoSourcesRequest request);
        
        System.Threading.Tasks.Task<GetAudioSourcesResponse> GetAudioSourcesAsync(GetAudioSourcesRequest request);
        
        System.Threading.Tasks.Task<GetAudioOutputsResponse> GetAudioOutputsAsync(GetAudioOutputsRequest request);
        
        System.Threading.Tasks.Task<CreateProfileResponse> CreateProfileAsync(CreateProfileRequest request);
        
        System.Threading.Tasks.Task<GetProfileResponse> GetProfileAsync(GetProfileRequest request);
        
        System.Threading.Tasks.Task<GetProfilesResponse> GetProfilesAsync(GetProfilesRequest request);
        
        System.Threading.Tasks.Task<AddVideoEncoderConfigurationResponse> AddVideoEncoderConfigurationAsync(AddVideoEncoderConfigurationRequest request);
        
        System.Threading.Tasks.Task<RemoveVideoEncoderConfigurationResponse> RemoveVideoEncoderConfigurationAsync(RemoveVideoEncoderConfigurationRequest request);
        
        System.Threading.Tasks.Task<AddVideoSourceConfigurationResponse> AddVideoSourceConfigurationAsync(AddVideoSourceConfigurationRequest request);
        
        System.Threading.Tasks.Task<RemoveVideoSourceConfigurationResponse> RemoveVideoSourceConfigurationAsync(RemoveVideoSourceConfigurationRequest request);
        
        System.Threading.Tasks.Task<AddAudioEncoderConfigurationResponse> AddAudioEncoderConfigurationAsync(AddAudioEncoderConfigurationRequest request);
        
        System.Threading.Tasks.Task<RemoveAudioEncoderConfigurationResponse> RemoveAudioEncoderConfigurationAsync(RemoveAudioEncoderConfigurationRequest request);
        
        System.Threading.Tasks.Task<AddAudioSourceConfigurationResponse> AddAudioSourceConfigurationAsync(AddAudioSourceConfigurationRequest request);
        
        System.Threading.Tasks.Task<RemoveAudioSourceConfigurationResponse> RemoveAudioSourceConfigurationAsync(RemoveAudioSourceConfigurationRequest request);
        
        System.Threading.Tasks.Task<AddPTZConfigurationResponse> AddPTZConfigurationAsync(AddPTZConfigurationRequest request);
        
        System.Threading.Tasks.Task<RemovePTZConfigurationResponse> RemovePTZConfigurationAsync(RemovePTZConfigurationRequest request);
        
        System.Threading.Tasks.Task<AddVideoAnalyticsConfigurationResponse> AddVideoAnalyticsConfigurationAsync(AddVideoAnalyticsConfigurationRequest request);
        
        System.Threading.Tasks.Task<RemoveVideoAnalyticsConfigurationResponse> RemoveVideoAnalyticsConfigurationAsync(RemoveVideoAnalyticsConfigurationRequest request);
        
        System.Threading.Tasks.Task<AddMetadataConfigurationResponse> AddMetadataConfigurationAsync(AddMetadataConfigurationRequest request);
        
        System.Threading.Tasks.Task<RemoveMetadataConfigurationResponse> RemoveMetadataConfigurationAsync(RemoveMetadataConfigurationRequest request);
        
        System.Threading.Tasks.Task<AddAudioOutputConfigurationResponse> AddAudioOutputConfigurationAsync(AddAudioOutputConfigurationRequest request);
        
        System.Threading.Tasks.Task<RemoveAudioOutputConfigurationResponse> RemoveAudioOutputConfigurationAsync(RemoveAudioOutputConfigurationRequest request);
        
        System.Threading.Tasks.Task<AddAudioDecoderConfigurationResponse> AddAudioDecoderConfigurationAsync(AddAudioDecoderConfigurationRequest request);
        
        System.Threading.Tasks.Task<RemoveAudioDecoderConfigurationResponse> RemoveAudioDecoderConfigurationAsync(RemoveAudioDecoderConfigurationRequest request);
        
        System.Threading.Tasks.Task<DeleteProfileResponse> DeleteProfileAsync(DeleteProfileRequest request);
        
        System.Threading.Tasks.Task<GetVideoSourceConfigurationsResponse> GetVideoSourceConfigurationsAsync(GetVideoSourceConfigurationsRequest request);
        
        System.Threading.Tasks.Task<GetVideoEncoderConfigurationsResponse> GetVideoEncoderConfigurationsAsync(GetVideoEncoderConfigurationsRequest request);
        
        System.Threading.Tasks.Task<GetAudioSourceConfigurationsResponse> GetAudioSourceConfigurationsAsync(GetAudioSourceConfigurationsRequest request);
        
        System.Threading.Tasks.Task<GetAudioEncoderConfigurationsResponse> GetAudioEncoderConfigurationsAsync(GetAudioEncoderConfigurationsRequest request);
        
        System.Threading.Tasks.Task<GetVideoAnalyticsConfigurationsResponse> GetVideoAnalyticsConfigurationsAsync(GetVideoAnalyticsConfigurationsRequest request);
        
        System.Threading.Tasks.Task<GetMetadataConfigurationsResponse> GetMetadataConfigurationsAsync(GetMetadataConfigurationsRequest request);
        
        System.Threading.Tasks.Task<GetAudioOutputConfigurationsResponse> GetAudioOutputConfigurationsAsync(GetAudioOutputConfigurationsRequest request);
        
        System.Threading.Tasks.Task<GetAudioDecoderConfigurationsResponse> GetAudioDecoderConfigurationsAsync(GetAudioDecoderConfigurationsRequest request);
        
        System.Threading.Tasks.Task<GetVideoSourceConfigurationResponse> GetVideoSourceConfigurationAsync(GetVideoSourceConfigurationRequest request);
        
        System.Threading.Tasks.Task<GetVideoEncoderConfigurationResponse> GetVideoEncoderConfigurationAsync(GetVideoEncoderConfigurationRequest request);
        
        System.Threading.Tasks.Task<GetAudioSourceConfigurationResponse> GetAudioSourceConfigurationAsync(GetAudioSourceConfigurationRequest request);
        
        System.Threading.Tasks.Task<GetAudioEncoderConfigurationResponse> GetAudioEncoderConfigurationAsync(GetAudioEncoderConfigurationRequest request);
        
        System.Threading.Tasks.Task<GetVideoAnalyticsConfigurationResponse> GetVideoAnalyticsConfigurationAsync(GetVideoAnalyticsConfigurationRequest request);
        
        System.Threading.Tasks.Task<GetMetadataConfigurationResponse> GetMetadataConfigurationAsync(GetMetadataConfigurationRequest request);
        
        System.Threading.Tasks.Task<GetAudioOutputConfigurationResponse> GetAudioOutputConfigurationAsync(GetAudioOutputConfigurationRequest request);
        
        System.Threading.Tasks.Task<GetAudioDecoderConfigurationResponse> GetAudioDecoderConfigurationAsync(GetAudioDecoderConfigurationRequest request);
        
        System.Threading.Tasks.Task<GetCompatibleVideoEncoderConfigurationsResponse> GetCompatibleVideoEncoderConfigurationsAsync(GetCompatibleVideoEncoderConfigurationsRequest request);
        
        System.Threading.Tasks.Task<GetCompatibleVideoSourceConfigurationsResponse> GetCompatibleVideoSourceConfigurationsAsync(GetCompatibleVideoSourceConfigurationsRequest request);
        
        System.Threading.Tasks.Task<GetCompatibleAudioEncoderConfigurationsResponse> GetCompatibleAudioEncoderConfigurationsAsync(GetCompatibleAudioEncoderConfigurationsRequest request);
        
        System.Threading.Tasks.Task<GetCompatibleAudioSourceConfigurationsResponse> GetCompatibleAudioSourceConfigurationsAsync(GetCompatibleAudioSourceConfigurationsRequest request);
        
        System.Threading.Tasks.Task<GetCompatibleVideoAnalyticsConfigurationsResponse> GetCompatibleVideoAnalyticsConfigurationsAsync(GetCompatibleVideoAnalyticsConfigurationsRequest request);
        
        System.Threading.Tasks.Task<GetCompatibleMetadataConfigurationsResponse> GetCompatibleMetadataConfigurationsAsync(GetCompatibleMetadataConfigurationsRequest request);
        
        System.Threading.Tasks.Task<GetCompatibleAudioOutputConfigurationsResponse> GetCompatibleAudioOutputConfigurationsAsync(GetCompatibleAudioOutputConfigurationsRequest request);
        
        System.Threading.Tasks.Task<GetCompatibleAudioDecoderConfigurationsResponse> GetCompatibleAudioDecoderConfigurationsAsync(GetCompatibleAudioDecoderConfigurationsRequest request);
        
        System.Threading.Tasks.Task<SetVideoSourceConfigurationResponse> SetVideoSourceConfigurationAsync(SetVideoSourceConfigurationRequest request);
        
        System.Threading.Tasks.Task<SetVideoEncoderConfigurationResponse> SetVideoEncoderConfigurationAsync(SetVideoEncoderConfigurationRequest request);
        
        System.Threading.Tasks.Task<SetAudioSourceConfigurationResponse> SetAudioSourceConfigurationAsync(SetAudioSourceConfigurationRequest request);
        
        System.Threading.Tasks.Task<SetAudioEncoderConfigurationResponse> SetAudioEncoderConfigurationAsync(SetAudioEncoderConfigurationRequest request);
        
        System.Threading.Tasks.Task<SetVideoAnalyticsConfigurationResponse> SetVideoAnalyticsConfigurationAsync(SetVideoAnalyticsConfigurationRequest request);
        
        System.Threading.Tasks.Task<SetMetadataConfigurationResponse> SetMetadataConfigurationAsync(SetMetadataConfigurationRequest request);
        
        System.Threading.Tasks.Task<SetAudioOutputConfigurationResponse> SetAudioOutputConfigurationAsync(SetAudioOutputConfigurationRequest request);
        
        System.Threading.Tasks.Task<SetAudioDecoderConfigurationResponse> SetAudioDecoderConfigurationAsync(SetAudioDecoderConfigurationRequest request);
        
        System.Threading.Tasks.Task<GetVideoSourceConfigurationOptionsResponse> GetVideoSourceConfigurationOptionsAsync(GetVideoSourceConfigurationOptionsRequest request);
        
        System.Threading.Tasks.Task<GetVideoEncoderConfigurationOptionsResponse> GetVideoEncoderConfigurationOptionsAsync(GetVideoEncoderConfigurationOptionsRequest request);
        
        System.Threading.Tasks.Task<GetAudioSourceConfigurationOptionsResponse> GetAudioSourceConfigurationOptionsAsync(GetAudioSourceConfigurationOptionsRequest request);
        
        System.Threading.Tasks.Task<GetAudioEncoderConfigurationOptionsResponse> GetAudioEncoderConfigurationOptionsAsync(GetAudioEncoderConfigurationOptionsRequest request);
        
        System.Threading.Tasks.Task<GetMetadataConfigurationOptionsResponse> GetMetadataConfigurationOptionsAsync(GetMetadataConfigurationOptionsRequest request);
        
        System.Threading.Tasks.Task<GetAudioOutputConfigurationOptionsResponse> GetAudioOutputConfigurationOptionsAsync(GetAudioOutputConfigurationOptionsRequest request);
        
        System.Threading.Tasks.Task<GetAudioDecoderConfigurationOptionsResponse> GetAudioDecoderConfigurationOptionsAsync(GetAudioDecoderConfigurationOptionsRequest request);
        
        System.Threading.Tasks.Task<GetGuaranteedNumberOfVideoEncoderInstancesResponse> GetGuaranteedNumberOfVideoEncoderInstancesAsync(GetGuaranteedNumberOfVideoEncoderInstancesRequest request);
        
        System.Threading.Tasks.Task<GetStreamUriResponse> GetStreamUriAsync(GetStreamUriRequest request);
        
        System.Threading.Tasks.Task<StartMulticastStreamingResponse> StartMulticastStreamingAsync(StartMulticastStreamingRequest request);
        
        System.Threading.Tasks.Task<StopMulticastStreamingResponse> StopMulticastStreamingAsync(StopMulticastStreamingRequest request);
        
        System.Threading.Tasks.Task<SetSynchronizationPointResponse> SetSynchronizationPointAsync(SetSynchronizationPointRequest request);
        
        System.Threading.Tasks.Task<GetSnapshotUriResponse> GetSnapshotUriAsync(GetSnapshotUriRequest request);
        
        System.Threading.Tasks.Task<GetVideoSourceModesResponse> GetVideoSourceModesAsync(GetVideoSourceModesRequest request);
        
        System.Threading.Tasks.Task<SetVideoSourceModeResponse> SetVideoSourceModeAsync(SetVideoSourceModeRequest request);
        
        System.Threading.Tasks.Task<GetOSDsResponse> GetOSDsAsync(GetOSDsRequest request);
        
        System.Threading.Tasks.Task<GetOSDResponse> GetOSDAsync(GetOSDRequest request);
        
        System.Threading.Tasks.Task<GetOSDOptionsResponse> GetOSDOptionsAsync(GetOSDOptionsRequest request);
        
        System.Threading.Tasks.Task<SetOSDResponse> SetOSDAsync(SetOSDRequest request);
        
        System.Threading.Tasks.Task<CreateOSDResponse> CreateOSDAsync(CreateOSDRequest request);
        
        System.Threading.Tasks.Task<DeleteOSDResponse> DeleteOSDAsync(DeleteOSDRequest request);
    }
    
    public partial class MediaClient : SoapServices.SoapClientBase, Media
    {
        
        public virtual System.Threading.Tasks.Task<GetServiceCapabilitiesResponse> GetServiceCapabilitiesAsync(GetServiceCapabilitiesRequest request)
        {
            return this.CallAsync<GetServiceCapabilitiesRequest, GetServiceCapabilitiesResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetVideoSourcesResponse> GetVideoSourcesAsync(GetVideoSourcesRequest request)
        {
            return this.CallAsync<GetVideoSourcesRequest, GetVideoSourcesResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetAudioSourcesResponse> GetAudioSourcesAsync(GetAudioSourcesRequest request)
        {
            return this.CallAsync<GetAudioSourcesRequest, GetAudioSourcesResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetAudioOutputsResponse> GetAudioOutputsAsync(GetAudioOutputsRequest request)
        {
            return this.CallAsync<GetAudioOutputsRequest, GetAudioOutputsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<CreateProfileResponse> CreateProfileAsync(CreateProfileRequest request)
        {
            return this.CallAsync<CreateProfileRequest, CreateProfileResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetProfileResponse> GetProfileAsync(GetProfileRequest request)
        {
            return this.CallAsync<GetProfileRequest, GetProfileResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetProfilesResponse> GetProfilesAsync(GetProfilesRequest request)
        {
            return this.CallAsync<GetProfilesRequest, GetProfilesResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<AddVideoEncoderConfigurationResponse> AddVideoEncoderConfigurationAsync(AddVideoEncoderConfigurationRequest request)
        {
            return this.CallAsync<AddVideoEncoderConfigurationRequest, AddVideoEncoderConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<RemoveVideoEncoderConfigurationResponse> RemoveVideoEncoderConfigurationAsync(RemoveVideoEncoderConfigurationRequest request)
        {
            return this.CallAsync<RemoveVideoEncoderConfigurationRequest, RemoveVideoEncoderConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<AddVideoSourceConfigurationResponse> AddVideoSourceConfigurationAsync(AddVideoSourceConfigurationRequest request)
        {
            return this.CallAsync<AddVideoSourceConfigurationRequest, AddVideoSourceConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<RemoveVideoSourceConfigurationResponse> RemoveVideoSourceConfigurationAsync(RemoveVideoSourceConfigurationRequest request)
        {
            return this.CallAsync<RemoveVideoSourceConfigurationRequest, RemoveVideoSourceConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<AddAudioEncoderConfigurationResponse> AddAudioEncoderConfigurationAsync(AddAudioEncoderConfigurationRequest request)
        {
            return this.CallAsync<AddAudioEncoderConfigurationRequest, AddAudioEncoderConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<RemoveAudioEncoderConfigurationResponse> RemoveAudioEncoderConfigurationAsync(RemoveAudioEncoderConfigurationRequest request)
        {
            return this.CallAsync<RemoveAudioEncoderConfigurationRequest, RemoveAudioEncoderConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<AddAudioSourceConfigurationResponse> AddAudioSourceConfigurationAsync(AddAudioSourceConfigurationRequest request)
        {
            return this.CallAsync<AddAudioSourceConfigurationRequest, AddAudioSourceConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<RemoveAudioSourceConfigurationResponse> RemoveAudioSourceConfigurationAsync(RemoveAudioSourceConfigurationRequest request)
        {
            return this.CallAsync<RemoveAudioSourceConfigurationRequest, RemoveAudioSourceConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<AddPTZConfigurationResponse> AddPTZConfigurationAsync(AddPTZConfigurationRequest request)
        {
            return this.CallAsync<AddPTZConfigurationRequest, AddPTZConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<RemovePTZConfigurationResponse> RemovePTZConfigurationAsync(RemovePTZConfigurationRequest request)
        {
            return this.CallAsync<RemovePTZConfigurationRequest, RemovePTZConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<AddVideoAnalyticsConfigurationResponse> AddVideoAnalyticsConfigurationAsync(AddVideoAnalyticsConfigurationRequest request)
        {
            return this.CallAsync<AddVideoAnalyticsConfigurationRequest, AddVideoAnalyticsConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<RemoveVideoAnalyticsConfigurationResponse> RemoveVideoAnalyticsConfigurationAsync(RemoveVideoAnalyticsConfigurationRequest request)
        {
            return this.CallAsync<RemoveVideoAnalyticsConfigurationRequest, RemoveVideoAnalyticsConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<AddMetadataConfigurationResponse> AddMetadataConfigurationAsync(AddMetadataConfigurationRequest request)
        {
            return this.CallAsync<AddMetadataConfigurationRequest, AddMetadataConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<RemoveMetadataConfigurationResponse> RemoveMetadataConfigurationAsync(RemoveMetadataConfigurationRequest request)
        {
            return this.CallAsync<RemoveMetadataConfigurationRequest, RemoveMetadataConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<AddAudioOutputConfigurationResponse> AddAudioOutputConfigurationAsync(AddAudioOutputConfigurationRequest request)
        {
            return this.CallAsync<AddAudioOutputConfigurationRequest, AddAudioOutputConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<RemoveAudioOutputConfigurationResponse> RemoveAudioOutputConfigurationAsync(RemoveAudioOutputConfigurationRequest request)
        {
            return this.CallAsync<RemoveAudioOutputConfigurationRequest, RemoveAudioOutputConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<AddAudioDecoderConfigurationResponse> AddAudioDecoderConfigurationAsync(AddAudioDecoderConfigurationRequest request)
        {
            return this.CallAsync<AddAudioDecoderConfigurationRequest, AddAudioDecoderConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<RemoveAudioDecoderConfigurationResponse> RemoveAudioDecoderConfigurationAsync(RemoveAudioDecoderConfigurationRequest request)
        {
            return this.CallAsync<RemoveAudioDecoderConfigurationRequest, RemoveAudioDecoderConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<DeleteProfileResponse> DeleteProfileAsync(DeleteProfileRequest request)
        {
            return this.CallAsync<DeleteProfileRequest, DeleteProfileResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetVideoSourceConfigurationsResponse> GetVideoSourceConfigurationsAsync(GetVideoSourceConfigurationsRequest request)
        {
            return this.CallAsync<GetVideoSourceConfigurationsRequest, GetVideoSourceConfigurationsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetVideoEncoderConfigurationsResponse> GetVideoEncoderConfigurationsAsync(GetVideoEncoderConfigurationsRequest request)
        {
            return this.CallAsync<GetVideoEncoderConfigurationsRequest, GetVideoEncoderConfigurationsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetAudioSourceConfigurationsResponse> GetAudioSourceConfigurationsAsync(GetAudioSourceConfigurationsRequest request)
        {
            return this.CallAsync<GetAudioSourceConfigurationsRequest, GetAudioSourceConfigurationsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetAudioEncoderConfigurationsResponse> GetAudioEncoderConfigurationsAsync(GetAudioEncoderConfigurationsRequest request)
        {
            return this.CallAsync<GetAudioEncoderConfigurationsRequest, GetAudioEncoderConfigurationsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetVideoAnalyticsConfigurationsResponse> GetVideoAnalyticsConfigurationsAsync(GetVideoAnalyticsConfigurationsRequest request)
        {
            return this.CallAsync<GetVideoAnalyticsConfigurationsRequest, GetVideoAnalyticsConfigurationsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetMetadataConfigurationsResponse> GetMetadataConfigurationsAsync(GetMetadataConfigurationsRequest request)
        {
            return this.CallAsync<GetMetadataConfigurationsRequest, GetMetadataConfigurationsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetAudioOutputConfigurationsResponse> GetAudioOutputConfigurationsAsync(GetAudioOutputConfigurationsRequest request)
        {
            return this.CallAsync<GetAudioOutputConfigurationsRequest, GetAudioOutputConfigurationsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetAudioDecoderConfigurationsResponse> GetAudioDecoderConfigurationsAsync(GetAudioDecoderConfigurationsRequest request)
        {
            return this.CallAsync<GetAudioDecoderConfigurationsRequest, GetAudioDecoderConfigurationsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetVideoSourceConfigurationResponse> GetVideoSourceConfigurationAsync(GetVideoSourceConfigurationRequest request)
        {
            return this.CallAsync<GetVideoSourceConfigurationRequest, GetVideoSourceConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetVideoEncoderConfigurationResponse> GetVideoEncoderConfigurationAsync(GetVideoEncoderConfigurationRequest request)
        {
            return this.CallAsync<GetVideoEncoderConfigurationRequest, GetVideoEncoderConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetAudioSourceConfigurationResponse> GetAudioSourceConfigurationAsync(GetAudioSourceConfigurationRequest request)
        {
            return this.CallAsync<GetAudioSourceConfigurationRequest, GetAudioSourceConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetAudioEncoderConfigurationResponse> GetAudioEncoderConfigurationAsync(GetAudioEncoderConfigurationRequest request)
        {
            return this.CallAsync<GetAudioEncoderConfigurationRequest, GetAudioEncoderConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetVideoAnalyticsConfigurationResponse> GetVideoAnalyticsConfigurationAsync(GetVideoAnalyticsConfigurationRequest request)
        {
            return this.CallAsync<GetVideoAnalyticsConfigurationRequest, GetVideoAnalyticsConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetMetadataConfigurationResponse> GetMetadataConfigurationAsync(GetMetadataConfigurationRequest request)
        {
            return this.CallAsync<GetMetadataConfigurationRequest, GetMetadataConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetAudioOutputConfigurationResponse> GetAudioOutputConfigurationAsync(GetAudioOutputConfigurationRequest request)
        {
            return this.CallAsync<GetAudioOutputConfigurationRequest, GetAudioOutputConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetAudioDecoderConfigurationResponse> GetAudioDecoderConfigurationAsync(GetAudioDecoderConfigurationRequest request)
        {
            return this.CallAsync<GetAudioDecoderConfigurationRequest, GetAudioDecoderConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetCompatibleVideoEncoderConfigurationsResponse> GetCompatibleVideoEncoderConfigurationsAsync(GetCompatibleVideoEncoderConfigurationsRequest request)
        {
            return this.CallAsync<GetCompatibleVideoEncoderConfigurationsRequest, GetCompatibleVideoEncoderConfigurationsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetCompatibleVideoSourceConfigurationsResponse> GetCompatibleVideoSourceConfigurationsAsync(GetCompatibleVideoSourceConfigurationsRequest request)
        {
            return this.CallAsync<GetCompatibleVideoSourceConfigurationsRequest, GetCompatibleVideoSourceConfigurationsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetCompatibleAudioEncoderConfigurationsResponse> GetCompatibleAudioEncoderConfigurationsAsync(GetCompatibleAudioEncoderConfigurationsRequest request)
        {
            return this.CallAsync<GetCompatibleAudioEncoderConfigurationsRequest, GetCompatibleAudioEncoderConfigurationsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetCompatibleAudioSourceConfigurationsResponse> GetCompatibleAudioSourceConfigurationsAsync(GetCompatibleAudioSourceConfigurationsRequest request)
        {
            return this.CallAsync<GetCompatibleAudioSourceConfigurationsRequest, GetCompatibleAudioSourceConfigurationsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetCompatibleVideoAnalyticsConfigurationsResponse> GetCompatibleVideoAnalyticsConfigurationsAsync(GetCompatibleVideoAnalyticsConfigurationsRequest request)
        {
            return this.CallAsync<GetCompatibleVideoAnalyticsConfigurationsRequest, GetCompatibleVideoAnalyticsConfigurationsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetCompatibleMetadataConfigurationsResponse> GetCompatibleMetadataConfigurationsAsync(GetCompatibleMetadataConfigurationsRequest request)
        {
            return this.CallAsync<GetCompatibleMetadataConfigurationsRequest, GetCompatibleMetadataConfigurationsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetCompatibleAudioOutputConfigurationsResponse> GetCompatibleAudioOutputConfigurationsAsync(GetCompatibleAudioOutputConfigurationsRequest request)
        {
            return this.CallAsync<GetCompatibleAudioOutputConfigurationsRequest, GetCompatibleAudioOutputConfigurationsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetCompatibleAudioDecoderConfigurationsResponse> GetCompatibleAudioDecoderConfigurationsAsync(GetCompatibleAudioDecoderConfigurationsRequest request)
        {
            return this.CallAsync<GetCompatibleAudioDecoderConfigurationsRequest, GetCompatibleAudioDecoderConfigurationsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetVideoSourceConfigurationResponse> SetVideoSourceConfigurationAsync(SetVideoSourceConfigurationRequest request)
        {
            return this.CallAsync<SetVideoSourceConfigurationRequest, SetVideoSourceConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetVideoEncoderConfigurationResponse> SetVideoEncoderConfigurationAsync(SetVideoEncoderConfigurationRequest request)
        {
            return this.CallAsync<SetVideoEncoderConfigurationRequest, SetVideoEncoderConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetAudioSourceConfigurationResponse> SetAudioSourceConfigurationAsync(SetAudioSourceConfigurationRequest request)
        {
            return this.CallAsync<SetAudioSourceConfigurationRequest, SetAudioSourceConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetAudioEncoderConfigurationResponse> SetAudioEncoderConfigurationAsync(SetAudioEncoderConfigurationRequest request)
        {
            return this.CallAsync<SetAudioEncoderConfigurationRequest, SetAudioEncoderConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetVideoAnalyticsConfigurationResponse> SetVideoAnalyticsConfigurationAsync(SetVideoAnalyticsConfigurationRequest request)
        {
            return this.CallAsync<SetVideoAnalyticsConfigurationRequest, SetVideoAnalyticsConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetMetadataConfigurationResponse> SetMetadataConfigurationAsync(SetMetadataConfigurationRequest request)
        {
            return this.CallAsync<SetMetadataConfigurationRequest, SetMetadataConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetAudioOutputConfigurationResponse> SetAudioOutputConfigurationAsync(SetAudioOutputConfigurationRequest request)
        {
            return this.CallAsync<SetAudioOutputConfigurationRequest, SetAudioOutputConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetAudioDecoderConfigurationResponse> SetAudioDecoderConfigurationAsync(SetAudioDecoderConfigurationRequest request)
        {
            return this.CallAsync<SetAudioDecoderConfigurationRequest, SetAudioDecoderConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetVideoSourceConfigurationOptionsResponse> GetVideoSourceConfigurationOptionsAsync(GetVideoSourceConfigurationOptionsRequest request)
        {
            return this.CallAsync<GetVideoSourceConfigurationOptionsRequest, GetVideoSourceConfigurationOptionsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetVideoEncoderConfigurationOptionsResponse> GetVideoEncoderConfigurationOptionsAsync(GetVideoEncoderConfigurationOptionsRequest request)
        {
            return this.CallAsync<GetVideoEncoderConfigurationOptionsRequest, GetVideoEncoderConfigurationOptionsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetAudioSourceConfigurationOptionsResponse> GetAudioSourceConfigurationOptionsAsync(GetAudioSourceConfigurationOptionsRequest request)
        {
            return this.CallAsync<GetAudioSourceConfigurationOptionsRequest, GetAudioSourceConfigurationOptionsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetAudioEncoderConfigurationOptionsResponse> GetAudioEncoderConfigurationOptionsAsync(GetAudioEncoderConfigurationOptionsRequest request)
        {
            return this.CallAsync<GetAudioEncoderConfigurationOptionsRequest, GetAudioEncoderConfigurationOptionsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetMetadataConfigurationOptionsResponse> GetMetadataConfigurationOptionsAsync(GetMetadataConfigurationOptionsRequest request)
        {
            return this.CallAsync<GetMetadataConfigurationOptionsRequest, GetMetadataConfigurationOptionsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetAudioOutputConfigurationOptionsResponse> GetAudioOutputConfigurationOptionsAsync(GetAudioOutputConfigurationOptionsRequest request)
        {
            return this.CallAsync<GetAudioOutputConfigurationOptionsRequest, GetAudioOutputConfigurationOptionsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetAudioDecoderConfigurationOptionsResponse> GetAudioDecoderConfigurationOptionsAsync(GetAudioDecoderConfigurationOptionsRequest request)
        {
            return this.CallAsync<GetAudioDecoderConfigurationOptionsRequest, GetAudioDecoderConfigurationOptionsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetGuaranteedNumberOfVideoEncoderInstancesResponse> GetGuaranteedNumberOfVideoEncoderInstancesAsync(GetGuaranteedNumberOfVideoEncoderInstancesRequest request)
        {
            return this.CallAsync<GetGuaranteedNumberOfVideoEncoderInstancesRequest, GetGuaranteedNumberOfVideoEncoderInstancesResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetStreamUriResponse> GetStreamUriAsync(GetStreamUriRequest request)
        {
            return this.CallAsync<GetStreamUriRequest, GetStreamUriResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<StartMulticastStreamingResponse> StartMulticastStreamingAsync(StartMulticastStreamingRequest request)
        {
            return this.CallAsync<StartMulticastStreamingRequest, StartMulticastStreamingResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<StopMulticastStreamingResponse> StopMulticastStreamingAsync(StopMulticastStreamingRequest request)
        {
            return this.CallAsync<StopMulticastStreamingRequest, StopMulticastStreamingResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetSynchronizationPointResponse> SetSynchronizationPointAsync(SetSynchronizationPointRequest request)
        {
            return this.CallAsync<SetSynchronizationPointRequest, SetSynchronizationPointResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetSnapshotUriResponse> GetSnapshotUriAsync(GetSnapshotUriRequest request)
        {
            return this.CallAsync<GetSnapshotUriRequest, GetSnapshotUriResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetVideoSourceModesResponse> GetVideoSourceModesAsync(GetVideoSourceModesRequest request)
        {
            return this.CallAsync<GetVideoSourceModesRequest, GetVideoSourceModesResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetVideoSourceModeResponse> SetVideoSourceModeAsync(SetVideoSourceModeRequest request)
        {
            return this.CallAsync<SetVideoSourceModeRequest, SetVideoSourceModeResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetOSDsResponse> GetOSDsAsync(GetOSDsRequest request)
        {
            return this.CallAsync<GetOSDsRequest, GetOSDsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetOSDResponse> GetOSDAsync(GetOSDRequest request)
        {
            return this.CallAsync<GetOSDRequest, GetOSDResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetOSDOptionsResponse> GetOSDOptionsAsync(GetOSDOptionsRequest request)
        {
            return this.CallAsync<GetOSDOptionsRequest, GetOSDOptionsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetOSDResponse> SetOSDAsync(SetOSDRequest request)
        {
            return this.CallAsync<SetOSDRequest, SetOSDResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<CreateOSDResponse> CreateOSDAsync(CreateOSDRequest request)
        {
            return this.CallAsync<CreateOSDRequest, CreateOSDResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<DeleteOSDResponse> DeleteOSDAsync(DeleteOSDRequest request)
        {
            return this.CallAsync<DeleteOSDRequest, DeleteOSDResponse>(null, request);
        }
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetServiceCapabilitiesRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetServiceCapabilitiesResponse
    {
        
        /// <summary>
        /// The capabilities for the media service is returned in the Capabilities element.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Capabilities Capabilities;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class Capabilities
    {
        
        /// <summary>
        /// Indicates if GetSnapshotUri is supported.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool SnapshotUri;
        
        /// <summary>
        /// Indicates whether or not Rotation feature is supported.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool Rotation;
        
        /// <summary>
        /// Indicates the support for changing video source mode.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool VideoSourceMode;
        
        /// <summary>
        /// Indicates if OSD is supported.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool OSD;
        
        /// <summary>
        /// Media profile capabilities.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ProfileCapabilities ProfileCapabilities;
        
        /// <summary>
        /// Streaming capabilities.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public StreamingCapabilities StreamingCapabilities;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class ProfileCapabilities
    {
        
        /// <summary>
        /// Maximum number of profiles supported.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int MaximumNumberOfProfiles;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class StreamingCapabilities
    {
        
        /// <summary>
        /// Indicates support for RTP multicast.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool RTPMulticast;
        
        /// <summary>
        /// Indicates support for RTP over TCP.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool RTP_TCP;
        
        /// <summary>
        /// Indicates support for RTP/RTSP/TCP.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool RTP_RTSP_TCP;
        
        /// <summary>
        /// Indicates support for non aggregate RTSP control.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool NonAggregateControl;
        
        /// <summary>
        ///  Indicates the device does not support live media streaming via RTSP.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool NoRTSPStreaming;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetVideoSourcesRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetVideoSourcesResponse
    {
        
        /// <summary>
        /// List of existing Video Sources
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VideoSource[] VideoSources;
    }
    
    /// <summary>
    /// Representation of a physical video input.
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class VideoSource : DeviceEntity
    {
        
        /// <summary>
        /// Frame rate in frames per second.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public float Framerate;
        
        /// <summary>
        /// Horizontal and vertical resolution
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public VideoResolution Resolution;
        
        /// <summary>
        /// Optional configuration of the image sensor.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ImagingSettings Imaging;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public VideoSourceExtension Extension;
    }
    
    /// <summary>
    /// Base class for physical entities like inputs and outputs.
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class DeviceEntity
    {
        
        /// <summary>
        /// Unique identifier referencing the physical entity.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string token;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class VideoResolution
    {
        
        /// <summary>
        /// Number of the columns of the Video image.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Width;
        
        /// <summary>
        /// Number of the lines of the Video image.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int Height;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class ImagingSettings
    {
        
        /// <summary>
        /// Enabled/disabled BLC mode (on/off).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public BacklightCompensation BacklightCompensation;
        
        /// <summary>
        /// Image brightness (unit unspecified).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public float Brightness;
        
        /// <summary>
        /// Color saturation of the image (unit unspecified).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public float ColorSaturation;
        
        /// <summary>
        /// Contrast of the image (unit unspecified).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public float Contrast;
        
        /// <summary>
        /// Exposure mode of the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public Exposure Exposure;
        
        /// <summary>
        /// Focus configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public FocusConfiguration Focus;
        
        /// <summary>
        /// Infrared Cutoff Filter settings.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public IrCutFilterMode IrCutFilter;
        
        /// <summary>
        /// Sharpness of the Video image.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public float Sharpness;
        
        /// <summary>
        /// WDR settings.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public WideDynamicRange WideDynamicRange;
        
        /// <summary>
        /// White balance settings.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public WhiteBalance WhiteBalance;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public ImagingSettingsExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class BacklightCompensation
    {
        
        /// <summary>
        /// Backlight compensation mode (on/off).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public BacklightCompensationMode Mode;
        
        /// <summary>
        /// Optional level parameter (unit unspecified).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public float Level;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum BacklightCompensationMode
    {
        
        OFF,
        
        ON,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Exposure
    {
        
        /// <summary>
        /// 
        ///					Exposure Mode
        ///					Auto – Enabled the exposure algorithm on the NVT.Manual – Disabled exposure algorithm on the NVT.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ExposureMode Mode;
        
        /// <summary>
        /// 
        ///				The exposure priority mode (low noise/framerate).
        ///				
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ExposurePriority Priority;
        
        /// <summary>
        /// 
        ///				Rectangular exposure mask.
        ///				
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public Rectangle Window;
        
        /// <summary>
        /// 
        ///				Minimum value of exposure time range allowed to be used by the algorithm.
        ///				
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public float MinExposureTime;
        
        /// <summary>
        /// 
        ///				Maximum value of exposure time range allowed to be used by the algorithm.
        ///				
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public float MaxExposureTime;
        
        /// <summary>
        /// 
        ///				Minimum value of the sensor gain range that is allowed to be used by the algorithm.
        ///				
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public float MinGain;
        
        /// <summary>
        /// 
        ///				Maximum value of the sensor gain range that is allowed to be used by the algorithm.
        ///				
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public float MaxGain;
        
        /// <summary>
        /// 
        ///				Minimum value of the iris range allowed to be used by the algorithm.
        ///				
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public float MinIris;
        
        /// <summary>
        /// 
        ///				Maximum value of the iris range allowed to be used by the algorithm.
        ///				
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public float MaxIris;
        
        /// <summary>
        /// 
        ///				The fixed exposure time used by the image sensor (μs).
        ///				
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public float ExposureTime;
        
        /// <summary>
        /// 
        ///				The fixed gain used by the image sensor (dB).
        ///				
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public float Gain;
        
        /// <summary>
        /// 
        ///				The fixed attenuation of input light affected by the iris (dB). 0dB maps to a fully opened iris.
        ///				
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public float Iris;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum ExposureMode
    {
        
        AUTO,
        
        MANUAL,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum ExposurePriority
    {
        
        LowNoise,
        
        FrameRate,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Rectangle
    {
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float bottom;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float top;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float right;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float left;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class FocusConfiguration
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AutoFocusMode AutoFocusMode;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public float DefaultSpeed;
        
        /// <summary>
        /// Parameter to set autofocus near limit (unit: meter).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public float NearLimit;
        
        /// <summary>
        /// Parameter to set autofocus far limit (unit: meter).
        ///If set to 0.0, infinity will be used.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public float FarLimit;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum AutoFocusMode
    {
        
        AUTO,
        
        MANUAL,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum IrCutFilterMode
    {
        
        ON,
        
        OFF,
        
        AUTO,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class WideDynamicRange
    {
        
        /// <summary>
        /// 
        ///				White dynamic range (on/off)
        ///				
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public WideDynamicMode Mode;
        
        /// <summary>
        /// 
        ///				Optional level parameter (unitless)
        ///				
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public float Level;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum WideDynamicMode
    {
        
        OFF,
        
        ON,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class WhiteBalance
    {
        
        /// <summary>
        /// Auto whitebalancing mode (auto/manual).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public WhiteBalanceMode Mode;
        
        /// <summary>
        /// Rgain (unitless).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public float CrGain;
        
        /// <summary>
        /// Bgain (unitless).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public float CbGain;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum WhiteBalanceMode
    {
        
        AUTO,
        
        MANUAL,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class ImagingSettingsExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class VideoSourceExtension
    {
        
        /// <summary>
        /// Optional configuration of the image sensor. To be used if imaging service 2.00 is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ImagingSettings20 Imaging;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public VideoSourceExtension2 Extension;
    }
    
    /// <summary>
    /// Type describing the ImagingSettings of a VideoSource. The supported options and ranges can be obtained via the GetOptions command.
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class ImagingSettings20
    {
        
        /// <summary>
        /// Enabled/disabled BLC mode (on/off).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public BacklightCompensation20 BacklightCompensation;
        
        /// <summary>
        /// Image brightness (unit unspecified).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public float Brightness;
        
        /// <summary>
        /// Color saturation of the image (unit unspecified).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public float ColorSaturation;
        
        /// <summary>
        /// Contrast of the image (unit unspecified).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public float Contrast;
        
        /// <summary>
        /// Exposure mode of the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public Exposure20 Exposure;
        
        /// <summary>
        /// Focus configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public FocusConfiguration20 Focus;
        
        /// <summary>
        /// Infrared Cutoff Filter settings.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public IrCutFilterMode IrCutFilter;
        
        /// <summary>
        /// Sharpness of the Video image.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public float Sharpness;
        
        /// <summary>
        /// WDR settings.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public WideDynamicRange20 WideDynamicRange;
        
        /// <summary>
        /// White balance settings.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public WhiteBalance20 WhiteBalance;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public ImagingSettingsExtension20 Extension;
    }
    
    /// <summary>
    /// Type describing whether BLC mode is enabled or disabled (on/off).
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class BacklightCompensation20
    {
        
        /// <summary>
        /// Backlight compensation mode (on/off).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public BacklightCompensationMode Mode;
        
        /// <summary>
        /// Optional level parameter (unit unspecified).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public float Level;
    }
    
    /// <summary>
    /// Type describing the exposure settings.
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Exposure20
    {
        
        /// <summary>
        /// 
        ///				Exposure Mode
        ///				Auto – Enabled the exposure algorithm on the device.Manual – Disabled exposure algorithm on the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ExposureMode Mode;
        
        /// <summary>
        /// 
        ///				The exposure priority mode (low noise/framerate).
        ///				
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ExposurePriority Priority;
        
        /// <summary>
        /// 
        ///				Rectangular exposure mask.
        ///				
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public Rectangle Window;
        
        /// <summary>
        /// 
        ///				Minimum value of exposure time range allowed to be used by the algorithm.
        ///				
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public float MinExposureTime;
        
        /// <summary>
        /// 
        ///				Maximum value of exposure time range allowed to be used by the algorithm.
        ///				
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public float MaxExposureTime;
        
        /// <summary>
        /// 
        ///				Minimum value of the sensor gain range that is allowed to be used by the algorithm.
        ///				
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public float MinGain;
        
        /// <summary>
        /// 
        ///				Maximum value of the sensor gain range that is allowed to be used by the algorithm.
        ///				
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public float MaxGain;
        
        /// <summary>
        /// 
        ///				Minimum value of the iris range allowed to be used by the algorithm.
        ///				
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public float MinIris;
        
        /// <summary>
        /// 
        ///				Maximum value of the iris range allowed to be used by the algorithm.
        ///				
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public float MaxIris;
        
        /// <summary>
        /// 
        ///				The fixed exposure time used by the image sensor (μs).
        ///				
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public float ExposureTime;
        
        /// <summary>
        /// 
        ///				The fixed gain used by the image sensor (dB).
        ///				
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public float Gain;
        
        /// <summary>
        /// 
        ///				The fixed attenuation of input light affected by the iris (dB). 0dB maps to a fully opened iris.
        ///				
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public float Iris;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class FocusConfiguration20
    {
        
        /// <summary>
        /// 
        ///			Mode of auto fucus.
        ///			AUTOMANUAL
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AutoFocusMode AutoFocusMode;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public float DefaultSpeed;
        
        /// <summary>
        /// Parameter to set autofocus near limit (unit: meter).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public float NearLimit;
        
        /// <summary>
        /// Parameter to set autofocus far limit (unit: meter).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public float FarLimit;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public FocusConfiguration20Extension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class FocusConfiguration20Extension
    {
    }
    
    /// <summary>
    /// Type describing whether WDR mode is enabled or disabled (on/off).
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class WideDynamicRange20
    {
        
        /// <summary>
        /// Wide dynamic range mode (on/off).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public WideDynamicMode Mode;
        
        /// <summary>
        /// Optional level parameter (unit unspecified).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public float Level;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class WhiteBalance20
    {
        
        /// <summary>
        /// 
        ///				'AUTO' or 'MANUAL'
        ///				
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public WhiteBalanceMode Mode;
        
        /// <summary>
        /// 
        ///				Rgain (unitless).
        ///				
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public float CrGain;
        
        /// <summary>
        /// 
        ///				Bgain (unitless).
        ///				
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public float CbGain;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public WhiteBalance20Extension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class WhiteBalance20Extension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class ImagingSettingsExtension20
    {
        
        /// <summary>
        /// Optional element to configure Image Stabilization feature.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ImageStabilization ImageStabilization;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ImagingSettingsExtension202 Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class ImageStabilization
    {
        
        /// <summary>
        /// Parameter to enable/disable Image Stabilization feature.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ImageStabilizationMode Mode;
        
        /// <summary>
        /// Optional level parameter (unit unspecified)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public float Level;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ImageStabilizationExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum ImageStabilizationMode
    {
        
        OFF,
        
        ON,
        
        AUTO,
        
        Extended,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class ImageStabilizationExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class ImagingSettingsExtension202
    {
        
        /// <summary>
        /// An optional parameter applied to only auto mode to adjust timing of toggling Ir cut filter.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public IrCutFilterAutoAdjustment[] IrCutFilterAutoAdjustment;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ImagingSettingsExtension203 Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class IrCutFilterAutoAdjustment
    {
        
        /// <summary>
        /// Specifies which boundaries to automatically toggle Ir cut filter following parameters are applied to. Its options shall be chosen from tt:IrCutFilterAutoBoundaryType.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string BoundaryType;
        
        /// <summary>
        /// Adjusts boundary exposure level for toggling Ir cut filter to on/off specified with unitless normalized value from +1.0 to -1.0. Zero is default and -1.0 is the darkest adjustment (Unitless).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public float BoundaryOffset;
        
        /// <summary>
        /// Delay time of toggling Ir cut filter to on/off after crossing of the boundary exposure levels.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string ResponseTime;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public IrCutFilterAutoAdjustmentExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class IrCutFilterAutoAdjustmentExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class ImagingSettingsExtension203
    {
        
        /// <summary>
        /// Optional element to configure Image Contrast Compensation.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ToneCompensation ToneCompensation;
        
        /// <summary>
        /// Optional element to configure Image Defogging.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public Defogging Defogging;
        
        /// <summary>
        /// Optional element to configure Image Noise Reduction.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public NoiseReduction NoiseReduction;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public ImagingSettingsExtension204 Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class ToneCompensation
    {
        
        /// <summary>
        /// Parameter to enable/disable or automatic ToneCompensation feature.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Mode;
        
        /// <summary>
        /// Optional level parameter specified with unitless normalized value from 0.0 to +1.0.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public float Level;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ToneCompensationExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class ToneCompensationExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Defogging
    {
        
        /// <summary>
        /// Parameter to enable/disable or automatic Defogging feature.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Mode;
        
        /// <summary>
        /// Optional level parameter specified with unitless normalized value from 0.0 to +1.0.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public float Level;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public DefoggingExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class DefoggingExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NoiseReduction
    {
        
        /// <summary>
        /// Level parameter specified with unitless normalized value from 0.0 to +1.0. Level=0 means no noise reduction or minimal noise reduction.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public float Level;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class ImagingSettingsExtension204
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class VideoSourceExtension2
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioSourcesRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioSourcesResponse
    {
        
        /// <summary>
        /// List of existing Audio Sources
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioSource[] AudioSources;
    }
    
    /// <summary>
    /// Representation of a physical audio input.
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class AudioSource : DeviceEntity
    {
        
        /// <summary>
        /// number of available audio channels. (1: mono, 2: stereo) 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Channels;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioOutputsRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioOutputsResponse
    {
        
        /// <summary>
        /// List of existing Audio Outputs
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioOutput[] AudioOutputs;
    }
    
    /// <summary>
    /// Representation of a physical audio outputs.
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class AudioOutput : DeviceEntity
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class CreateProfileRequest
    {
        
        /// <summary>
        /// friendly name of the profile to be created
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name;
        
        /// <summary>
        /// Optional token, specifying the unique identifier of the new profile. A device supports at least a token length of 12 characters and characters "A-Z" | "a-z" | "0-9" | "-.".
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Token;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class CreateProfileResponse
    {
        
        /// <summary>
        /// returns the new created profile
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Profile Profile;
    }
    
    /// <summary>
    /// 
    ///			A media profile consists of a set of media configurations. Media profiles are used by a client
    ///			to configure properties of a media stream from an NVT.
    ///			An NVT shall provide at least one media profile at boot. An NVT should provide “ready to use”
    ///			profiles for the most common media configurations that the device offers.
    ///			A profile consists of a set of interconnected configuration entities. Configurations are provided
    ///			by the NVT and can be either static or created dynamically by the NVT. For example, the
    ///			dynamic configurations can be created by the NVT depending on current available encoding
    ///			resources.
    ///		
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Profile
    {
        
        /// <summary>
        /// Unique identifier of the profile.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string token;
        
        /// <summary>
        /// A value of true signals that the profile cannot be deleted. Default is false.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool @fixed;
        
        /// <summary>
        /// User readable name of the profile.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name;
        
        /// <summary>
        /// Optional configuration of the Video input.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public VideoSourceConfiguration VideoSourceConfiguration;
        
        /// <summary>
        /// Optional configuration of the Audio input.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public AudioSourceConfiguration AudioSourceConfiguration;
        
        /// <summary>
        /// Optional configuration of the Video encoder.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public VideoEncoderConfiguration VideoEncoderConfiguration;
        
        /// <summary>
        /// Optional configuration of the Audio encoder.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public AudioEncoderConfiguration AudioEncoderConfiguration;
        
        /// <summary>
        /// Optional configuration of the video analytics module and rule engine.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public VideoAnalyticsConfiguration VideoAnalyticsConfiguration;
        
        /// <summary>
        /// Optional configuration of the pan tilt zoom unit.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public PTZConfiguration PTZConfiguration;
        
        /// <summary>
        /// Optional configuration of the metadata stream.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public MetadataConfiguration MetadataConfiguration;
        
        /// <summary>
        /// Extensions defined in ONVIF 2.0
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public ProfileExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class VideoSourceConfiguration : ConfigurationEntity
    {
        
        /// <summary>
        /// Reference to the physical input.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string SourceToken;
        
        /// <summary>
        /// Rectangle specifying the Video capturing area. The capturing area shall not be larger than the whole Video source area.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public IntRectangle Bounds;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public VideoSourceConfigurationExtension Extension;
    }
    
    /// <summary>
    /// Base type defining the common properties of a configuration.
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class ConfigurationEntity
    {
        
        /// <summary>
        /// Token that uniquely refernces this configuration. Length up to 64 characters.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string token;
        
        /// <summary>
        /// User readable name. Length up to 64 characters.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name;
        
        /// <summary>
        /// Number of internal references currently using this configuration. This parameter is read-only and cannot be changed by a set request. For example the value increases if the configuration is added to a media profile or attached to a PaneConfiguration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int UseCount;
    }
    
    /// <summary>
    /// Rectangle defined by lower left corner position and size. Units are pixel.
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class IntRectangle
    {
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int x;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int y;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int width;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int height;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class VideoSourceConfigurationExtension
    {
        
        /// <summary>
        /// Optional element to configure rotation of captured image.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Rotate Rotate;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public VideoSourceConfigurationExtension2 Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Rotate
    {
        
        /// <summary>
        /// Parameter to enable/disable Rotation feature.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public RotateMode Mode;
        
        /// <summary>
        /// Optional parameter to configure how much degree of clockwise rotation of image  for On mode. Omitting this parameter for On mode means 180 degree rotation.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int Degree;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public RotateExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum RotateMode
    {
        
        OFF,
        
        ON,
        
        AUTO,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class RotateExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class VideoSourceConfigurationExtension2
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class AudioSourceConfiguration : ConfigurationEntity
    {
        
        /// <summary>
        /// Token of the Audio Source the configuration applies to
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string SourceToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class VideoEncoderConfiguration : ConfigurationEntity
    {
        
        /// <summary>
        /// Used video codec, either Jpeg, H.264 or Mpeg4
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VideoEncoding Encoding;
        
        /// <summary>
        /// Configured video resolution
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public VideoResolution Resolution;
        
        /// <summary>
        /// Relative value for the video quantizers and the quality of the video. A high value within supported quality range means higher quality
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public float Quality;
        
        /// <summary>
        /// Optional element to configure rate control related parameters.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public VideoRateControl RateControl;
        
        /// <summary>
        /// Optional element to configure Mpeg4 related parameters.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public Mpeg4Configuration MPEG4;
        
        /// <summary>
        /// Optional element to configure H.264 related parameters.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public H264Configuration H264;
        
        /// <summary>
        /// Defines the multicast settings that could be used for video streaming.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public MulticastConfiguration Multicast;
        
        /// <summary>
        /// The rtsp session timeout for the related video stream
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string SessionTimeout;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum VideoEncoding
    {
        
        JPEG,
        
        MPEG4,
        
        H264,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class VideoRateControl
    {
        
        /// <summary>
        /// Maximum output framerate in fps. If an EncodingInterval is provided the resulting encoded framerate will be reduced by the given factor.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int FrameRateLimit;
        
        /// <summary>
        /// Interval at which images are encoded and transmitted. (A value of 1 means that every frame is encoded, a value of 2 means that every 2nd frame is encoded ...)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int EncodingInterval;
        
        /// <summary>
        /// the maximum output bitrate in kbps
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int BitrateLimit;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Mpeg4Configuration
    {
        
        /// <summary>
        /// Determines the interval in which the I-Frames will be coded. An entry of 1 indicates I-Frames are continuously generated. An entry of 2 indicates that every 2nd image is an I-Frame, and 3 only every 3rd frame, etc. The frames in between are coded as P or B Frames.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int GovLength;
        
        /// <summary>
        /// the Mpeg4 profile, either simple profile (SP) or advanced simple profile (ASP)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public Mpeg4Profile Mpeg4Profile;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum Mpeg4Profile
    {
        
        SP,
        
        ASP,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class H264Configuration
    {
        
        /// <summary>
        /// Group of Video frames length. Determines typically the interval in which the I-Frames will be coded. An entry of 1 indicates I-Frames are continuously generated. An entry of 2 indicates that every 2nd image is an I-Frame, and 3 only every 3rd frame, etc. The frames in between are coded as P or B Frames.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int GovLength;
        
        /// <summary>
        /// the H.264 profile, either baseline, main, extended or high
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public H264Profile H264Profile;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum H264Profile
    {
        
        Baseline,
        
        Main,
        
        Extended,
        
        High,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class MulticastConfiguration
    {
        
        /// <summary>
        /// The multicast address (if this address is set to 0 no multicast streaming is enaled)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public IPAddress Address;
        
        /// <summary>
        /// The RTP mutlicast destination port. A device may support RTCP. In this case the port value shall be even to allow the corresponding RTCP stream to be mapped to the next higher (odd) destination port number as defined in the RTSP specification.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int Port;
        
        /// <summary>
        /// In case of IPv6 the TTL value is assumed as the hop limit. Note that for IPV6 and administratively scoped IPv4 multicast the primary use for hop limit / TTL is to prevent packets from (endlessly) circulating and not limiting scope. In these cases the address contains the scope.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int TTL;
        
        /// <summary>
        /// Read only property signalling that streaming is persistant. Use the methods StartMulticastStreaming and StopMulticastStreaming to switch its state.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public bool AutoStart;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class IPAddress
    {
        
        /// <summary>
        /// Indicates if the address is an IPv4 or IPv6 address.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public IPType Type;
        
        /// <summary>
        /// IPv4 address.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string IPv4Address;
        
        /// <summary>
        /// IPv6 address
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string IPv6Address;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum IPType
    {
        
        IPv4,
        
        IPv6,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class AudioEncoderConfiguration : ConfigurationEntity
    {
        
        /// <summary>
        /// Audio codec used for encoding the audio input (either G.711, G.726 or AAC)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioEncoding Encoding;
        
        /// <summary>
        /// The output bitrate in kbps.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int Bitrate;
        
        /// <summary>
        /// The output sample rate in kHz.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int SampleRate;
        
        /// <summary>
        /// Defines the multicast settings that could be used for video streaming.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public MulticastConfiguration Multicast;
        
        /// <summary>
        /// The rtsp session timeout for the related audio stream
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string SessionTimeout;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum AudioEncoding
    {
        
        G711,
        
        G726,
        
        AAC,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class VideoAnalyticsConfiguration : ConfigurationEntity
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AnalyticsEngineConfiguration AnalyticsEngineConfiguration;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public RuleEngineConfiguration RuleEngineConfiguration;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class AnalyticsEngineConfiguration
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Config[] AnalyticsModule;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public AnalyticsEngineConfigurationExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Config
    {
        
        /// <summary>
        /// Name of the configuration.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name;
        
        /// <summary>
        /// Type of the configuration represented by a unique QName. The Type characterizes a ConfigDescription defining the Parameters.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public System.Xml.XmlQualifiedName Type;
        
        /// <summary>
        /// List of configuration parameters as defined in the correspding description.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ItemList Parameters;
    }
    
    /// <summary>
    /// 
    ///			List of parameters according to the corresponding ItemListDescription.
    ///			Each item in the list shall have a unique name.
    ///		
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class ItemList
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ItemListExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class ItemListExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class AnalyticsEngineConfigurationExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class RuleEngineConfiguration
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Config[] Rule;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public RuleEngineConfigurationExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class RuleEngineConfigurationExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZConfiguration : ConfigurationEntity
    {
        
        /// <summary>
        /// 
        ///                A mandatory reference to the PTZ Node that the PTZ Configuration belongs to.
        ///              
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string NodeToken;
        
        /// <summary>
        /// 
        ///                If the PTZ Node supports absolute Pan/Tilt movements, it shall specify one Absolute Pan/Tilt Position Space as default.
        ///              
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string DefaultAbsolutePantTiltPositionSpace;
        
        /// <summary>
        /// 
        ///                If the PTZ Node supports absolute zoom movements, it shall specify one Absolute Zoom Position Space as default.
        ///              
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string DefaultAbsoluteZoomPositionSpace;
        
        /// <summary>
        /// 
        ///                If the PTZ Node supports relative Pan/Tilt movements, it shall specify one RelativePan/Tilt Translation Space as default.
        ///              
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string DefaultRelativePanTiltTranslationSpace;
        
        /// <summary>
        /// 
        ///                If the PTZ Node supports relative zoom movements, it shall specify one Relative Zoom Translation Space as default.
        ///              
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string DefaultRelativeZoomTranslationSpace;
        
        /// <summary>
        /// 
        ///                If the PTZ Node supports continuous Pan/Tilt movements, it shall specify one Continuous Pan/Tilt Velocity Space as default.
        ///              
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string DefaultContinuousPanTiltVelocitySpace;
        
        /// <summary>
        /// 
        ///                If the PTZ Node supports continuous zoom movements, it shall specify one Continuous Zoom Velocity Space as default.
        ///              
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string DefaultContinuousZoomVelocitySpace;
        
        /// <summary>
        /// 
        ///                If the PTZ Node supports absolute or relative PTZ movements, it shall specify corresponding default Pan/Tilt and Zoom speeds.
        ///              
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public PTZSpeed DefaultPTZSpeed;
        
        /// <summary>
        /// 
        ///                If the PTZ Node supports continuous movements, it shall specify a default timeout, after which the movement stops.
        ///              
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string DefaultPTZTimeout;
        
        /// <summary>
        /// 
        ///                The Pan/Tilt limits element should be present for a PTZ Node that supports an absolute Pan/Tilt. If the element is present it signals the support for configurable Pan/Tilt limits. If limits are enabled, the Pan/Tilt movements shall always stay within the specified range. The Pan/Tilt limits are disabled by setting the limits to –INF or +INF.
        ///              
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public PanTiltLimits PanTiltLimits;
        
        /// <summary>
        /// 
        ///                The Zoom limits element should be present for a PTZ Node that supports absolute zoom. If the element is present it signals the supports for configurable Zoom limits. If limits are enabled the zoom movements shall always stay within the specified range. The Zoom limits are disabled by settings the limits to -INF and +INF.
        ///              
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public ZoomLimits ZoomLimits;
        
        /// <summary>
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public PTZConfigurationExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZSpeed
    {
        
        /// <summary>
        /// Pan and tilt speed. The x component corresponds to pan and the y component to tilt. If omitted in a request, the current (if any) PanTilt movement should not be affected. 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Vector2D PanTilt;
        
        /// <summary>
        /// 
        ///            A zoom speed. If omitted in a request, the current (if any) Zoom movement should not be affected.
        ///          
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public Vector1D Zoom;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Vector2D
    {
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float x;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float y;
        
        /// <summary>
        /// 
        ///  				Pan/tilt coordinate space selector. The following options are defined: http://www.onvif.org/ver10/tptz/PanTiltSpaces/PositionGenericSpace http://www.onvif.org/ver10/tptz/PanTiltSpaces/TranslationGenericSpace http://www.onvif.org/ver10/tptz/PanTiltSpaces/VelocityGenericSpace http://www.onvif.org/ver10/tptz/PanTiltSpaces/GenericSpeedSpace
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string space;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Vector1D
    {
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float x;
        
        /// <summary>
        /// 
        ///  				Pan/tilt coordinate space selector. The following options are defined: http://www.onvif.org/ver10/tptz/PanTiltSpaces/PositionGenericSpace http://www.onvif.org/ver10/tptz/PanTiltSpaces/TranslationGenericSpace http://www.onvif.org/ver10/tptz/PanTiltSpaces/VelocityGenericSpace http://www.onvif.org/ver10/tptz/PanTiltSpaces/GenericSpeedSpace
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string space;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PanTiltLimits
    {
        
        /// <summary>
        /// 
        ///            A range of pan tilt limits.
        ///          
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Space2DDescription Range;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Space2DDescription
    {
        
        /// <summary>
        /// 
        ///            A URI of coordinate systems.
        ///          
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string URI;
        
        /// <summary>
        /// 
        ///            A range of x-axis.
        ///          
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public FloatRange XRange;
        
        /// <summary>
        /// 
        ///            A range of y-axis.
        ///          
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public FloatRange YRange;
    }
    
    /// <summary>
    /// Range of values greater equal Min value and less equal Max value.
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class FloatRange
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public float Min;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public float Max;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class ZoomLimits
    {
        
        /// <summary>
        /// 
        ///            A range of zoom limit
        ///          
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Space1DDescription Range;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Space1DDescription
    {
        
        /// <summary>
        /// 
        ///            A URI of coordinate systems.
        ///          
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string URI;
        
        /// <summary>
        /// 
        ///            A range of x-axis.
        ///          
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public FloatRange XRange;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZConfigurationExtension
    {
        
        /// <summary>
        /// Optional element to configure PT Control Direction related features.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PTControlDirection PTControlDirection;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public PTZConfigurationExtension2 Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTControlDirection
    {
        
        /// <summary>
        /// Optional element to configure related parameters for E-Flip.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public EFlip EFlip;
        
        /// <summary>
        /// Optional element to configure related parameters for reversing of PT Control Direction.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public Reverse Reverse;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public PTControlDirectionExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class EFlip
    {
        
        /// <summary>
        /// Parameter to enable/disable E-Flip feature.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public EFlipMode Mode;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum EFlipMode
    {
        
        OFF,
        
        ON,
        
        Extended,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Reverse
    {
        
        /// <summary>
        /// Parameter to enable/disable Reverse feature.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ReverseMode Mode;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum ReverseMode
    {
        
        OFF,
        
        ON,
        
        AUTO,
        
        Extended,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTControlDirectionExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZConfigurationExtension2
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class MetadataConfiguration : ConfigurationEntity
    {
        
        /// <summary>
        /// optional element to configure which PTZ related data is to include in the metadata stream
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PTZFilter PTZStatus;
        
        /// <summary>
        /// Optional element to configure the streaming of events. A client might be interested in receiving all, 
        ///								none or some of the events produced by the device:To get all events: Include the Events element but do not include a filter.To get no events: Do not include the Events element.To get only some events: Include the Events element and include a filter in the element.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public EventSubscription Events;
        
        /// <summary>
        /// Defines whether the streamed metadata will include metadata from the analytics engines (video, cell motion, audio etc.)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool Analytics;
        
        /// <summary>
        /// Defines the multicast settings that could be used for video streaming.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public MulticastConfiguration Multicast;
        
        /// <summary>
        /// The rtsp session timeout for the related audio stream
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string SessionTimeout;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public AnalyticsEngineConfiguration AnalyticsEngineConfiguration;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public MetadataConfigurationExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZFilter
    {
        
        /// <summary>
        /// True if the metadata stream shall contain the PTZ status (IDLE, MOVING or UNKNOWN)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool Status;
        
        /// <summary>
        /// True if the metadata stream shall contain the PTZ position
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool Position;
    }
    
    /// <summary>
    /// Subcription handling in the same way as base notification subscription.
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class EventSubscription
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public FilterType Filter;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://docs.oasis-open.org/wsn/b-2")]
    public class FilterType
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class MetadataConfigurationExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class ProfileExtension
    {
        
        /// <summary>
        /// Optional configuration of the Audio output.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioOutputConfiguration AudioOutputConfiguration;
        
        /// <summary>
        /// Optional configuration of the Audio decoder.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public AudioDecoderConfiguration AudioDecoderConfiguration;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ProfileExtension2 Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class AudioOutputConfiguration : ConfigurationEntity
    {
        
        /// <summary>
        /// Token of the phsycial Audio output.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string OutputToken;
        
        /// <summary>
        /// 
        ///						An audio channel MAY support different types of audio transmission. While for full duplex
        ///						operation no special handling is required, in half duplex operation the transmission direction
        ///						needs to be switched.
        ///						The optional SendPrimacy parameter inside the AudioOutputConfiguration indicates which
        ///						direction is currently active. An NVC can switch between different modes by setting the
        ///						AudioOutputConfiguration.
        ///						The following modes for the Send-Primacy are defined:www.onvif.org/ver20/HalfDuplex/Server
        ///						The server is allowed to send audio data to the client. The client shall not send
        ///						audio data via the backchannel to the NVT in this mode.www.onvif.org/ver20/HalfDuplex/Client
        ///						The client is allowed to send audio data via the backchannel to the server. The
        ///						NVT shall not send audio data to the client in this mode.www.onvif.org/ver20/HalfDuplex/Auto
        ///							It is up to the device how to deal with sending and receiving audio data.
        ///						Acoustic echo cancellation is out of ONVIF scope.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string SendPrimacy;
        
        /// <summary>
        /// Volume setting of the output. The applicable range is defined via the option AudioOutputOptions.OutputLevelRange.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int OutputLevel;
    }
    
    /// <summary>
    /// The Audio Decoder Configuration does not contain any that parameter to configure the
    ///decoding .A decoder shall decode every data it receives (according to its capabilities).
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class AudioDecoderConfiguration : ConfigurationEntity
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class ProfileExtension2
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetProfileRequest
    {
        
        /// <summary>
        /// this command requests a specific profile
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetProfileResponse
    {
        
        /// <summary>
        /// returns the requested media profile
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Profile Profile;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetProfilesRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetProfilesResponse
    {
        
        /// <summary>
        /// lists all profiles that exist in the media service 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Profile[] Profiles;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class AddVideoEncoderConfigurationRequest
    {
        
        /// <summary>
        /// Reference to the profile where the configuration should be added
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        /// <summary>
        /// Contains a reference to the VideoEncoderConfiguration to add
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class AddVideoEncoderConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class RemoveVideoEncoderConfigurationRequest
    {
        
        /// <summary>
        /// Contains a reference to the media profile from which the
        ///VideoEncoderConfiguration shall be removed.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class RemoveVideoEncoderConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class AddVideoSourceConfigurationRequest
    {
        
        /// <summary>
        /// Reference to the profile where the configuration should be added
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        /// <summary>
        /// Contains a reference to the VideoSourceConfiguration to add
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class AddVideoSourceConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class RemoveVideoSourceConfigurationRequest
    {
        
        /// <summary>
        /// Contains a reference to the media profile from which the
        ///VideoSourceConfiguration shall be removed.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class RemoveVideoSourceConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class AddAudioEncoderConfigurationRequest
    {
        
        /// <summary>
        /// Reference to the profile where the configuration should be added
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        /// <summary>
        /// Contains a reference to the AudioEncoderConfiguration to add
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class AddAudioEncoderConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class RemoveAudioEncoderConfigurationRequest
    {
        
        /// <summary>
        /// Contains a reference to the media profile from which the
        ///AudioEncoderConfiguration shall be removed.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class RemoveAudioEncoderConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class AddAudioSourceConfigurationRequest
    {
        
        /// <summary>
        /// Reference to the profile where the configuration should be added
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        /// <summary>
        /// Contains a reference to the AudioSourceConfiguration to add
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class AddAudioSourceConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class RemoveAudioSourceConfigurationRequest
    {
        
        /// <summary>
        /// Contains a reference to the media profile from which the
        ///AudioSourceConfiguration shall be removed.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class RemoveAudioSourceConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class AddPTZConfigurationRequest
    {
        
        /// <summary>
        /// Reference to the profile where the configuration should be added
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        /// <summary>
        /// Contains a reference to the PTZConfiguration to add
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class AddPTZConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class RemovePTZConfigurationRequest
    {
        
        /// <summary>
        /// Contains a reference to the media profile from which the
        ///PTZConfiguration shall be removed.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class RemovePTZConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class AddVideoAnalyticsConfigurationRequest
    {
        
        /// <summary>
        /// Reference to the profile where the configuration should be added
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        /// <summary>
        /// Contains a reference to the VideoAnalyticsConfiguration to add
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class AddVideoAnalyticsConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class RemoveVideoAnalyticsConfigurationRequest
    {
        
        /// <summary>
        /// Contains a reference to the media profile from which the
        ///VideoAnalyticsConfiguration shall be removed.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class RemoveVideoAnalyticsConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class AddMetadataConfigurationRequest
    {
        
        /// <summary>
        /// Reference to the profile where the configuration should be added
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        /// <summary>
        /// Contains a reference to the MetadataConfiguration to add
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class AddMetadataConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class RemoveMetadataConfigurationRequest
    {
        
        /// <summary>
        /// Contains a reference to the media profile from which the
        ///MetadataConfiguration shall be removed.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class RemoveMetadataConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class AddAudioOutputConfigurationRequest
    {
        
        /// <summary>
        /// Reference to the profile where the configuration should be added
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        /// <summary>
        /// Contains a reference to the AudioOutputConfiguration to add
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class AddAudioOutputConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class RemoveAudioOutputConfigurationRequest
    {
        
        /// <summary>
        /// Contains a reference to the media profile from which the
        ///AudioOutputConfiguration shall be removed.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class RemoveAudioOutputConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class AddAudioDecoderConfigurationRequest
    {
        
        /// <summary>
        /// This element contains a reference to the profile where the configuration should be added.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        /// <summary>
        /// This element contains a reference to the AudioDecoderConfiguration to add.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class AddAudioDecoderConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class RemoveAudioDecoderConfigurationRequest
    {
        
        /// <summary>
        /// This element contains a  reference to the media profile from which the AudioDecoderConfiguration shall be removed.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class RemoveAudioDecoderConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class DeleteProfileRequest
    {
        
        /// <summary>
        /// This element contains a  reference to the profile that should be deleted.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class DeleteProfileResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetVideoSourceConfigurationsRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetVideoSourceConfigurationsResponse
    {
        
        /// <summary>
        /// This element contains a list of video source configurations.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VideoSourceConfiguration[] Configurations;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetVideoEncoderConfigurationsRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetVideoEncoderConfigurationsResponse
    {
        
        /// <summary>
        /// This element contains a list of video encoder configurations.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VideoEncoderConfiguration[] Configurations;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioSourceConfigurationsRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioSourceConfigurationsResponse
    {
        
        /// <summary>
        /// This element contains a list of audio source configurations.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioSourceConfiguration[] Configurations;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioEncoderConfigurationsRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioEncoderConfigurationsResponse
    {
        
        /// <summary>
        /// This element contains a list of audio encoder configurations.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioEncoderConfiguration[] Configurations;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetVideoAnalyticsConfigurationsRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetVideoAnalyticsConfigurationsResponse
    {
        
        /// <summary>
        /// This element contains a list of VideoAnalytics configurations.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VideoAnalyticsConfiguration[] Configurations;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetMetadataConfigurationsRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetMetadataConfigurationsResponse
    {
        
        /// <summary>
        /// This element contains a list of metadata configurations
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public MetadataConfiguration[] Configurations;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioOutputConfigurationsRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioOutputConfigurationsResponse
    {
        
        /// <summary>
        /// This element contains a list of audio output configurations
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioOutputConfiguration[] Configurations;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioDecoderConfigurationsRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioDecoderConfigurationsResponse
    {
        
        /// <summary>
        /// This element contains a list of audio decoder configurations
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioDecoderConfiguration[] Configurations;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetVideoSourceConfigurationRequest
    {
        
        /// <summary>
        /// Token of the requested video source configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetVideoSourceConfigurationResponse
    {
        
        /// <summary>
        /// The requested video source configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VideoSourceConfiguration Configuration;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetVideoEncoderConfigurationRequest
    {
        
        /// <summary>
        /// Token of the requested video encoder configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetVideoEncoderConfigurationResponse
    {
        
        /// <summary>
        /// The requested video encoder configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VideoEncoderConfiguration Configuration;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioSourceConfigurationRequest
    {
        
        /// <summary>
        /// Token of the requested audio source configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioSourceConfigurationResponse
    {
        
        /// <summary>
        /// The requested audio source configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioSourceConfiguration Configuration;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioEncoderConfigurationRequest
    {
        
        /// <summary>
        /// Token of the requested audio encoder configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioEncoderConfigurationResponse
    {
        
        /// <summary>
        /// The requested audio encoder configuration
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioEncoderConfiguration Configuration;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetVideoAnalyticsConfigurationRequest
    {
        
        /// <summary>
        /// Token of the requested video analytics configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetVideoAnalyticsConfigurationResponse
    {
        
        /// <summary>
        /// The requested video analytics configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VideoAnalyticsConfiguration Configuration;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetMetadataConfigurationRequest
    {
        
        /// <summary>
        /// Token of the requested metadata configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetMetadataConfigurationResponse
    {
        
        /// <summary>
        /// The requested metadata configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public MetadataConfiguration Configuration;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioOutputConfigurationRequest
    {
        
        /// <summary>
        /// Token of the requested audio output configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioOutputConfigurationResponse
    {
        
        /// <summary>
        /// The requested audio output configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioOutputConfiguration Configuration;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioDecoderConfigurationRequest
    {
        
        /// <summary>
        /// Token of the requested audio decoder configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioDecoderConfigurationResponse
    {
        
        /// <summary>
        /// The requested audio decoder configuration
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioDecoderConfiguration Configuration;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetCompatibleVideoEncoderConfigurationsRequest
    {
        
        /// <summary>
        /// Contains the token of an existing media profile the configurations shall be compatible with.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetCompatibleVideoEncoderConfigurationsResponse
    {
        
        /// <summary>
        /// Contains a list of video encoder configurations that are compatible with the specified media profile.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VideoEncoderConfiguration[] Configurations;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetCompatibleVideoSourceConfigurationsRequest
    {
        
        /// <summary>
        /// Contains the token of an existing media profile the configurations shall be compatible with.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetCompatibleVideoSourceConfigurationsResponse
    {
        
        /// <summary>
        /// Contains a list of video source configurations that are compatible with the specified media profile.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VideoSourceConfiguration[] Configurations;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetCompatibleAudioEncoderConfigurationsRequest
    {
        
        /// <summary>
        /// Contains the token of an existing media profile the configurations shall be compatible with.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetCompatibleAudioEncoderConfigurationsResponse
    {
        
        /// <summary>
        /// Contains a list of audio encoder configurations that are compatible with the specified media profile.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioEncoderConfiguration[] Configurations;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetCompatibleAudioSourceConfigurationsRequest
    {
        
        /// <summary>
        /// Contains the token of an existing media profile the configurations shall be compatible with.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetCompatibleAudioSourceConfigurationsResponse
    {
        
        /// <summary>
        /// Contains a list of audio source configurations that are compatible with the specified media profile.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioSourceConfiguration[] Configurations;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetCompatibleVideoAnalyticsConfigurationsRequest
    {
        
        /// <summary>
        /// Contains the token of an existing media profile the configurations shall be compatible with.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetCompatibleVideoAnalyticsConfigurationsResponse
    {
        
        /// <summary>
        /// Contains a list of video analytics configurations that are compatible with the specified media profile.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VideoAnalyticsConfiguration[] Configurations;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetCompatibleMetadataConfigurationsRequest
    {
        
        /// <summary>
        /// Contains the token of an existing media profile the configurations shall be compatible with.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetCompatibleMetadataConfigurationsResponse
    {
        
        /// <summary>
        /// Contains a list of metadata configurations that are compatible with the specified media profile.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public MetadataConfiguration[] Configurations;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetCompatibleAudioOutputConfigurationsRequest
    {
        
        /// <summary>
        /// Contains the token of an existing media profile the configurations shall be compatible with.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetCompatibleAudioOutputConfigurationsResponse
    {
        
        /// <summary>
        /// Contains a list of audio output configurations that are compatible with the specified media profile.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioOutputConfiguration[] Configurations;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetCompatibleAudioDecoderConfigurationsRequest
    {
        
        /// <summary>
        /// Contains the token of an existing media profile the configurations shall be compatible with.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetCompatibleAudioDecoderConfigurationsResponse
    {
        
        /// <summary>
        /// Contains a list of audio decoder configurations that are compatible with the specified media profile. 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioDecoderConfiguration[] Configurations;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetVideoSourceConfigurationRequest
    {
        
        /// <summary>
        /// Contains the modified video source configuration. The configuration shall exist in the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VideoSourceConfiguration Configuration;
        
        /// <summary>
        /// The ForcePersistence element is obsolete and should always be assumed to be true.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool ForcePersistence;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetVideoSourceConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetVideoEncoderConfigurationRequest
    {
        
        /// <summary>
        /// Contains the modified video encoder configuration. The configuration shall exist in the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VideoEncoderConfiguration Configuration;
        
        /// <summary>
        /// The ForcePersistence element is obsolete and should always be assumed to be true.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool ForcePersistence;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetVideoEncoderConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetAudioSourceConfigurationRequest
    {
        
        /// <summary>
        /// Contains the modified audio source configuration. The configuration shall exist in the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioSourceConfiguration Configuration;
        
        /// <summary>
        /// The ForcePersistence element is obsolete and should always be assumed to be true.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool ForcePersistence;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetAudioSourceConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetAudioEncoderConfigurationRequest
    {
        
        /// <summary>
        /// Contains the modified audio encoder configuration. The configuration shall exist in the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioEncoderConfiguration Configuration;
        
        /// <summary>
        /// The ForcePersistence element is obsolete and should always be assumed to be true.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool ForcePersistence;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetAudioEncoderConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetVideoAnalyticsConfigurationRequest
    {
        
        /// <summary>
        /// Contains the modified video analytics configuration. The configuration shall exist in the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VideoAnalyticsConfiguration Configuration;
        
        /// <summary>
        /// The ForcePersistence element is obsolete and should always be assumed to be true.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool ForcePersistence;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetVideoAnalyticsConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetMetadataConfigurationRequest
    {
        
        /// <summary>
        /// Contains the modified metadata configuration. The configuration shall exist in the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public MetadataConfiguration Configuration;
        
        /// <summary>
        /// The ForcePersistence element is obsolete and should always be assumed to be true.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool ForcePersistence;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetMetadataConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetAudioOutputConfigurationRequest
    {
        
        /// <summary>
        /// Contains the modified audio output configuration. The configuration shall exist in the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioOutputConfiguration Configuration;
        
        /// <summary>
        /// The ForcePersistence element is obsolete and should always be assumed to be true.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool ForcePersistence;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetAudioOutputConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetAudioDecoderConfigurationRequest
    {
        
        /// <summary>
        /// Contains the modified audio decoder configuration. The configuration shall exist in the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioDecoderConfiguration Configuration;
        
        /// <summary>
        /// The ForcePersistence element is obsolete and should always be assumed to be true.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool ForcePersistence;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetAudioDecoderConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetVideoSourceConfigurationOptionsRequest
    {
        
        /// <summary>
        /// Optional video source configurationToken that specifies an existing configuration that the options are intended for.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConfigurationToken;
        
        /// <summary>
        /// Optional ProfileToken that specifies an existing media profile that the options shall be compatible with.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetVideoSourceConfigurationOptionsResponse
    {
        
        /// <summary>
        /// This message contains the video source configuration options. If a video source configuration is specified, the options shall concern that particular configuration. If a media profile is specified, the options shall be compatible with that media profile. If no tokens are specified, the options shall be considered generic for the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VideoSourceConfigurationOptions Options;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class VideoSourceConfigurationOptions
    {
        
        /// <summary>
        /// Supported range for the capturing area.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public IntRectangleRange BoundsRange;
        
        /// <summary>
        /// List of physical inputs.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string VideoSourceTokensAvailable;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public VideoSourceConfigurationOptionsExtension Extension;
    }
    
    /// <summary>
    /// Range of a rectangle. The rectangle itself is defined by lower left corner position and size. Units are pixel.
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class IntRectangleRange
    {
        
        /// <summary>
        /// Range of X-axis.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public IntRange XRange;
        
        /// <summary>
        /// Range of Y-axis.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public IntRange YRange;
        
        /// <summary>
        /// Range of width.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public IntRange WidthRange;
        
        /// <summary>
        /// Range of height.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public IntRange HeightRange;
    }
    
    /// <summary>
    /// Range of values greater equal Min value and less equal Max value.
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class IntRange
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Min;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int Max;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class VideoSourceConfigurationOptionsExtension
    {
        
        /// <summary>
        /// Options of parameters for Rotation feature.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public RotateOptions Rotate;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public VideoSourceConfigurationOptionsExtension2 Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class RotateOptions
    {
        
        /// <summary>
        /// Supported options of Rotate mode parameter.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public RotateMode Mode;
        
        /// <summary>
        /// List of supported degree value for rotation.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public IntList DegreeList;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public RotateOptionsExtension Extension;
    }
    
    /// <summary>
    /// List of values.
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class IntList
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int[] Items;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class RotateOptionsExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class VideoSourceConfigurationOptionsExtension2
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetVideoEncoderConfigurationOptionsRequest
    {
        
        /// <summary>
        /// Optional video encoder configuration token that specifies an existing configuration that the options are intended for.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConfigurationToken;
        
        /// <summary>
        /// Optional ProfileToken that specifies an existing media profile that the options shall be compatible with.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetVideoEncoderConfigurationOptionsResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VideoEncoderConfigurationOptions Options;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class VideoEncoderConfigurationOptions
    {
        
        /// <summary>
        /// Range of the quality values. A high value means higher quality.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public IntRange QualityRange;
        
        /// <summary>
        /// Optional JPEG encoder settings ranges (See also Extension element).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public JpegOptions JPEG;
        
        /// <summary>
        /// Optional MPEG-4 encoder settings ranges (See also Extension element).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public Mpeg4Options MPEG4;
        
        /// <summary>
        /// Optional H.264 encoder settings ranges (See also Extension element).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public H264Options H264;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public VideoEncoderOptionsExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class JpegOptions
    {
        
        /// <summary>
        /// List of supported image sizes.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VideoResolution ResolutionsAvailable;
        
        /// <summary>
        /// Supported frame rate in fps (frames per second).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public IntRange FrameRateRange;
        
        /// <summary>
        /// Supported encoding interval range. The encoding interval corresponds to the number of frames devided by the encoded frames. An encoding interval value of "1" means that all frames are encoded.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public IntRange EncodingIntervalRange;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Mpeg4Options
    {
        
        /// <summary>
        /// List of supported image sizes.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VideoResolution ResolutionsAvailable;
        
        /// <summary>
        /// Supported group of Video frames length. This value typically corresponds to the I-Frame distance.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public IntRange GovLengthRange;
        
        /// <summary>
        /// Supported frame rate in fps (frames per second).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public IntRange FrameRateRange;
        
        /// <summary>
        /// Supported encoding interval range. The encoding interval corresponds to the number of frames devided by the encoded frames. An encoding interval value of "1" means that all frames are encoded.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public IntRange EncodingIntervalRange;
        
        /// <summary>
        /// List of supported MPEG-4 profiles.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public Mpeg4Profile Mpeg4ProfilesSupported;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class H264Options
    {
        
        /// <summary>
        /// List of supported image sizes.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VideoResolution ResolutionsAvailable;
        
        /// <summary>
        /// Supported group of Video frames length. This value typically corresponds to the I-Frame distance.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public IntRange GovLengthRange;
        
        /// <summary>
        /// Supported frame rate in fps (frames per second).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public IntRange FrameRateRange;
        
        /// <summary>
        /// Supported encoding interval range. The encoding interval corresponds to the number of frames devided by the encoded frames. An encoding interval value of "1" means that all frames are encoded.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public IntRange EncodingIntervalRange;
        
        /// <summary>
        /// List of supported H.264 profiles.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public H264Profile H264ProfilesSupported;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class VideoEncoderOptionsExtension
    {
        
        /// <summary>
        /// Optional JPEG encoder settings ranges.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public JpegOptions2 JPEG;
        
        /// <summary>
        /// Optional MPEG-4 encoder settings ranges.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public Mpeg4Options2 MPEG4;
        
        /// <summary>
        /// Optional H.264 encoder settings ranges.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public H264Options2 H264;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public VideoEncoderOptionsExtension2 Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class JpegOptions2 : JpegOptions
    {
        
        /// <summary>
        /// Supported range of encoded bitrate in kbps.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public IntRange BitrateRange;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Mpeg4Options2 : Mpeg4Options
    {
        
        /// <summary>
        /// Supported range of encoded bitrate in kbps.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public IntRange BitrateRange;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class H264Options2 : H264Options
    {
        
        /// <summary>
        /// Supported range of encoded bitrate in kbps.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public IntRange BitrateRange;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class VideoEncoderOptionsExtension2
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioSourceConfigurationOptionsRequest
    {
        
        /// <summary>
        /// Optional audio source configuration token that specifies an existing configuration that the options are intended for.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConfigurationToken;
        
        /// <summary>
        /// Optional ProfileToken that specifies an existing media profile that the options shall be compatible with.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioSourceConfigurationOptionsResponse
    {
        
        /// <summary>
        /// This message contains the audio source configuration options. If a audio source configuration is specified, the options shall concern that particular configuration. If a media profile is specified, the options shall be compatible with that media profile. If no tokens are specified, the options shall be considered generic for the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioSourceConfigurationOptions Options;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class AudioSourceConfigurationOptions
    {
        
        /// <summary>
        /// Tokens of the audio source the configuration can be used for.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string InputTokensAvailable;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public AudioSourceOptionsExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class AudioSourceOptionsExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioEncoderConfigurationOptionsRequest
    {
        
        /// <summary>
        /// Optional audio encoder configuration token that specifies an existing configuration that the options are intended for.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConfigurationToken;
        
        /// <summary>
        /// Optional ProfileToken that specifies an existing media profile that the options shall be compatible with.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioEncoderConfigurationOptionsResponse
    {
        
        /// <summary>
        /// This message contains the audio encoder configuration options. If a audio encoder configuration is specified, the options shall concern that particular configuration. If a media profile is specified, the options shall be compatible with that media profile. If no tokens are specified, the options shall be considered generic for the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioEncoderConfigurationOptions Options;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class AudioEncoderConfigurationOptions
    {
        
        /// <summary>
        /// list of supported AudioEncoderConfigurations
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioEncoderConfigurationOption[] Options;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class AudioEncoderConfigurationOption
    {
        
        /// <summary>
        /// The enoding used for audio data (either G.711, G.726 or AAC)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioEncoding Encoding;
        
        /// <summary>
        /// List of supported bitrates in kbps for the specified Encoding
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public IntList BitrateList;
        
        /// <summary>
        /// List of supported Sample Rates in kHz for the specified Encoding
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public IntList SampleRateList;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetMetadataConfigurationOptionsRequest
    {
        
        /// <summary>
        /// Optional metadata configuration token that specifies an existing configuration that the options are intended for.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConfigurationToken;
        
        /// <summary>
        /// Optional ProfileToken that specifies an existing media profile that the options shall be compatible with.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetMetadataConfigurationOptionsResponse
    {
        
        /// <summary>
        /// This message contains the metadata configuration options. If a metadata configuration is specified, the options shall concern that particular configuration. If a media profile is specified, the options shall be compatible with that media profile. If no tokens are specified, the options shall be considered generic for the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public MetadataConfigurationOptions Options;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class MetadataConfigurationOptions
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PTZStatusFilterOptions PTZStatusFilterOptions;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public MetadataConfigurationOptionsExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZStatusFilterOptions
    {
        
        /// <summary>
        /// True if the device is able to stream pan or tilt status information.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool PanTiltStatusSupported;
        
        /// <summary>
        /// True if the device is able to stream zoom status inforamtion.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool ZoomStatusSupported;
        
        /// <summary>
        /// True if the device is able to stream the pan or tilt position.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool PanTiltPositionSupported;
        
        /// <summary>
        /// True if the device is able to stream zoom position information.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public bool ZoomPositionSupported;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public PTZStatusFilterOptionsExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZStatusFilterOptionsExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class MetadataConfigurationOptionsExtension
    {
        
        /// <summary>
        /// List of supported metadata compression type. Its options shall be chosen from tt:MetadataCompressionType.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string[] CompressionType;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public MetadataConfigurationOptionsExtension2 Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class MetadataConfigurationOptionsExtension2
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioOutputConfigurationOptionsRequest
    {
        
        /// <summary>
        /// Optional audio output configuration token that specifies an existing configuration that the options are intended for.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConfigurationToken;
        
        /// <summary>
        /// Optional ProfileToken that specifies an existing media profile that the options shall be compatible with.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioOutputConfigurationOptionsResponse
    {
        
        /// <summary>
        /// This message contains the audio output configuration options. If a audio output configuration is specified, the options shall concern that particular configuration. If a media profile is specified, the options shall be compatible with that media profile. If no tokens are specified, the options shall be considered generic for the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioOutputConfigurationOptions Options;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class AudioOutputConfigurationOptions
    {
        
        /// <summary>
        /// Tokens of the physical Audio outputs (typically one).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string OutputTokensAvailable;
        
        /// <summary>
        /// 
        ///				An audio channel MAY support different types of audio transmission. While for full duplex
        ///				operation no special handling is required, in half duplex operation the transmission direction
        ///				needs to be switched.
        ///				The optional SendPrimacy parameter inside the AudioOutputConfiguration indicates which
        ///				direction is currently active. An NVC can switch between different modes by setting the
        ///				AudioOutputConfiguration.
        ///				The following modes for the Send-Primacy are defined:www.onvif.org/ver20/HalfDuplex/Server
        ///						The server is allowed to send audio data to the client. The client shall not send
        ///						audio data via the backchannel to the NVT in this mode.www.onvif.org/ver20/HalfDuplex/Client
        ///						The client is allowed to send audio data via the backchannel to the server. The
        ///						NVT shall not send audio data to the client in this mode.www.onvif.org/ver20/HalfDuplex/Auto
        ///						It is up to the device how to deal with sending and receiving audio data.
        ///				Acoustic echo cancellation is out of ONVIF scope.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string[] SendPrimacyOptions;
        
        /// <summary>
        /// Minimum and maximum level range supported for this Output.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public IntRange OutputLevelRange;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioDecoderConfigurationOptionsRequest
    {
        
        /// <summary>
        /// Optional audio decoder configuration token that specifies an existing configuration that the options are intended for.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConfigurationToken;
        
        /// <summary>
        /// Optional ProfileToken that specifies an existing media profile that the options shall be compatible with.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioDecoderConfigurationOptionsResponse
    {
        
        /// <summary>
        /// This message contains the audio decoder configuration options. If a audio decoder configuration is specified, the options shall concern that particular configuration. If a media profile is specified, the options shall be compatible with that media profile. If no tokens are specified, the options shall be considered generic for the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioDecoderConfigurationOptions Options;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class AudioDecoderConfigurationOptions
    {
        
        /// <summary>
        /// If the device is able to decode AAC encoded audio this section describes the supported configurations
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AACDecOptions AACDecOptions;
        
        /// <summary>
        /// If the device is able to decode G711 encoded audio this section describes the supported configurations
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public G711DecOptions G711DecOptions;
        
        /// <summary>
        /// If the device is able to decode G726 encoded audio this section describes the supported configurations
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public G726DecOptions G726DecOptions;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public AudioDecoderConfigurationOptionsExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class AACDecOptions
    {
        
        /// <summary>
        /// List of supported bitrates in kbps
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public IntList Bitrate;
        
        /// <summary>
        /// List of supported sample rates in kHz
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public IntList SampleRateRange;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class G711DecOptions
    {
        
        /// <summary>
        /// List of supported bitrates in kbps
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public IntList Bitrate;
        
        /// <summary>
        /// List of supported sample rates in kHz
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public IntList SampleRateRange;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class G726DecOptions
    {
        
        /// <summary>
        /// List of supported bitrates in kbps
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public IntList Bitrate;
        
        /// <summary>
        /// List of supported sample rates in kHz
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public IntList SampleRateRange;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class AudioDecoderConfigurationOptionsExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetGuaranteedNumberOfVideoEncoderInstancesRequest
    {
        
        /// <summary>
        /// Token of the video source configuration
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetGuaranteedNumberOfVideoEncoderInstancesResponse
    {
        
        /// <summary>
        /// The minimum guaranteed total number of encoder instances (applications) per VideoSourceConfiguration. The device is able to deliver the TotalNumber of streams
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int TotalNumber;
        
        /// <summary>
        /// If a device limits the number of instances for respective Video Codecs the response contains the information how many Jpeg streams can be set up at the same time per VideoSource.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int JPEG;
        
        /// <summary>
        /// If a device limits the number of instances for respective Video Codecs the response contains the information how many H264 streams can be set up at the same time per VideoSource.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int H264;
        
        /// <summary>
        /// If a device limits the number of instances for respective Video Codecs the response contains the information how many Mpeg4 streams can be set up at the same time per VideoSource.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public int MPEG4;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetStreamUriRequest
    {
        
        /// <summary>
        /// Stream Setup that should be used with the uri
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public StreamSetup StreamSetup;
        
        /// <summary>
        /// The ProfileToken element indicates the media profile to use and will define the configuration of the content of the stream.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class StreamSetup
    {
        
        /// <summary>
        /// Defines if a multicast or unicast stream is requested
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public StreamType Stream;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public Transport Transport;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum StreamType
    {
        
        RTPUnicast,
        
        RTPMulticast,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Transport
    {
        
        /// <summary>
        /// Defines the network protocol for streaming, either UDP=RTP/UDP, RTSP=RTP/RTSP/TCP or HTTP=RTP/RTSP/HTTP/TCP 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public TransportProtocol Protocol;
        
        /// <summary>
        /// Optional element to describe further tunnel options. This element is normally not needed 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public Transport Tunnel;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum TransportProtocol
    {
        
        UDP,
        
        TCP,
        
        RTSP,
        
        HTTP,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetStreamUriResponse
    {
        
        /// <summary>
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public MediaUri MediaUri;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class MediaUri
    {
        
        /// <summary>
        /// Stable Uri to be used for requesting the media stream
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Uri;
        
        /// <summary>
        /// Indicates if the Uri is only valid until the connection is established. The value shall be set to "false".
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool InvalidAfterConnect;
        
        /// <summary>
        /// Indicates if the Uri is invalid after a reboot of the device. The value shall be set to "false".
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool InvalidAfterReboot;
        
        /// <summary>
        /// Duration how long the Uri is valid. This parameter shall be set to PT0S to indicate that this stream URI is indefinitely valid even if the profile changes
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Timeout;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class StartMulticastStreamingRequest
    {
        
        /// <summary>
        /// Contains the token of the Profile that is used to define the multicast stream.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class StartMulticastStreamingResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class StopMulticastStreamingRequest
    {
        
        /// <summary>
        /// Contains the token of the Profile that is used to define the multicast stream.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class StopMulticastStreamingResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetSynchronizationPointRequest
    {
        
        /// <summary>
        /// Contains a Profile reference for which a Synchronization Point is requested.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetSynchronizationPointResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetSnapshotUriRequest
    {
        
        /// <summary>
        /// The ProfileToken element indicates the media profile to use and will define the source and dimensions of the snapshot.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetSnapshotUriResponse
    {
        
        /// <summary>
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public MediaUri MediaUri;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetVideoSourceModesRequest
    {
        
        /// <summary>
        /// Contains a video source reference for which a video source mode is requested.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string VideoSourceToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetVideoSourceModesResponse
    {
        
        /// <summary>
        /// Return the information for specified video source mode.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VideoSourceMode VideoSourceModes;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class VideoSourceMode
    {
        
        /// <summary>
        /// Indicate token for video source mode.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string token;
        
        /// <summary>
        /// Indication of whether this mode is active. If active this value is true. In case of non-indication, it means as false. The value of true shall be had by only one video source mode.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool Enabled;
        
        /// <summary>
        /// Max frame rate in frames per second for this video source mode.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public float MaxFramerate;
        
        /// <summary>
        /// Max horizontal and vertical resolution for this video source mode.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public VideoResolution MaxResolution;
        
        /// <summary>
        /// Indication which encodings are supported for this video source. The list may contain one or more enumeration values of tt:VideoEncoding.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string[] Encodings;
        
        /// <summary>
        /// After setting the mode if a device starts to reboot this value is true. If a device change the mode without rebooting this value is false. If true, configured parameters may not be guaranteed by the device after rebooting.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public bool Reboot;
        
        /// <summary>
        /// Informative description of this video source mode. This field should be described in English.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Description;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public VideoSourceModeExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class VideoSourceModeExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetVideoSourceModeRequest
    {
        
        /// <summary>
        /// Contains a video source reference for which a video source mode is requested.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string VideoSourceToken;
        
        /// <summary>
        /// Indicate video source mode.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string VideoSourceModeToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetVideoSourceModeResponse
    {
        
        /// <summary>
        /// The response contains information about rebooting after returning response. When Reboot is set true, a device will reboot automatically after setting mode.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool Reboot;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetOSDsRequest
    {
        
        /// <summary>
        /// Token of the Video Source Configuration, which has OSDs associated with are requested. If token not exist, request all available OSDs.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetOSDsResponse
    {
        
        /// <summary>
        /// This element contains a list of requested OSDs.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public OSDConfiguration[] OSDs;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class OSDConfiguration : DeviceEntity
    {
        
        /// <summary>
        /// Reference to the video source configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public OSDReference VideoSourceConfigurationToken;
        
        /// <summary>
        /// Type of OSD.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public OSDType Type;
        
        /// <summary>
        /// Position configuration of OSD.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public OSDPosConfiguration Position;
        
        /// <summary>
        /// Text configuration of OSD. It shall be present when the value of Type field is Text.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public OSDTextConfiguration TextString;
        
        /// <summary>
        /// Image configuration of OSD. It shall be present when the value of Type field is Image
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public OSDImgConfiguration Image;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public OSDConfigurationExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class OSDReference
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum OSDType
    {
        
        Text,
        
        Image,
        
        Extended,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class OSDPosConfiguration
    {
        
        /// <summary>
        /// For OSD position type, following are the pre-defined: UpperLeftUpperRightLowerLeftLowerRightCustom
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Type;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public Vector Pos;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public OSDPosConfigurationExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Vector
    {
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float x;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float y;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class OSDPosConfigurationExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class OSDTextConfiguration
    {
        
        /// <summary>
        /// 
        ///						The following OSD Text Type are defined:Plain - The Plain type means the OSD is shown as a text string which defined in the "PlainText" item.Date - The Date type means the OSD is shown as a date, format of which should be present in the "DateFormat" item.Time - The Time type means the OSD is shown as a time, format of which should be present in the "TimeFormat" item.DateAndTime - The DateAndTime type means the OSD is shown as date and time, format of which should be present in the "DateFormat" and the "TimeFormat" item.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Type;
        
        /// <summary>
        /// 
        ///						List of supported OSD date formats. This element shall be present when the value of Type field has Date or DateAndTime. The following DateFormat are defined:M/d/yyyy - e.g. 3/6/2013MM/dd/yyyy - e.g. 03/06/2013dd/MM/yyyy - e.g. 06/03/2013yyyy/MM/dd - e.g. 2013/03/06yyyy-MM-dd - e.g. 2013-06-03dddd, MMMM dd, yyyy - e.g. Wednesday, March 06, 2013MMMM dd, yyyy - e.g. March 06, 2013dd MMMM, yyyy - e.g. 06 March, 2013
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string DateFormat;
        
        /// <summary>
        /// 
        ///						List of supported OSD time formats. This element shall be present when the value of Type field has Time or DateAndTime. The following TimeFormat are defined:h:mm:ss tt - e.g. 2:14:21 PMhh:mm:ss tt - e.g. 02:14:21 PMH:mm:ss - e.g. 14:14:21HH:mm:ss - e.g. 14:14:21
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string TimeFormat;
        
        /// <summary>
        /// Font size of the text in pt.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public int FontSize;
        
        /// <summary>
        /// Font color of the text.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public OSDColor FontColor;
        
        /// <summary>
        /// Background color of the text.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public OSDColor BackgroundColor;
        
        /// <summary>
        /// The content of text to be displayed.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string PlainText;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public OSDTextConfigurationExtension Extension;
    }
    
    /// <summary>
    /// The value range of "Transparent" could be defined by vendors only should follow this rule: the minimum value means non-transparent and the maximum value maens fully transparent.
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class OSDColor
    {
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Transparent;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Color Color;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Color
    {
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float X;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float Y;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float Z;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Colorspace;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class OSDTextConfigurationExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class OSDImgConfiguration
    {
        
        /// <summary>
        /// The URI of the image which to be displayed.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ImgPath;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public OSDImgConfigurationExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class OSDImgConfigurationExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class OSDConfigurationExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetOSDRequest
    {
        
        /// <summary>
        /// The GetOSD command fetches the OSD configuration if the OSD token is known.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string OSDToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetOSDResponse
    {
        
        /// <summary>
        /// The requested OSD configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public OSDConfiguration OSD;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetOSDOptionsRequest
    {
        
        /// <summary>
        /// Video Source Configuration Token that specifies an existing video source configuration that the options shall be compatible with.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetOSDOptionsResponse
    {
        
        /// <summary>
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public OSDConfigurationOptions OSDOptions;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class OSDConfigurationOptions
    {
        
        /// <summary>
        /// The maximum number of OSD configurations supported for the specificate video source configuration. If a device limits the number of instances by OSDType, it should indicate the supported number via the related attribute.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public MaximumNumberOfOSDs MaximumNumberOfOSDs;
        
        /// <summary>
        /// List supported type of OSD configuration. When a device indicates the supported number for each types in MaximumNumberOfOSDs, related type shall be presented. A device shall return Option element relating to listed type.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public OSDType Type;
        
        /// <summary>
        /// List available OSD position type. Following are the pre-defined:UpperLeftUpperRightLowerLeftLowerRightCustom
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string PositionOption;
        
        /// <summary>
        /// Option of the OSD text configuration. This element shall be returned if the device is signaling the support for Text.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public OSDTextOptions TextOption;
        
        /// <summary>
        /// Option of the OSD image configuration. This element shall be returned if the device is signaling the support for Image.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public OSDImgOptions ImageOption;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public OSDConfigurationOptionsExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class MaximumNumberOfOSDs
    {
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Total;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Image;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int PlainText;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Date;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Time;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int DateAndTime;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class OSDTextOptions
    {
        
        /// <summary>
        /// List of supported OSD text type. When a device indicates the supported number relating to Text type in MaximumNumberOfOSDs, the type shall be presented.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Type;
        
        /// <summary>
        /// Range of the font size value.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public IntRange FontSizeRange;
        
        /// <summary>
        /// List of supported date format.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string[] DateFormat;
        
        /// <summary>
        /// List of supported time format.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string[] TimeFormat;
        
        /// <summary>
        /// List of supported font color.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public OSDColorOptions FontColor;
        
        /// <summary>
        /// List of supported background color.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public OSDColorOptions BackgroundColor;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public OSDTextOptionsExtension Extension;
    }
    
    /// <summary>
    /// Describe the option of the color and its transparency.
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class OSDColorOptions
    {
        
        /// <summary>
        /// Optional list of supported colors.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ColorOptions Color;
        
        /// <summary>
        /// Range of the transparent level. Larger means more tranparent.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public IntRange Transparent;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public OSDColorOptionsExtension Extension;
    }
    
    /// <summary>
    /// Describe the option of the color supported. Either list each color or define the range of color value. The following values are acceptable for Colourspace attribute.http://www.onvif.org/ver10/colorspace/YCbCr - YCbCr colourspacehttp://www.onvif.org/ver10/colorspace/CIELUV - CIE LUVhttp://www.onvif.org/ver10/colorspace/CIELAB - CIE 1976 (L*a*b*)http://www.onvif.org/ver10/colorspace/HSV - HSV colourspace
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class ColorOptions
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class OSDColorOptionsExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class OSDTextOptionsExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class OSDImgOptions
    {
        
        /// <summary>
        /// List of avaiable uris of image.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ImagePath;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public OSDImgOptionsExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class OSDImgOptionsExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class OSDConfigurationOptionsExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetOSDRequest
    {
        
        /// <summary>
        /// Contains the modified OSD configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public OSDConfiguration OSD;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetOSDResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class CreateOSDRequest
    {
        
        /// <summary>
        /// Contain the initial OSD configuration for create.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public OSDConfiguration OSD;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class CreateOSDResponse
    {
        
        /// <summary>
        /// Returns Token of the newly created OSD
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string OSDToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class DeleteOSDRequest
    {
        
        /// <summary>
        /// This element contains a reference to the OSD configuration that should be deleted.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string OSDToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class DeleteOSDResponse
    {
    }
}
