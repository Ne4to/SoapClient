//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNs5
{
    
    
    public interface Media
    {
        
        System.Threading.Tasks.Task<GetServiceCapabilitiesResponse> GetServiceCapabilities(GetServiceCapabilities request);
        
        System.Threading.Tasks.Task<GetVideoSourcesResponse> GetVideoSources(GetVideoSources request);
        
        System.Threading.Tasks.Task<GetAudioSourcesResponse> GetAudioSources(GetAudioSources request);
        
        System.Threading.Tasks.Task<GetAudioOutputsResponse> GetAudioOutputs(GetAudioOutputs request);
        
        System.Threading.Tasks.Task<CreateProfileResponse> CreateProfile(CreateProfile request);
        
        System.Threading.Tasks.Task<GetProfileResponse> GetProfile(GetProfile request);
        
        System.Threading.Tasks.Task<GetProfilesResponse> GetProfiles(GetProfiles request);
        
        System.Threading.Tasks.Task<AddVideoEncoderConfigurationResponse> AddVideoEncoderConfiguration(AddVideoEncoderConfiguration request);
        
        System.Threading.Tasks.Task<RemoveVideoEncoderConfigurationResponse> RemoveVideoEncoderConfiguration(RemoveVideoEncoderConfiguration request);
        
        System.Threading.Tasks.Task<AddVideoSourceConfigurationResponse> AddVideoSourceConfiguration(AddVideoSourceConfiguration request);
        
        System.Threading.Tasks.Task<RemoveVideoSourceConfigurationResponse> RemoveVideoSourceConfiguration(RemoveVideoSourceConfiguration request);
        
        System.Threading.Tasks.Task<AddAudioEncoderConfigurationResponse> AddAudioEncoderConfiguration(AddAudioEncoderConfiguration request);
        
        System.Threading.Tasks.Task<RemoveAudioEncoderConfigurationResponse> RemoveAudioEncoderConfiguration(RemoveAudioEncoderConfiguration request);
        
        System.Threading.Tasks.Task<AddAudioSourceConfigurationResponse> AddAudioSourceConfiguration(AddAudioSourceConfiguration request);
        
        System.Threading.Tasks.Task<RemoveAudioSourceConfigurationResponse> RemoveAudioSourceConfiguration(RemoveAudioSourceConfiguration request);
        
        System.Threading.Tasks.Task<AddPTZConfigurationResponse> AddPTZConfiguration(AddPTZConfiguration request);
        
        System.Threading.Tasks.Task<RemovePTZConfigurationResponse> RemovePTZConfiguration(RemovePTZConfiguration request);
        
        System.Threading.Tasks.Task<AddVideoAnalyticsConfigurationResponse> AddVideoAnalyticsConfiguration(AddVideoAnalyticsConfiguration request);
        
        System.Threading.Tasks.Task<RemoveVideoAnalyticsConfigurationResponse> RemoveVideoAnalyticsConfiguration(RemoveVideoAnalyticsConfiguration request);
        
        System.Threading.Tasks.Task<AddMetadataConfigurationResponse> AddMetadataConfiguration(AddMetadataConfiguration request);
        
        System.Threading.Tasks.Task<RemoveMetadataConfigurationResponse> RemoveMetadataConfiguration(RemoveMetadataConfiguration request);
        
        System.Threading.Tasks.Task<AddAudioOutputConfigurationResponse> AddAudioOutputConfiguration(AddAudioOutputConfiguration request);
        
        System.Threading.Tasks.Task<RemoveAudioOutputConfigurationResponse> RemoveAudioOutputConfiguration(RemoveAudioOutputConfiguration request);
        
        System.Threading.Tasks.Task<AddAudioDecoderConfigurationResponse> AddAudioDecoderConfiguration(AddAudioDecoderConfiguration request);
        
        System.Threading.Tasks.Task<RemoveAudioDecoderConfigurationResponse> RemoveAudioDecoderConfiguration(RemoveAudioDecoderConfiguration request);
        
        System.Threading.Tasks.Task<DeleteProfileResponse> DeleteProfile(DeleteProfile request);
        
        System.Threading.Tasks.Task<GetVideoSourceConfigurationsResponse> GetVideoSourceConfigurations(GetVideoSourceConfigurations request);
        
        System.Threading.Tasks.Task<GetVideoEncoderConfigurationsResponse> GetVideoEncoderConfigurations(GetVideoEncoderConfigurations request);
        
        System.Threading.Tasks.Task<GetAudioSourceConfigurationsResponse> GetAudioSourceConfigurations(GetAudioSourceConfigurations request);
        
        System.Threading.Tasks.Task<GetAudioEncoderConfigurationsResponse> GetAudioEncoderConfigurations(GetAudioEncoderConfigurations request);
        
        System.Threading.Tasks.Task<GetVideoAnalyticsConfigurationsResponse> GetVideoAnalyticsConfigurations(GetVideoAnalyticsConfigurations request);
        
        System.Threading.Tasks.Task<GetMetadataConfigurationsResponse> GetMetadataConfigurations(GetMetadataConfigurations request);
        
        System.Threading.Tasks.Task<GetAudioOutputConfigurationsResponse> GetAudioOutputConfigurations(GetAudioOutputConfigurations request);
        
        System.Threading.Tasks.Task<GetAudioDecoderConfigurationsResponse> GetAudioDecoderConfigurations(GetAudioDecoderConfigurations request);
        
        System.Threading.Tasks.Task<GetVideoSourceConfigurationResponse> GetVideoSourceConfiguration(GetVideoSourceConfiguration request);
        
        System.Threading.Tasks.Task<GetVideoEncoderConfigurationResponse> GetVideoEncoderConfiguration(GetVideoEncoderConfiguration request);
        
        System.Threading.Tasks.Task<GetAudioSourceConfigurationResponse> GetAudioSourceConfiguration(GetAudioSourceConfiguration request);
        
        System.Threading.Tasks.Task<GetAudioEncoderConfigurationResponse> GetAudioEncoderConfiguration(GetAudioEncoderConfiguration request);
        
        System.Threading.Tasks.Task<GetVideoAnalyticsConfigurationResponse> GetVideoAnalyticsConfiguration(GetVideoAnalyticsConfiguration request);
        
        System.Threading.Tasks.Task<GetMetadataConfigurationResponse> GetMetadataConfiguration(GetMetadataConfiguration request);
        
        System.Threading.Tasks.Task<GetAudioOutputConfigurationResponse> GetAudioOutputConfiguration(GetAudioOutputConfiguration request);
        
        System.Threading.Tasks.Task<GetAudioDecoderConfigurationResponse> GetAudioDecoderConfiguration(GetAudioDecoderConfiguration request);
        
        System.Threading.Tasks.Task<GetCompatibleVideoEncoderConfigurationsResponse> GetCompatibleVideoEncoderConfigurations(GetCompatibleVideoEncoderConfigurations request);
        
        System.Threading.Tasks.Task<GetCompatibleVideoSourceConfigurationsResponse> GetCompatibleVideoSourceConfigurations(GetCompatibleVideoSourceConfigurations request);
        
        System.Threading.Tasks.Task<GetCompatibleAudioEncoderConfigurationsResponse> GetCompatibleAudioEncoderConfigurations(GetCompatibleAudioEncoderConfigurations request);
        
        System.Threading.Tasks.Task<GetCompatibleAudioSourceConfigurationsResponse> GetCompatibleAudioSourceConfigurations(GetCompatibleAudioSourceConfigurations request);
        
        System.Threading.Tasks.Task<GetCompatibleVideoAnalyticsConfigurationsResponse> GetCompatibleVideoAnalyticsConfigurations(GetCompatibleVideoAnalyticsConfigurations request);
        
        System.Threading.Tasks.Task<GetCompatibleMetadataConfigurationsResponse> GetCompatibleMetadataConfigurations(GetCompatibleMetadataConfigurations request);
        
        System.Threading.Tasks.Task<GetCompatibleAudioOutputConfigurationsResponse> GetCompatibleAudioOutputConfigurations(GetCompatibleAudioOutputConfigurations request);
        
        System.Threading.Tasks.Task<GetCompatibleAudioDecoderConfigurationsResponse> GetCompatibleAudioDecoderConfigurations(GetCompatibleAudioDecoderConfigurations request);
        
        System.Threading.Tasks.Task<SetVideoSourceConfigurationResponse> SetVideoSourceConfiguration(SetVideoSourceConfiguration request);
        
        System.Threading.Tasks.Task<SetVideoEncoderConfigurationResponse> SetVideoEncoderConfiguration(SetVideoEncoderConfiguration request);
        
        System.Threading.Tasks.Task<SetAudioSourceConfigurationResponse> SetAudioSourceConfiguration(SetAudioSourceConfiguration request);
        
        System.Threading.Tasks.Task<SetAudioEncoderConfigurationResponse> SetAudioEncoderConfiguration(SetAudioEncoderConfiguration request);
        
        System.Threading.Tasks.Task<SetVideoAnalyticsConfigurationResponse> SetVideoAnalyticsConfiguration(SetVideoAnalyticsConfiguration request);
        
        System.Threading.Tasks.Task<SetMetadataConfigurationResponse> SetMetadataConfiguration(SetMetadataConfiguration request);
        
        System.Threading.Tasks.Task<SetAudioOutputConfigurationResponse> SetAudioOutputConfiguration(SetAudioOutputConfiguration request);
        
        System.Threading.Tasks.Task<SetAudioDecoderConfigurationResponse> SetAudioDecoderConfiguration(SetAudioDecoderConfiguration request);
        
        System.Threading.Tasks.Task<GetVideoSourceConfigurationOptionsResponse> GetVideoSourceConfigurationOptions(GetVideoSourceConfigurationOptions request);
        
        System.Threading.Tasks.Task<GetVideoEncoderConfigurationOptionsResponse> GetVideoEncoderConfigurationOptions(GetVideoEncoderConfigurationOptions request);
        
        System.Threading.Tasks.Task<GetAudioSourceConfigurationOptionsResponse> GetAudioSourceConfigurationOptions(GetAudioSourceConfigurationOptions request);
        
        System.Threading.Tasks.Task<GetAudioEncoderConfigurationOptionsResponse> GetAudioEncoderConfigurationOptions(GetAudioEncoderConfigurationOptions request);
        
        System.Threading.Tasks.Task<GetMetadataConfigurationOptionsResponse> GetMetadataConfigurationOptions(GetMetadataConfigurationOptions request);
        
        System.Threading.Tasks.Task<GetAudioOutputConfigurationOptionsResponse> GetAudioOutputConfigurationOptions(GetAudioOutputConfigurationOptions request);
        
        System.Threading.Tasks.Task<GetAudioDecoderConfigurationOptionsResponse> GetAudioDecoderConfigurationOptions(GetAudioDecoderConfigurationOptions request);
        
        System.Threading.Tasks.Task<GetGuaranteedNumberOfVideoEncoderInstancesResponse> GetGuaranteedNumberOfVideoEncoderInstances(GetGuaranteedNumberOfVideoEncoderInstances request);
        
        System.Threading.Tasks.Task<GetStreamUriResponse> GetStreamUri(GetStreamUri request);
        
        System.Threading.Tasks.Task<StartMulticastStreamingResponse> StartMulticastStreaming(StartMulticastStreaming request);
        
        System.Threading.Tasks.Task<StopMulticastStreamingResponse> StopMulticastStreaming(StopMulticastStreaming request);
        
        System.Threading.Tasks.Task<SetSynchronizationPointResponse> SetSynchronizationPoint(SetSynchronizationPoint request);
        
        System.Threading.Tasks.Task<GetSnapshotUriResponse> GetSnapshotUri(GetSnapshotUri request);
        
        System.Threading.Tasks.Task<GetVideoSourceModesResponse> GetVideoSourceModes(GetVideoSourceModes request);
        
        System.Threading.Tasks.Task<SetVideoSourceModeResponse> SetVideoSourceMode(SetVideoSourceMode request);
        
        System.Threading.Tasks.Task<GetOSDsResponse> GetOSDs(GetOSDs request);
        
        System.Threading.Tasks.Task<GetOSDResponse> GetOSD(GetOSD request);
        
        System.Threading.Tasks.Task<GetOSDOptionsResponse> GetOSDOptions(GetOSDOptions request);
        
        System.Threading.Tasks.Task<SetOSDResponse> SetOSD(SetOSD request);
        
        System.Threading.Tasks.Task<CreateOSDResponse> CreateOSD(CreateOSD request);
        
        System.Threading.Tasks.Task<DeleteOSDResponse> DeleteOSD(DeleteOSD request);
    }
    
    public partial class MediaClient : SoapServices.SoapClientBase, Media
    {
        
        public virtual System.Threading.Tasks.Task<GetServiceCapabilitiesResponse> GetServiceCapabilities(GetServiceCapabilities request)
        {
            return this.CallAsync<GetServiceCapabilities, GetServiceCapabilitiesResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetVideoSourcesResponse> GetVideoSources(GetVideoSources request)
        {
            return this.CallAsync<GetVideoSources, GetVideoSourcesResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetAudioSourcesResponse> GetAudioSources(GetAudioSources request)
        {
            return this.CallAsync<GetAudioSources, GetAudioSourcesResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetAudioOutputsResponse> GetAudioOutputs(GetAudioOutputs request)
        {
            return this.CallAsync<GetAudioOutputs, GetAudioOutputsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<CreateProfileResponse> CreateProfile(CreateProfile request)
        {
            return this.CallAsync<CreateProfile, CreateProfileResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetProfileResponse> GetProfile(GetProfile request)
        {
            return this.CallAsync<GetProfile, GetProfileResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetProfilesResponse> GetProfiles(GetProfiles request)
        {
            return this.CallAsync<GetProfiles, GetProfilesResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<AddVideoEncoderConfigurationResponse> AddVideoEncoderConfiguration(AddVideoEncoderConfiguration request)
        {
            return this.CallAsync<AddVideoEncoderConfiguration, AddVideoEncoderConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<RemoveVideoEncoderConfigurationResponse> RemoveVideoEncoderConfiguration(RemoveVideoEncoderConfiguration request)
        {
            return this.CallAsync<RemoveVideoEncoderConfiguration, RemoveVideoEncoderConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<AddVideoSourceConfigurationResponse> AddVideoSourceConfiguration(AddVideoSourceConfiguration request)
        {
            return this.CallAsync<AddVideoSourceConfiguration, AddVideoSourceConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<RemoveVideoSourceConfigurationResponse> RemoveVideoSourceConfiguration(RemoveVideoSourceConfiguration request)
        {
            return this.CallAsync<RemoveVideoSourceConfiguration, RemoveVideoSourceConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<AddAudioEncoderConfigurationResponse> AddAudioEncoderConfiguration(AddAudioEncoderConfiguration request)
        {
            return this.CallAsync<AddAudioEncoderConfiguration, AddAudioEncoderConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<RemoveAudioEncoderConfigurationResponse> RemoveAudioEncoderConfiguration(RemoveAudioEncoderConfiguration request)
        {
            return this.CallAsync<RemoveAudioEncoderConfiguration, RemoveAudioEncoderConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<AddAudioSourceConfigurationResponse> AddAudioSourceConfiguration(AddAudioSourceConfiguration request)
        {
            return this.CallAsync<AddAudioSourceConfiguration, AddAudioSourceConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<RemoveAudioSourceConfigurationResponse> RemoveAudioSourceConfiguration(RemoveAudioSourceConfiguration request)
        {
            return this.CallAsync<RemoveAudioSourceConfiguration, RemoveAudioSourceConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<AddPTZConfigurationResponse> AddPTZConfiguration(AddPTZConfiguration request)
        {
            return this.CallAsync<AddPTZConfiguration, AddPTZConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<RemovePTZConfigurationResponse> RemovePTZConfiguration(RemovePTZConfiguration request)
        {
            return this.CallAsync<RemovePTZConfiguration, RemovePTZConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<AddVideoAnalyticsConfigurationResponse> AddVideoAnalyticsConfiguration(AddVideoAnalyticsConfiguration request)
        {
            return this.CallAsync<AddVideoAnalyticsConfiguration, AddVideoAnalyticsConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<RemoveVideoAnalyticsConfigurationResponse> RemoveVideoAnalyticsConfiguration(RemoveVideoAnalyticsConfiguration request)
        {
            return this.CallAsync<RemoveVideoAnalyticsConfiguration, RemoveVideoAnalyticsConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<AddMetadataConfigurationResponse> AddMetadataConfiguration(AddMetadataConfiguration request)
        {
            return this.CallAsync<AddMetadataConfiguration, AddMetadataConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<RemoveMetadataConfigurationResponse> RemoveMetadataConfiguration(RemoveMetadataConfiguration request)
        {
            return this.CallAsync<RemoveMetadataConfiguration, RemoveMetadataConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<AddAudioOutputConfigurationResponse> AddAudioOutputConfiguration(AddAudioOutputConfiguration request)
        {
            return this.CallAsync<AddAudioOutputConfiguration, AddAudioOutputConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<RemoveAudioOutputConfigurationResponse> RemoveAudioOutputConfiguration(RemoveAudioOutputConfiguration request)
        {
            return this.CallAsync<RemoveAudioOutputConfiguration, RemoveAudioOutputConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<AddAudioDecoderConfigurationResponse> AddAudioDecoderConfiguration(AddAudioDecoderConfiguration request)
        {
            return this.CallAsync<AddAudioDecoderConfiguration, AddAudioDecoderConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<RemoveAudioDecoderConfigurationResponse> RemoveAudioDecoderConfiguration(RemoveAudioDecoderConfiguration request)
        {
            return this.CallAsync<RemoveAudioDecoderConfiguration, RemoveAudioDecoderConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<DeleteProfileResponse> DeleteProfile(DeleteProfile request)
        {
            return this.CallAsync<DeleteProfile, DeleteProfileResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetVideoSourceConfigurationsResponse> GetVideoSourceConfigurations(GetVideoSourceConfigurations request)
        {
            return this.CallAsync<GetVideoSourceConfigurations, GetVideoSourceConfigurationsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetVideoEncoderConfigurationsResponse> GetVideoEncoderConfigurations(GetVideoEncoderConfigurations request)
        {
            return this.CallAsync<GetVideoEncoderConfigurations, GetVideoEncoderConfigurationsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetAudioSourceConfigurationsResponse> GetAudioSourceConfigurations(GetAudioSourceConfigurations request)
        {
            return this.CallAsync<GetAudioSourceConfigurations, GetAudioSourceConfigurationsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetAudioEncoderConfigurationsResponse> GetAudioEncoderConfigurations(GetAudioEncoderConfigurations request)
        {
            return this.CallAsync<GetAudioEncoderConfigurations, GetAudioEncoderConfigurationsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetVideoAnalyticsConfigurationsResponse> GetVideoAnalyticsConfigurations(GetVideoAnalyticsConfigurations request)
        {
            return this.CallAsync<GetVideoAnalyticsConfigurations, GetVideoAnalyticsConfigurationsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetMetadataConfigurationsResponse> GetMetadataConfigurations(GetMetadataConfigurations request)
        {
            return this.CallAsync<GetMetadataConfigurations, GetMetadataConfigurationsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetAudioOutputConfigurationsResponse> GetAudioOutputConfigurations(GetAudioOutputConfigurations request)
        {
            return this.CallAsync<GetAudioOutputConfigurations, GetAudioOutputConfigurationsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetAudioDecoderConfigurationsResponse> GetAudioDecoderConfigurations(GetAudioDecoderConfigurations request)
        {
            return this.CallAsync<GetAudioDecoderConfigurations, GetAudioDecoderConfigurationsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetVideoSourceConfigurationResponse> GetVideoSourceConfiguration(GetVideoSourceConfiguration request)
        {
            return this.CallAsync<GetVideoSourceConfiguration, GetVideoSourceConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetVideoEncoderConfigurationResponse> GetVideoEncoderConfiguration(GetVideoEncoderConfiguration request)
        {
            return this.CallAsync<GetVideoEncoderConfiguration, GetVideoEncoderConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetAudioSourceConfigurationResponse> GetAudioSourceConfiguration(GetAudioSourceConfiguration request)
        {
            return this.CallAsync<GetAudioSourceConfiguration, GetAudioSourceConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetAudioEncoderConfigurationResponse> GetAudioEncoderConfiguration(GetAudioEncoderConfiguration request)
        {
            return this.CallAsync<GetAudioEncoderConfiguration, GetAudioEncoderConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetVideoAnalyticsConfigurationResponse> GetVideoAnalyticsConfiguration(GetVideoAnalyticsConfiguration request)
        {
            return this.CallAsync<GetVideoAnalyticsConfiguration, GetVideoAnalyticsConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetMetadataConfigurationResponse> GetMetadataConfiguration(GetMetadataConfiguration request)
        {
            return this.CallAsync<GetMetadataConfiguration, GetMetadataConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetAudioOutputConfigurationResponse> GetAudioOutputConfiguration(GetAudioOutputConfiguration request)
        {
            return this.CallAsync<GetAudioOutputConfiguration, GetAudioOutputConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetAudioDecoderConfigurationResponse> GetAudioDecoderConfiguration(GetAudioDecoderConfiguration request)
        {
            return this.CallAsync<GetAudioDecoderConfiguration, GetAudioDecoderConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetCompatibleVideoEncoderConfigurationsResponse> GetCompatibleVideoEncoderConfigurations(GetCompatibleVideoEncoderConfigurations request)
        {
            return this.CallAsync<GetCompatibleVideoEncoderConfigurations, GetCompatibleVideoEncoderConfigurationsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetCompatibleVideoSourceConfigurationsResponse> GetCompatibleVideoSourceConfigurations(GetCompatibleVideoSourceConfigurations request)
        {
            return this.CallAsync<GetCompatibleVideoSourceConfigurations, GetCompatibleVideoSourceConfigurationsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetCompatibleAudioEncoderConfigurationsResponse> GetCompatibleAudioEncoderConfigurations(GetCompatibleAudioEncoderConfigurations request)
        {
            return this.CallAsync<GetCompatibleAudioEncoderConfigurations, GetCompatibleAudioEncoderConfigurationsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetCompatibleAudioSourceConfigurationsResponse> GetCompatibleAudioSourceConfigurations(GetCompatibleAudioSourceConfigurations request)
        {
            return this.CallAsync<GetCompatibleAudioSourceConfigurations, GetCompatibleAudioSourceConfigurationsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetCompatibleVideoAnalyticsConfigurationsResponse> GetCompatibleVideoAnalyticsConfigurations(GetCompatibleVideoAnalyticsConfigurations request)
        {
            return this.CallAsync<GetCompatibleVideoAnalyticsConfigurations, GetCompatibleVideoAnalyticsConfigurationsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetCompatibleMetadataConfigurationsResponse> GetCompatibleMetadataConfigurations(GetCompatibleMetadataConfigurations request)
        {
            return this.CallAsync<GetCompatibleMetadataConfigurations, GetCompatibleMetadataConfigurationsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetCompatibleAudioOutputConfigurationsResponse> GetCompatibleAudioOutputConfigurations(GetCompatibleAudioOutputConfigurations request)
        {
            return this.CallAsync<GetCompatibleAudioOutputConfigurations, GetCompatibleAudioOutputConfigurationsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetCompatibleAudioDecoderConfigurationsResponse> GetCompatibleAudioDecoderConfigurations(GetCompatibleAudioDecoderConfigurations request)
        {
            return this.CallAsync<GetCompatibleAudioDecoderConfigurations, GetCompatibleAudioDecoderConfigurationsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetVideoSourceConfigurationResponse> SetVideoSourceConfiguration(SetVideoSourceConfiguration request)
        {
            return this.CallAsync<SetVideoSourceConfiguration, SetVideoSourceConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetVideoEncoderConfigurationResponse> SetVideoEncoderConfiguration(SetVideoEncoderConfiguration request)
        {
            return this.CallAsync<SetVideoEncoderConfiguration, SetVideoEncoderConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetAudioSourceConfigurationResponse> SetAudioSourceConfiguration(SetAudioSourceConfiguration request)
        {
            return this.CallAsync<SetAudioSourceConfiguration, SetAudioSourceConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetAudioEncoderConfigurationResponse> SetAudioEncoderConfiguration(SetAudioEncoderConfiguration request)
        {
            return this.CallAsync<SetAudioEncoderConfiguration, SetAudioEncoderConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetVideoAnalyticsConfigurationResponse> SetVideoAnalyticsConfiguration(SetVideoAnalyticsConfiguration request)
        {
            return this.CallAsync<SetVideoAnalyticsConfiguration, SetVideoAnalyticsConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetMetadataConfigurationResponse> SetMetadataConfiguration(SetMetadataConfiguration request)
        {
            return this.CallAsync<SetMetadataConfiguration, SetMetadataConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetAudioOutputConfigurationResponse> SetAudioOutputConfiguration(SetAudioOutputConfiguration request)
        {
            return this.CallAsync<SetAudioOutputConfiguration, SetAudioOutputConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetAudioDecoderConfigurationResponse> SetAudioDecoderConfiguration(SetAudioDecoderConfiguration request)
        {
            return this.CallAsync<SetAudioDecoderConfiguration, SetAudioDecoderConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetVideoSourceConfigurationOptionsResponse> GetVideoSourceConfigurationOptions(GetVideoSourceConfigurationOptions request)
        {
            return this.CallAsync<GetVideoSourceConfigurationOptions, GetVideoSourceConfigurationOptionsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetVideoEncoderConfigurationOptionsResponse> GetVideoEncoderConfigurationOptions(GetVideoEncoderConfigurationOptions request)
        {
            return this.CallAsync<GetVideoEncoderConfigurationOptions, GetVideoEncoderConfigurationOptionsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetAudioSourceConfigurationOptionsResponse> GetAudioSourceConfigurationOptions(GetAudioSourceConfigurationOptions request)
        {
            return this.CallAsync<GetAudioSourceConfigurationOptions, GetAudioSourceConfigurationOptionsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetAudioEncoderConfigurationOptionsResponse> GetAudioEncoderConfigurationOptions(GetAudioEncoderConfigurationOptions request)
        {
            return this.CallAsync<GetAudioEncoderConfigurationOptions, GetAudioEncoderConfigurationOptionsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetMetadataConfigurationOptionsResponse> GetMetadataConfigurationOptions(GetMetadataConfigurationOptions request)
        {
            return this.CallAsync<GetMetadataConfigurationOptions, GetMetadataConfigurationOptionsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetAudioOutputConfigurationOptionsResponse> GetAudioOutputConfigurationOptions(GetAudioOutputConfigurationOptions request)
        {
            return this.CallAsync<GetAudioOutputConfigurationOptions, GetAudioOutputConfigurationOptionsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetAudioDecoderConfigurationOptionsResponse> GetAudioDecoderConfigurationOptions(GetAudioDecoderConfigurationOptions request)
        {
            return this.CallAsync<GetAudioDecoderConfigurationOptions, GetAudioDecoderConfigurationOptionsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetGuaranteedNumberOfVideoEncoderInstancesResponse> GetGuaranteedNumberOfVideoEncoderInstances(GetGuaranteedNumberOfVideoEncoderInstances request)
        {
            return this.CallAsync<GetGuaranteedNumberOfVideoEncoderInstances, GetGuaranteedNumberOfVideoEncoderInstancesResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetStreamUriResponse> GetStreamUri(GetStreamUri request)
        {
            return this.CallAsync<GetStreamUri, GetStreamUriResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<StartMulticastStreamingResponse> StartMulticastStreaming(StartMulticastStreaming request)
        {
            return this.CallAsync<StartMulticastStreaming, StartMulticastStreamingResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<StopMulticastStreamingResponse> StopMulticastStreaming(StopMulticastStreaming request)
        {
            return this.CallAsync<StopMulticastStreaming, StopMulticastStreamingResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetSynchronizationPointResponse> SetSynchronizationPoint(SetSynchronizationPoint request)
        {
            return this.CallAsync<SetSynchronizationPoint, SetSynchronizationPointResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetSnapshotUriResponse> GetSnapshotUri(GetSnapshotUri request)
        {
            return this.CallAsync<GetSnapshotUri, GetSnapshotUriResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetVideoSourceModesResponse> GetVideoSourceModes(GetVideoSourceModes request)
        {
            return this.CallAsync<GetVideoSourceModes, GetVideoSourceModesResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetVideoSourceModeResponse> SetVideoSourceMode(SetVideoSourceMode request)
        {
            return this.CallAsync<SetVideoSourceMode, SetVideoSourceModeResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetOSDsResponse> GetOSDs(GetOSDs request)
        {
            return this.CallAsync<GetOSDs, GetOSDsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetOSDResponse> GetOSD(GetOSD request)
        {
            return this.CallAsync<GetOSD, GetOSDResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetOSDOptionsResponse> GetOSDOptions(GetOSDOptions request)
        {
            return this.CallAsync<GetOSDOptions, GetOSDOptionsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetOSDResponse> SetOSD(SetOSD request)
        {
            return this.CallAsync<SetOSD, SetOSDResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<CreateOSDResponse> CreateOSD(CreateOSD request)
        {
            return this.CallAsync<CreateOSD, CreateOSDResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<DeleteOSDResponse> DeleteOSD(DeleteOSD request)
        {
            return this.CallAsync<DeleteOSD, DeleteOSDResponse>(null, request);
        }
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetServiceCapabilities
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetServiceCapabilitiesResponse
    {
        
        /// <summary>
        /// The capabilities for the media service is returned in the Capabilities element.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Capabilities Capabilities;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class Capabilities
    {
        
        /// <summary>
        /// Indicates if GetSnapshotUri is supported.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool SnapshotUri;
        
        /// <summary>
        /// Indicates whether or not Rotation feature is supported.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool Rotation;
        
        /// <summary>
        /// Indicates the support for changing video source mode.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool VideoSourceMode;
        
        /// <summary>
        /// Indicates if OSD is supported.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool OSD;
        
        /// <summary>
        /// Media profile capabilities.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ProfileCapabilities ProfileCapabilities;
        
        /// <summary>
        /// Streaming capabilities.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public StreamingCapabilities StreamingCapabilities;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class ProfileCapabilities
    {
        
        /// <summary>
        /// Maximum number of profiles supported.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int MaximumNumberOfProfiles;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class StreamingCapabilities
    {
        
        /// <summary>
        /// Indicates support for RTP multicast.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool RTPMulticast;
        
        /// <summary>
        /// Indicates support for RTP over TCP.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool RTP_TCP;
        
        /// <summary>
        /// Indicates support for RTP/RTSP/TCP.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool RTP_RTSP_TCP;
        
        /// <summary>
        /// Indicates support for non aggregate RTSP control.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool NonAggregateControl;
        
        /// <summary>
        ///  Indicates the device does not support live media streaming via RTSP.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool NoRTSPStreaming;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetVideoSources
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetVideoSourcesResponse
    {
        
        /// <summary>
        /// List of existing Video Sources
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VideoSource[] VideoSources;
    }
    
    /// <summary>
    /// Representation of a physical video input.
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class VideoSource
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioSources
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioSourcesResponse
    {
        
        /// <summary>
        /// List of existing Audio Sources
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioSource[] AudioSources;
    }
    
    /// <summary>
    /// Representation of a physical audio input.
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class AudioSource
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioOutputs
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioOutputsResponse
    {
        
        /// <summary>
        /// List of existing Audio Outputs
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioOutput[] AudioOutputs;
    }
    
    /// <summary>
    /// Representation of a physical audio outputs.
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class AudioOutput
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class CreateProfile
    {
        
        /// <summary>
        /// friendly name of the profile to be created
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name;
        
        /// <summary>
        /// Optional token, specifying the unique identifier of the new profile. A device supports at least a token length of 12 characters and characters "A-Z" | "a-z" | "0-9" | "-.".
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Token;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class CreateProfileResponse
    {
        
        /// <summary>
        /// returns the new created profile
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Profile Profile;
    }
    
    /// <summary>
    /// 
    ///			A media profile consists of a set of media configurations. Media profiles are used by a client
    ///			to configure properties of a media stream from an NVT.
    ///			An NVT shall provide at least one media profile at boot. An NVT should provide “ready to use”
    ///			profiles for the most common media configurations that the device offers.
    ///			A profile consists of a set of interconnected configuration entities. Configurations are provided
    ///			by the NVT and can be either static or created dynamically by the NVT. For example, the
    ///			dynamic configurations can be created by the NVT depending on current available encoding
    ///			resources.
    ///		
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Profile
    {
        
        /// <summary>
        /// Unique identifier of the profile.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string token;
        
        /// <summary>
        /// A value of true signals that the profile cannot be deleted. Default is false.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool @fixed;
        
        /// <summary>
        /// User readable name of the profile.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name;
        
        /// <summary>
        /// Optional configuration of the Video input.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public VideoSourceConfiguration VideoSourceConfiguration;
        
        /// <summary>
        /// Optional configuration of the Audio input.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public AudioSourceConfiguration AudioSourceConfiguration;
        
        /// <summary>
        /// Optional configuration of the Video encoder.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public VideoEncoderConfiguration VideoEncoderConfiguration;
        
        /// <summary>
        /// Optional configuration of the Audio encoder.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public AudioEncoderConfiguration AudioEncoderConfiguration;
        
        /// <summary>
        /// Optional configuration of the video analytics module and rule engine.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public VideoAnalyticsConfiguration VideoAnalyticsConfiguration;
        
        /// <summary>
        /// Optional configuration of the pan tilt zoom unit.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public PTZConfiguration PTZConfiguration;
        
        /// <summary>
        /// Optional configuration of the metadata stream.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public MetadataConfiguration MetadataConfiguration;
        
        /// <summary>
        /// Extensions defined in ONVIF 2.0
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public ProfileExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class VideoSourceConfiguration
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class AudioSourceConfiguration
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class VideoEncoderConfiguration
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class AudioEncoderConfiguration
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class VideoAnalyticsConfiguration
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZConfiguration
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class MetadataConfiguration
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class ProfileExtension
    {
        
        /// <summary>
        /// Optional configuration of the Audio output.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioOutputConfiguration AudioOutputConfiguration;
        
        /// <summary>
        /// Optional configuration of the Audio decoder.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public AudioDecoderConfiguration AudioDecoderConfiguration;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ProfileExtension2 Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class AudioOutputConfiguration
    {
    }
    
    /// <summary>
    /// The Audio Decoder Configuration does not contain any that parameter to configure the
    ///decoding .A decoder shall decode every data it receives (according to its capabilities).
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class AudioDecoderConfiguration
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class ProfileExtension2
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetProfile
    {
        
        /// <summary>
        /// this command requests a specific profile
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetProfileResponse
    {
        
        /// <summary>
        /// returns the requested media profile
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Profile Profile;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetProfiles
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetProfilesResponse
    {
        
        /// <summary>
        /// lists all profiles that exist in the media service 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Profile[] Profiles;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class AddVideoEncoderConfiguration
    {
        
        /// <summary>
        /// Reference to the profile where the configuration should be added
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        /// <summary>
        /// Contains a reference to the VideoEncoderConfiguration to add
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class AddVideoEncoderConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class RemoveVideoEncoderConfiguration
    {
        
        /// <summary>
        /// Contains a reference to the media profile from which the
        ///VideoEncoderConfiguration shall be removed.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class RemoveVideoEncoderConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class AddVideoSourceConfiguration
    {
        
        /// <summary>
        /// Reference to the profile where the configuration should be added
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        /// <summary>
        /// Contains a reference to the VideoSourceConfiguration to add
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class AddVideoSourceConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class RemoveVideoSourceConfiguration
    {
        
        /// <summary>
        /// Contains a reference to the media profile from which the
        ///VideoSourceConfiguration shall be removed.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class RemoveVideoSourceConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class AddAudioEncoderConfiguration
    {
        
        /// <summary>
        /// Reference to the profile where the configuration should be added
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        /// <summary>
        /// Contains a reference to the AudioEncoderConfiguration to add
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class AddAudioEncoderConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class RemoveAudioEncoderConfiguration
    {
        
        /// <summary>
        /// Contains a reference to the media profile from which the
        ///AudioEncoderConfiguration shall be removed.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class RemoveAudioEncoderConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class AddAudioSourceConfiguration
    {
        
        /// <summary>
        /// Reference to the profile where the configuration should be added
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        /// <summary>
        /// Contains a reference to the AudioSourceConfiguration to add
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class AddAudioSourceConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class RemoveAudioSourceConfiguration
    {
        
        /// <summary>
        /// Contains a reference to the media profile from which the
        ///AudioSourceConfiguration shall be removed.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class RemoveAudioSourceConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class AddPTZConfiguration
    {
        
        /// <summary>
        /// Reference to the profile where the configuration should be added
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        /// <summary>
        /// Contains a reference to the PTZConfiguration to add
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class AddPTZConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class RemovePTZConfiguration
    {
        
        /// <summary>
        /// Contains a reference to the media profile from which the
        ///PTZConfiguration shall be removed.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class RemovePTZConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class AddVideoAnalyticsConfiguration
    {
        
        /// <summary>
        /// Reference to the profile where the configuration should be added
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        /// <summary>
        /// Contains a reference to the VideoAnalyticsConfiguration to add
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class AddVideoAnalyticsConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class RemoveVideoAnalyticsConfiguration
    {
        
        /// <summary>
        /// Contains a reference to the media profile from which the
        ///VideoAnalyticsConfiguration shall be removed.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class RemoveVideoAnalyticsConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class AddMetadataConfiguration
    {
        
        /// <summary>
        /// Reference to the profile where the configuration should be added
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        /// <summary>
        /// Contains a reference to the MetadataConfiguration to add
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class AddMetadataConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class RemoveMetadataConfiguration
    {
        
        /// <summary>
        /// Contains a reference to the media profile from which the
        ///MetadataConfiguration shall be removed.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class RemoveMetadataConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class AddAudioOutputConfiguration
    {
        
        /// <summary>
        /// Reference to the profile where the configuration should be added
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        /// <summary>
        /// Contains a reference to the AudioOutputConfiguration to add
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class AddAudioOutputConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class RemoveAudioOutputConfiguration
    {
        
        /// <summary>
        /// Contains a reference to the media profile from which the
        ///AudioOutputConfiguration shall be removed.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class RemoveAudioOutputConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class AddAudioDecoderConfiguration
    {
        
        /// <summary>
        /// This element contains a reference to the profile where the configuration should be added.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
        
        /// <summary>
        /// This element contains a reference to the AudioDecoderConfiguration to add.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class AddAudioDecoderConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class RemoveAudioDecoderConfiguration
    {
        
        /// <summary>
        /// This element contains a  reference to the media profile from which the AudioDecoderConfiguration shall be removed.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class RemoveAudioDecoderConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class DeleteProfile
    {
        
        /// <summary>
        /// This element contains a  reference to the profile that should be deleted.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class DeleteProfileResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetVideoSourceConfigurations
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetVideoSourceConfigurationsResponse
    {
        
        /// <summary>
        /// This element contains a list of video source configurations.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VideoSourceConfiguration[] Configurations;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetVideoEncoderConfigurations
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetVideoEncoderConfigurationsResponse
    {
        
        /// <summary>
        /// This element contains a list of video encoder configurations.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VideoEncoderConfiguration[] Configurations;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioSourceConfigurations
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioSourceConfigurationsResponse
    {
        
        /// <summary>
        /// This element contains a list of audio source configurations.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioSourceConfiguration[] Configurations;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioEncoderConfigurations
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioEncoderConfigurationsResponse
    {
        
        /// <summary>
        /// This element contains a list of audio encoder configurations.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioEncoderConfiguration[] Configurations;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetVideoAnalyticsConfigurations
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetVideoAnalyticsConfigurationsResponse
    {
        
        /// <summary>
        /// This element contains a list of VideoAnalytics configurations.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VideoAnalyticsConfiguration[] Configurations;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetMetadataConfigurations
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetMetadataConfigurationsResponse
    {
        
        /// <summary>
        /// This element contains a list of metadata configurations
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public MetadataConfiguration[] Configurations;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioOutputConfigurations
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioOutputConfigurationsResponse
    {
        
        /// <summary>
        /// This element contains a list of audio output configurations
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioOutputConfiguration[] Configurations;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioDecoderConfigurations
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioDecoderConfigurationsResponse
    {
        
        /// <summary>
        /// This element contains a list of audio decoder configurations
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioDecoderConfiguration[] Configurations;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetVideoSourceConfiguration
    {
        
        /// <summary>
        /// Token of the requested video source configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetVideoSourceConfigurationResponse
    {
        
        /// <summary>
        /// The requested video source configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VideoSourceConfiguration Configuration;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetVideoEncoderConfiguration
    {
        
        /// <summary>
        /// Token of the requested video encoder configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetVideoEncoderConfigurationResponse
    {
        
        /// <summary>
        /// The requested video encoder configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VideoEncoderConfiguration Configuration;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioSourceConfiguration
    {
        
        /// <summary>
        /// Token of the requested audio source configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioSourceConfigurationResponse
    {
        
        /// <summary>
        /// The requested audio source configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioSourceConfiguration Configuration;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioEncoderConfiguration
    {
        
        /// <summary>
        /// Token of the requested audio encoder configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioEncoderConfigurationResponse
    {
        
        /// <summary>
        /// The requested audio encoder configuration
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioEncoderConfiguration Configuration;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetVideoAnalyticsConfiguration
    {
        
        /// <summary>
        /// Token of the requested video analytics configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetVideoAnalyticsConfigurationResponse
    {
        
        /// <summary>
        /// The requested video analytics configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VideoAnalyticsConfiguration Configuration;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetMetadataConfiguration
    {
        
        /// <summary>
        /// Token of the requested metadata configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetMetadataConfigurationResponse
    {
        
        /// <summary>
        /// The requested metadata configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public MetadataConfiguration Configuration;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioOutputConfiguration
    {
        
        /// <summary>
        /// Token of the requested audio output configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioOutputConfigurationResponse
    {
        
        /// <summary>
        /// The requested audio output configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioOutputConfiguration Configuration;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioDecoderConfiguration
    {
        
        /// <summary>
        /// Token of the requested audio decoder configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioDecoderConfigurationResponse
    {
        
        /// <summary>
        /// The requested audio decoder configuration
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioDecoderConfiguration Configuration;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetCompatibleVideoEncoderConfigurations
    {
        
        /// <summary>
        /// Contains the token of an existing media profile the configurations shall be compatible with.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetCompatibleVideoEncoderConfigurationsResponse
    {
        
        /// <summary>
        /// Contains a list of video encoder configurations that are compatible with the specified media profile.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VideoEncoderConfiguration[] Configurations;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetCompatibleVideoSourceConfigurations
    {
        
        /// <summary>
        /// Contains the token of an existing media profile the configurations shall be compatible with.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetCompatibleVideoSourceConfigurationsResponse
    {
        
        /// <summary>
        /// Contains a list of video source configurations that are compatible with the specified media profile.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VideoSourceConfiguration[] Configurations;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetCompatibleAudioEncoderConfigurations
    {
        
        /// <summary>
        /// Contains the token of an existing media profile the configurations shall be compatible with.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetCompatibleAudioEncoderConfigurationsResponse
    {
        
        /// <summary>
        /// Contains a list of audio encoder configurations that are compatible with the specified media profile.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioEncoderConfiguration[] Configurations;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetCompatibleAudioSourceConfigurations
    {
        
        /// <summary>
        /// Contains the token of an existing media profile the configurations shall be compatible with.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetCompatibleAudioSourceConfigurationsResponse
    {
        
        /// <summary>
        /// Contains a list of audio source configurations that are compatible with the specified media profile.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioSourceConfiguration[] Configurations;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetCompatibleVideoAnalyticsConfigurations
    {
        
        /// <summary>
        /// Contains the token of an existing media profile the configurations shall be compatible with.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetCompatibleVideoAnalyticsConfigurationsResponse
    {
        
        /// <summary>
        /// Contains a list of video analytics configurations that are compatible with the specified media profile.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VideoAnalyticsConfiguration[] Configurations;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetCompatibleMetadataConfigurations
    {
        
        /// <summary>
        /// Contains the token of an existing media profile the configurations shall be compatible with.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetCompatibleMetadataConfigurationsResponse
    {
        
        /// <summary>
        /// Contains a list of metadata configurations that are compatible with the specified media profile.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public MetadataConfiguration[] Configurations;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetCompatibleAudioOutputConfigurations
    {
        
        /// <summary>
        /// Contains the token of an existing media profile the configurations shall be compatible with.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetCompatibleAudioOutputConfigurationsResponse
    {
        
        /// <summary>
        /// Contains a list of audio output configurations that are compatible with the specified media profile.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioOutputConfiguration[] Configurations;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetCompatibleAudioDecoderConfigurations
    {
        
        /// <summary>
        /// Contains the token of an existing media profile the configurations shall be compatible with.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetCompatibleAudioDecoderConfigurationsResponse
    {
        
        /// <summary>
        /// Contains a list of audio decoder configurations that are compatible with the specified media profile. 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioDecoderConfiguration[] Configurations;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetVideoSourceConfiguration
    {
        
        /// <summary>
        /// Contains the modified video source configuration. The configuration shall exist in the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VideoSourceConfiguration Configuration;
        
        /// <summary>
        /// The ForcePersistence element is obsolete and should always be assumed to be true.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool ForcePersistence;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetVideoSourceConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetVideoEncoderConfiguration
    {
        
        /// <summary>
        /// Contains the modified video encoder configuration. The configuration shall exist in the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VideoEncoderConfiguration Configuration;
        
        /// <summary>
        /// The ForcePersistence element is obsolete and should always be assumed to be true.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool ForcePersistence;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetVideoEncoderConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetAudioSourceConfiguration
    {
        
        /// <summary>
        /// Contains the modified audio source configuration. The configuration shall exist in the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioSourceConfiguration Configuration;
        
        /// <summary>
        /// The ForcePersistence element is obsolete and should always be assumed to be true.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool ForcePersistence;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetAudioSourceConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetAudioEncoderConfiguration
    {
        
        /// <summary>
        /// Contains the modified audio encoder configuration. The configuration shall exist in the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioEncoderConfiguration Configuration;
        
        /// <summary>
        /// The ForcePersistence element is obsolete and should always be assumed to be true.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool ForcePersistence;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetAudioEncoderConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetVideoAnalyticsConfiguration
    {
        
        /// <summary>
        /// Contains the modified video analytics configuration. The configuration shall exist in the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VideoAnalyticsConfiguration Configuration;
        
        /// <summary>
        /// The ForcePersistence element is obsolete and should always be assumed to be true.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool ForcePersistence;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetVideoAnalyticsConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetMetadataConfiguration
    {
        
        /// <summary>
        /// Contains the modified metadata configuration. The configuration shall exist in the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public MetadataConfiguration Configuration;
        
        /// <summary>
        /// The ForcePersistence element is obsolete and should always be assumed to be true.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool ForcePersistence;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetMetadataConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetAudioOutputConfiguration
    {
        
        /// <summary>
        /// Contains the modified audio output configuration. The configuration shall exist in the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioOutputConfiguration Configuration;
        
        /// <summary>
        /// The ForcePersistence element is obsolete and should always be assumed to be true.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool ForcePersistence;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetAudioOutputConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetAudioDecoderConfiguration
    {
        
        /// <summary>
        /// Contains the modified audio decoder configuration. The configuration shall exist in the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioDecoderConfiguration Configuration;
        
        /// <summary>
        /// The ForcePersistence element is obsolete and should always be assumed to be true.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool ForcePersistence;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetAudioDecoderConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetVideoSourceConfigurationOptions
    {
        
        /// <summary>
        /// Optional video source configurationToken that specifies an existing configuration that the options are intended for.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConfigurationToken;
        
        /// <summary>
        /// Optional ProfileToken that specifies an existing media profile that the options shall be compatible with.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetVideoSourceConfigurationOptionsResponse
    {
        
        /// <summary>
        /// This message contains the video source configuration options. If a video source configuration is specified, the options shall concern that particular configuration. If a media profile is specified, the options shall be compatible with that media profile. If no tokens are specified, the options shall be considered generic for the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VideoSourceConfigurationOptions Options;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class VideoSourceConfigurationOptions
    {
        
        /// <summary>
        /// Supported range for the capturing area.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public IntRectangleRange BoundsRange;
        
        /// <summary>
        /// List of physical inputs.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string VideoSourceTokensAvailable;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public VideoSourceConfigurationOptionsExtension Extension;
    }
    
    /// <summary>
    /// Range of a rectangle. The rectangle itself is defined by lower left corner position and size. Units are pixel.
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class IntRectangleRange
    {
        
        /// <summary>
        /// Range of X-axis.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public IntRange XRange;
        
        /// <summary>
        /// Range of Y-axis.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public IntRange YRange;
        
        /// <summary>
        /// Range of width.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public IntRange WidthRange;
        
        /// <summary>
        /// Range of height.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public IntRange HeightRange;
    }
    
    /// <summary>
    /// Range of values greater equal Min value and less equal Max value.
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class IntRange
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Min;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int Max;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class VideoSourceConfigurationOptionsExtension
    {
        
        /// <summary>
        /// Options of parameters for Rotation feature.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public RotateOptions Rotate;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public VideoSourceConfigurationOptionsExtension2 Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class RotateOptions
    {
        
        /// <summary>
        /// Supported options of Rotate mode parameter.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Mode;
        
        /// <summary>
        /// List of supported degree value for rotation.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public IntList DegreeList;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public RotateOptionsExtension Extension;
    }
    
    /// <summary>
    /// List of values.
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class IntList
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int[] Items;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class RotateOptionsExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class VideoSourceConfigurationOptionsExtension2
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetVideoEncoderConfigurationOptions
    {
        
        /// <summary>
        /// Optional video encoder configuration token that specifies an existing configuration that the options are intended for.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConfigurationToken;
        
        /// <summary>
        /// Optional ProfileToken that specifies an existing media profile that the options shall be compatible with.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetVideoEncoderConfigurationOptionsResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VideoEncoderConfigurationOptions Options;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class VideoEncoderConfigurationOptions
    {
        
        /// <summary>
        /// Range of the quality values. A high value means higher quality.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public IntRange QualityRange;
        
        /// <summary>
        /// Optional JPEG encoder settings ranges (See also Extension element).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public JpegOptions JPEG;
        
        /// <summary>
        /// Optional MPEG-4 encoder settings ranges (See also Extension element).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public Mpeg4Options MPEG4;
        
        /// <summary>
        /// Optional H.264 encoder settings ranges (See also Extension element).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public H264Options H264;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public VideoEncoderOptionsExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class JpegOptions
    {
        
        /// <summary>
        /// List of supported image sizes.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VideoResolution ResolutionsAvailable;
        
        /// <summary>
        /// Supported frame rate in fps (frames per second).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public IntRange FrameRateRange;
        
        /// <summary>
        /// Supported encoding interval range. The encoding interval corresponds to the number of frames devided by the encoded frames. An encoding interval value of "1" means that all frames are encoded.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public IntRange EncodingIntervalRange;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class VideoResolution
    {
        
        /// <summary>
        /// Number of the columns of the Video image.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Width;
        
        /// <summary>
        /// Number of the lines of the Video image.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int Height;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Mpeg4Options
    {
        
        /// <summary>
        /// List of supported image sizes.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VideoResolution ResolutionsAvailable;
        
        /// <summary>
        /// Supported group of Video frames length. This value typically corresponds to the I-Frame distance.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public IntRange GovLengthRange;
        
        /// <summary>
        /// Supported frame rate in fps (frames per second).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public IntRange FrameRateRange;
        
        /// <summary>
        /// Supported encoding interval range. The encoding interval corresponds to the number of frames devided by the encoded frames. An encoding interval value of "1" means that all frames are encoded.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public IntRange EncodingIntervalRange;
        
        /// <summary>
        /// List of supported MPEG-4 profiles.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Mpeg4ProfilesSupported;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class H264Options
    {
        
        /// <summary>
        /// List of supported image sizes.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VideoResolution ResolutionsAvailable;
        
        /// <summary>
        /// Supported group of Video frames length. This value typically corresponds to the I-Frame distance.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public IntRange GovLengthRange;
        
        /// <summary>
        /// Supported frame rate in fps (frames per second).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public IntRange FrameRateRange;
        
        /// <summary>
        /// Supported encoding interval range. The encoding interval corresponds to the number of frames devided by the encoded frames. An encoding interval value of "1" means that all frames are encoded.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public IntRange EncodingIntervalRange;
        
        /// <summary>
        /// List of supported H.264 profiles.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string H264ProfilesSupported;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class VideoEncoderOptionsExtension
    {
        
        /// <summary>
        /// Optional JPEG encoder settings ranges.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public JpegOptions2 JPEG;
        
        /// <summary>
        /// Optional MPEG-4 encoder settings ranges.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public Mpeg4Options2 MPEG4;
        
        /// <summary>
        /// Optional H.264 encoder settings ranges.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public H264Options2 H264;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public VideoEncoderOptionsExtension2 Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class JpegOptions2
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Mpeg4Options2
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class H264Options2
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class VideoEncoderOptionsExtension2
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioSourceConfigurationOptions
    {
        
        /// <summary>
        /// Optional audio source configuration token that specifies an existing configuration that the options are intended for.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConfigurationToken;
        
        /// <summary>
        /// Optional ProfileToken that specifies an existing media profile that the options shall be compatible with.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioSourceConfigurationOptionsResponse
    {
        
        /// <summary>
        /// This message contains the audio source configuration options. If a audio source configuration is specified, the options shall concern that particular configuration. If a media profile is specified, the options shall be compatible with that media profile. If no tokens are specified, the options shall be considered generic for the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioSourceConfigurationOptions Options;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class AudioSourceConfigurationOptions
    {
        
        /// <summary>
        /// Tokens of the audio source the configuration can be used for.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string InputTokensAvailable;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public AudioSourceOptionsExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class AudioSourceOptionsExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioEncoderConfigurationOptions
    {
        
        /// <summary>
        /// Optional audio encoder configuration token that specifies an existing configuration that the options are intended for.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConfigurationToken;
        
        /// <summary>
        /// Optional ProfileToken that specifies an existing media profile that the options shall be compatible with.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioEncoderConfigurationOptionsResponse
    {
        
        /// <summary>
        /// This message contains the audio encoder configuration options. If a audio encoder configuration is specified, the options shall concern that particular configuration. If a media profile is specified, the options shall be compatible with that media profile. If no tokens are specified, the options shall be considered generic for the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioEncoderConfigurationOptions Options;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class AudioEncoderConfigurationOptions
    {
        
        /// <summary>
        /// list of supported AudioEncoderConfigurations
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioEncoderConfigurationOption[] Options;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class AudioEncoderConfigurationOption
    {
        
        /// <summary>
        /// The enoding used for audio data (either G.711, G.726 or AAC)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Encoding;
        
        /// <summary>
        /// List of supported bitrates in kbps for the specified Encoding
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public IntList BitrateList;
        
        /// <summary>
        /// List of supported Sample Rates in kHz for the specified Encoding
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public IntList SampleRateList;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetMetadataConfigurationOptions
    {
        
        /// <summary>
        /// Optional metadata configuration token that specifies an existing configuration that the options are intended for.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConfigurationToken;
        
        /// <summary>
        /// Optional ProfileToken that specifies an existing media profile that the options shall be compatible with.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetMetadataConfigurationOptionsResponse
    {
        
        /// <summary>
        /// This message contains the metadata configuration options. If a metadata configuration is specified, the options shall concern that particular configuration. If a media profile is specified, the options shall be compatible with that media profile. If no tokens are specified, the options shall be considered generic for the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public MetadataConfigurationOptions Options;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class MetadataConfigurationOptions
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PTZStatusFilterOptions PTZStatusFilterOptions;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public MetadataConfigurationOptionsExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZStatusFilterOptions
    {
        
        /// <summary>
        /// True if the device is able to stream pan or tilt status information.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool PanTiltStatusSupported;
        
        /// <summary>
        /// True if the device is able to stream zoom status inforamtion.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool ZoomStatusSupported;
        
        /// <summary>
        /// True if the device is able to stream the pan or tilt position.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool PanTiltPositionSupported;
        
        /// <summary>
        /// True if the device is able to stream zoom position information.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public bool ZoomPositionSupported;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public PTZStatusFilterOptionsExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZStatusFilterOptionsExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class MetadataConfigurationOptionsExtension
    {
        
        /// <summary>
        /// List of supported metadata compression type. Its options shall be chosen from tt:MetadataCompressionType.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string[] CompressionType;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public MetadataConfigurationOptionsExtension2 Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class MetadataConfigurationOptionsExtension2
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioOutputConfigurationOptions
    {
        
        /// <summary>
        /// Optional audio output configuration token that specifies an existing configuration that the options are intended for.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConfigurationToken;
        
        /// <summary>
        /// Optional ProfileToken that specifies an existing media profile that the options shall be compatible with.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioOutputConfigurationOptionsResponse
    {
        
        /// <summary>
        /// This message contains the audio output configuration options. If a audio output configuration is specified, the options shall concern that particular configuration. If a media profile is specified, the options shall be compatible with that media profile. If no tokens are specified, the options shall be considered generic for the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioOutputConfigurationOptions Options;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class AudioOutputConfigurationOptions
    {
        
        /// <summary>
        /// Tokens of the physical Audio outputs (typically one).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string OutputTokensAvailable;
        
        /// <summary>
        /// 
        ///				An audio channel MAY support different types of audio transmission. While for full duplex
        ///				operation no special handling is required, in half duplex operation the transmission direction
        ///				needs to be switched.
        ///				The optional SendPrimacy parameter inside the AudioOutputConfiguration indicates which
        ///				direction is currently active. An NVC can switch between different modes by setting the
        ///				AudioOutputConfiguration.
        ///				The following modes for the Send-Primacy are defined:www.onvif.org/ver20/HalfDuplex/Server
        ///						The server is allowed to send audio data to the client. The client shall not send
        ///						audio data via the backchannel to the NVT in this mode.www.onvif.org/ver20/HalfDuplex/Client
        ///						The client is allowed to send audio data via the backchannel to the server. The
        ///						NVT shall not send audio data to the client in this mode.www.onvif.org/ver20/HalfDuplex/Auto
        ///						It is up to the device how to deal with sending and receiving audio data.
        ///				Acoustic echo cancellation is out of ONVIF scope.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string[] SendPrimacyOptions;
        
        /// <summary>
        /// Minimum and maximum level range supported for this Output.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public IntRange OutputLevelRange;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioDecoderConfigurationOptions
    {
        
        /// <summary>
        /// Optional audio decoder configuration token that specifies an existing configuration that the options are intended for.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConfigurationToken;
        
        /// <summary>
        /// Optional ProfileToken that specifies an existing media profile that the options shall be compatible with.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetAudioDecoderConfigurationOptionsResponse
    {
        
        /// <summary>
        /// This message contains the audio decoder configuration options. If a audio decoder configuration is specified, the options shall concern that particular configuration. If a media profile is specified, the options shall be compatible with that media profile. If no tokens are specified, the options shall be considered generic for the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AudioDecoderConfigurationOptions Options;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class AudioDecoderConfigurationOptions
    {
        
        /// <summary>
        /// If the device is able to decode AAC encoded audio this section describes the supported configurations
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AACDecOptions AACDecOptions;
        
        /// <summary>
        /// If the device is able to decode G711 encoded audio this section describes the supported configurations
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public G711DecOptions G711DecOptions;
        
        /// <summary>
        /// If the device is able to decode G726 encoded audio this section describes the supported configurations
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public G726DecOptions G726DecOptions;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public AudioDecoderConfigurationOptionsExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class AACDecOptions
    {
        
        /// <summary>
        /// List of supported bitrates in kbps
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public IntList Bitrate;
        
        /// <summary>
        /// List of supported sample rates in kHz
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public IntList SampleRateRange;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class G711DecOptions
    {
        
        /// <summary>
        /// List of supported bitrates in kbps
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public IntList Bitrate;
        
        /// <summary>
        /// List of supported sample rates in kHz
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public IntList SampleRateRange;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class G726DecOptions
    {
        
        /// <summary>
        /// List of supported bitrates in kbps
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public IntList Bitrate;
        
        /// <summary>
        /// List of supported sample rates in kHz
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public IntList SampleRateRange;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class AudioDecoderConfigurationOptionsExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetGuaranteedNumberOfVideoEncoderInstances
    {
        
        /// <summary>
        /// Token of the video source configuration
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetGuaranteedNumberOfVideoEncoderInstancesResponse
    {
        
        /// <summary>
        /// The minimum guaranteed total number of encoder instances (applications) per VideoSourceConfiguration. The device is able to deliver the TotalNumber of streams
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int TotalNumber;
        
        /// <summary>
        /// If a device limits the number of instances for respective Video Codecs the response contains the information how many Jpeg streams can be set up at the same time per VideoSource.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int JPEG;
        
        /// <summary>
        /// If a device limits the number of instances for respective Video Codecs the response contains the information how many H264 streams can be set up at the same time per VideoSource.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int H264;
        
        /// <summary>
        /// If a device limits the number of instances for respective Video Codecs the response contains the information how many Mpeg4 streams can be set up at the same time per VideoSource.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public int MPEG4;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetStreamUri
    {
        
        /// <summary>
        /// Stream Setup that should be used with the uri
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public StreamSetup StreamSetup;
        
        /// <summary>
        /// The ProfileToken element indicates the media profile to use and will define the configuration of the content of the stream.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class StreamSetup
    {
        
        /// <summary>
        /// Defines if a multicast or unicast stream is requested
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Stream;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public Transport Transport;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Transport
    {
        
        /// <summary>
        /// Defines the network protocol for streaming, either UDP=RTP/UDP, RTSP=RTP/RTSP/TCP or HTTP=RTP/RTSP/HTTP/TCP 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Protocol;
        
        /// <summary>
        /// Optional element to describe further tunnel options. This element is normally not needed 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public Transport Tunnel;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetStreamUriResponse
    {
        
        /// <summary>
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public MediaUri MediaUri;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class MediaUri
    {
        
        /// <summary>
        /// Stable Uri to be used for requesting the media stream
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Uri;
        
        /// <summary>
        /// Indicates if the Uri is only valid until the connection is established. The value shall be set to "false".
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool InvalidAfterConnect;
        
        /// <summary>
        /// Indicates if the Uri is invalid after a reboot of the device. The value shall be set to "false".
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool InvalidAfterReboot;
        
        /// <summary>
        /// Duration how long the Uri is valid. This parameter shall be set to PT0S to indicate that this stream URI is indefinitely valid even if the profile changes
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Timeout;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class StartMulticastStreaming
    {
        
        /// <summary>
        /// Contains the token of the Profile that is used to define the multicast stream.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class StartMulticastStreamingResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class StopMulticastStreaming
    {
        
        /// <summary>
        /// Contains the token of the Profile that is used to define the multicast stream.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class StopMulticastStreamingResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetSynchronizationPoint
    {
        
        /// <summary>
        /// Contains a Profile reference for which a Synchronization Point is requested.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetSynchronizationPointResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetSnapshotUri
    {
        
        /// <summary>
        /// The ProfileToken element indicates the media profile to use and will define the source and dimensions of the snapshot.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ProfileToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetSnapshotUriResponse
    {
        
        /// <summary>
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public MediaUri MediaUri;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetVideoSourceModes
    {
        
        /// <summary>
        /// Contains a video source reference for which a video source mode is requested.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string VideoSourceToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetVideoSourceModesResponse
    {
        
        /// <summary>
        /// Return the information for specified video source mode.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public VideoSourceMode VideoSourceModes;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class VideoSourceMode
    {
        
        /// <summary>
        /// Indicate token for video source mode.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string token;
        
        /// <summary>
        /// Indication of whether this mode is active. If active this value is true. In case of non-indication, it means as false. The value of true shall be had by only one video source mode.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool Enabled;
        
        /// <summary>
        /// Max frame rate in frames per second for this video source mode.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public float MaxFramerate;
        
        /// <summary>
        /// Max horizontal and vertical resolution for this video source mode.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public VideoResolution MaxResolution;
        
        /// <summary>
        /// Indication which encodings are supported for this video source. The list may contain one or more enumeration values of tt:VideoEncoding.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string[] Encodings;
        
        /// <summary>
        /// After setting the mode if a device starts to reboot this value is true. If a device change the mode without rebooting this value is false. If true, configured parameters may not be guaranteed by the device after rebooting.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public bool Reboot;
        
        /// <summary>
        /// Informative description of this video source mode. This field should be described in English.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Description;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public VideoSourceModeExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class VideoSourceModeExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetVideoSourceMode
    {
        
        /// <summary>
        /// Contains a video source reference for which a video source mode is requested.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string VideoSourceToken;
        
        /// <summary>
        /// Indicate video source mode.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string VideoSourceModeToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetVideoSourceModeResponse
    {
        
        /// <summary>
        /// The response contains information about rebooting after returning response. When Reboot is set true, a device will reboot automatically after setting mode.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool Reboot;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetOSDs
    {
        
        /// <summary>
        /// Token of the Video Source Configuration, which has OSDs associated with are requested. If token not exist, request all available OSDs.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetOSDsResponse
    {
        
        /// <summary>
        /// This element contains a list of requested OSDs.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public OSDConfiguration[] OSDs;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class OSDConfiguration
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetOSD
    {
        
        /// <summary>
        /// The GetOSD command fetches the OSD configuration if the OSD token is known.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string OSDToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetOSDResponse
    {
        
        /// <summary>
        /// The requested OSD configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public OSDConfiguration OSD;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetOSDOptions
    {
        
        /// <summary>
        /// Video Source Configuration Token that specifies an existing video source configuration that the options shall be compatible with.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class GetOSDOptionsResponse
    {
        
        /// <summary>
        /// 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public OSDConfigurationOptions OSDOptions;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class OSDConfigurationOptions
    {
        
        /// <summary>
        /// The maximum number of OSD configurations supported for the specificate video source configuration. If a device limits the number of instances by OSDType, it should indicate the supported number via the related attribute.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public MaximumNumberOfOSDs MaximumNumberOfOSDs;
        
        /// <summary>
        /// List supported type of OSD configuration. When a device indicates the supported number for each types in MaximumNumberOfOSDs, related type shall be presented. A device shall return Option element relating to listed type.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Type;
        
        /// <summary>
        /// List available OSD position type. Following are the pre-defined:UpperLeftUpperRightLowerLeftLowerRightCustom
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string PositionOption;
        
        /// <summary>
        /// Option of the OSD text configuration. This element shall be returned if the device is signaling the support for Text.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public OSDTextOptions TextOption;
        
        /// <summary>
        /// Option of the OSD image configuration. This element shall be returned if the device is signaling the support for Image.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public OSDImgOptions ImageOption;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public OSDConfigurationOptionsExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class MaximumNumberOfOSDs
    {
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Total;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Image;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int PlainText;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Date;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Time;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int DateAndTime;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class OSDTextOptions
    {
        
        /// <summary>
        /// List of supported OSD text type. When a device indicates the supported number relating to Text type in MaximumNumberOfOSDs, the type shall be presented.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Type;
        
        /// <summary>
        /// Range of the font size value.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public IntRange FontSizeRange;
        
        /// <summary>
        /// List of supported date format.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string[] DateFormat;
        
        /// <summary>
        /// List of supported time format.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string[] TimeFormat;
        
        /// <summary>
        /// List of supported font color.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public OSDColorOptions FontColor;
        
        /// <summary>
        /// List of supported background color.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public OSDColorOptions BackgroundColor;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public OSDTextOptionsExtension Extension;
    }
    
    /// <summary>
    /// Describe the option of the color and its transparency.
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class OSDColorOptions
    {
        
        /// <summary>
        /// Optional list of supported colors.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ColorOptions Color;
        
        /// <summary>
        /// Range of the transparent level. Larger means more tranparent.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public IntRange Transparent;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public OSDColorOptionsExtension Extension;
    }
    
    /// <summary>
    /// Describe the option of the color supported. Either list each color or define the range of color value. The following values are acceptable for Colourspace attribute.http://www.onvif.org/ver10/colorspace/YCbCr - YCbCr colourspacehttp://www.onvif.org/ver10/colorspace/CIELUV - CIE LUVhttp://www.onvif.org/ver10/colorspace/CIELAB - CIE 1976 (L*a*b*)http://www.onvif.org/ver10/colorspace/HSV - HSV colourspace
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class ColorOptions
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class OSDColorOptionsExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class OSDTextOptionsExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class OSDImgOptions
    {
        
        /// <summary>
        /// List of avaiable uris of image.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ImagePath;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public OSDImgOptionsExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class OSDImgOptionsExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class OSDConfigurationOptionsExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetOSD
    {
        
        /// <summary>
        /// Contains the modified OSD configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public OSDConfiguration OSD;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class SetOSDResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class CreateOSD
    {
        
        /// <summary>
        /// Contain the initial OSD configuration for create.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public OSDConfiguration OSD;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class CreateOSDResponse
    {
        
        /// <summary>
        /// Returns Token of the newly created OSD
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string OSDToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class DeleteOSD
    {
        
        /// <summary>
        /// This element contains a reference to the OSD configuration that should be deleted.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string OSDToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/media/wsdl")]
    public class DeleteOSDResponse
    {
    }
}
