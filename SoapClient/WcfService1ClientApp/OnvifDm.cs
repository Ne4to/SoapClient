//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AstroSoft.WindowsStore.Onvif.Proxies.OnvifServices.DeviceManagement
{
    
    
    public interface Device
    {
        
        /// <summary>
        /// Returns information about services on the device.
        /// </summary>
        System.Threading.Tasks.Task<GetServicesResponse> GetServicesAsync(GetServicesRequest request);
        
        /// <summary>
        /// Returns the capabilities of the device service. The result is returned in a typed answer.
        /// </summary>
        System.Threading.Tasks.Task<GetServiceCapabilitiesResponse> GetServiceCapabilitiesAsync(GetServiceCapabilitiesRequest request);
        
        /// <summary>
        /// This operation gets basic device information from the device.
        /// </summary>
        System.Threading.Tasks.Task<GetDeviceInformationResponse> GetDeviceInformationAsync(GetDeviceInformationRequest request);
        
        /// <summary>
        /// This operation sets the device system date and time. The device shall support the
        ///				configuration of the daylight saving setting and of the manual system date and time (if
        ///				applicable) or indication of NTP time (if applicable) through the SetSystemDateAndTime
        ///				command. 
        ///				If system time and date are set manually, the client shall include UTCDateTime in the request.
        ///				A TimeZone token which is not formed according to the rules of IEEE 1003.1 section 8.3 is considered as invalid timezone.
        ///				The DayLightSavings flag should be set to true to activate any DST settings of the TimeZone string. 
        ///				Clear the DayLightSavings flag if the DST portion of the TimeZone settings should be ignored.
        ///			
        /// </summary>
        System.Threading.Tasks.Task<SetSystemDateAndTimeResponse> SetSystemDateAndTimeAsync(SetSystemDateAndTimeRequest request);
        
        /// <summary>
        /// This operation gets the device system date and time. The device shall support the return of
        ///				the daylight saving setting and of the manual system date and time (if applicable) or indication
        ///				of NTP time (if applicable) through the GetSystemDateAndTime command.
        ///				A device shall provide the UTCDateTime information.
        /// </summary>
        System.Threading.Tasks.Task<GetSystemDateAndTimeResponse> GetSystemDateAndTimeAsync(GetSystemDateAndTimeRequest request);
        
        /// <summary>
        /// This operation reloads the parameters on the device to their factory default values.
        /// </summary>
        System.Threading.Tasks.Task<SetSystemFactoryDefaultResponse> SetSystemFactoryDefaultAsync(SetSystemFactoryDefaultRequest request);
        
        /// <summary>
        /// This operation upgrades a device firmware version. After a successful upgrade the response
        ///				message is sent before the device reboots. The device should support firmware upgrade
        ///				through the UpgradeSystemFirmware command. The exact format of the firmware data is
        ///				outside the scope of this standard.
        /// </summary>
        System.Threading.Tasks.Task<UpgradeSystemFirmwareResponse> UpgradeSystemFirmwareAsync(UpgradeSystemFirmwareRequest request);
        
        /// <summary>
        /// This operation reboots the device.
        /// </summary>
        System.Threading.Tasks.Task<SystemRebootResponse> SystemRebootAsync(SystemRebootRequest request);
        
        /// <summary>
        /// This operation restores the system backup configuration files(s) previously retrieved from a
        ///				device. The device should support restore of backup configuration file(s) through the
        ///				RestoreSystem command. The exact format of the backup configuration file(s) is outside the
        ///				scope of this standard. If the command is supported, it shall accept backup files returned by
        ///				the GetSystemBackup command.
        /// </summary>
        System.Threading.Tasks.Task<RestoreSystemResponse> RestoreSystemAsync(RestoreSystemRequest request);
        
        /// <summary>
        /// This operation is retrieves system backup configuration file(s) from a device. The device
        ///				should support return of back up configuration file(s) through the GetSystemBackup command.
        ///				The backup is returned with reference to a name and mime-type together with binary data.
        ///				The exact format of the backup configuration files is outside the scope of this standard.
        /// </summary>
        System.Threading.Tasks.Task<GetSystemBackupResponse> GetSystemBackupAsync(GetSystemBackupRequest request);
        
        /// <summary>
        /// This operation gets a system log from the device. The exact format of the system logs is outside the scope of this standard.
        /// </summary>
        System.Threading.Tasks.Task<GetSystemLogResponse> GetSystemLogAsync(GetSystemLogRequest request);
        
        /// <summary>
        /// This operation gets arbitary device diagnostics information from the device.
        /// </summary>
        System.Threading.Tasks.Task<GetSystemSupportInformationResponse> GetSystemSupportInformationAsync(GetSystemSupportInformationRequest request);
        
        /// <summary>
        /// This operation requests the scope parameters of a device. The scope parameters are used in
        ///				the device discovery to match a probe message, see Section 7. The Scope parameters are of
        ///				two different types: FixedConfigurable
        ///				Fixed scope parameters are permanent device characteristics and cannot be removed through the device management interface. 
        ///				The scope type is indicated in the scope list returned in the get scope parameters response. A device shall support 
        ///				retrieval of discovery scope parameters through the GetScopes command. As some scope parameters are mandatory, 
        ///				the device shall return a non-empty scope list in the response.
        /// </summary>
        System.Threading.Tasks.Task<GetScopesResponse> GetScopesAsync(GetScopesRequest request);
        
        /// <summary>
        /// This operation sets the scope parameters of a device. The scope parameters are used in the
        ///				device discovery to match a probe message.
        ///				This operation replaces all existing configurable scope parameters (not fixed parameters). If
        ///				this shall be avoided, one should use the scope add command instead. The device shall
        ///				support configuration of discovery scope parameters through the SetScopes command.
        /// </summary>
        System.Threading.Tasks.Task<SetScopesResponse> SetScopesAsync(SetScopesRequest request);
        
        /// <summary>
        /// This operation adds new configurable scope parameters to a device. The scope parameters
        ///				are used in the device discovery to match a probe message. The device shall
        ///				support addition of discovery scope parameters through the AddScopes command.
        /// </summary>
        System.Threading.Tasks.Task<AddScopesResponse> AddScopesAsync(AddScopesRequest request);
        
        /// <summary>
        /// This operation deletes scope-configurable scope parameters from a device. The scope
        ///				parameters are used in the device discovery to match a probe message, see Section 7. The
        ///				device shall support deletion of discovery scope parameters through the RemoveScopes
        ///				command.
        ///				Table
        /// </summary>
        System.Threading.Tasks.Task<RemoveScopesResponse> RemoveScopesAsync(RemoveScopesRequest request);
        
        /// <summary>
        /// This operation gets the discovery mode of a device. See Section 7.2 for the definition of the
        ///				different device discovery modes. The device shall support retrieval of the discovery mode
        ///				setting through the GetDiscoveryMode command.
        /// </summary>
        System.Threading.Tasks.Task<GetDiscoveryModeResponse> GetDiscoveryModeAsync(GetDiscoveryModeRequest request);
        
        /// <summary>
        /// This operation sets the discovery mode operation of a device. See Section 7.2 for the
        ///				definition of the different device discovery modes. The device shall support configuration of
        ///				the discovery mode setting through the SetDiscoveryMode command.
        /// </summary>
        System.Threading.Tasks.Task<SetDiscoveryModeResponse> SetDiscoveryModeAsync(SetDiscoveryModeRequest request);
        
        /// <summary>
        /// This operation gets the remote discovery mode of a device. See Section 7.4 for the definition
        ///				of remote discovery extensions. A device that supports remote discovery shall support
        ///				retrieval of the remote discovery mode setting through the GetRemoteDiscoveryMode
        ///				command.
        /// </summary>
        System.Threading.Tasks.Task<GetRemoteDiscoveryModeResponse> GetRemoteDiscoveryModeAsync(GetRemoteDiscoveryModeRequest request);
        
        /// <summary>
        /// This operation sets the remote discovery mode of operation of a device. See Section 7.4 for
        ///				the definition of remote discovery remote extensions. A device that supports remote discovery
        ///				shall support configuration of the discovery mode setting through the
        ///				SetRemoteDiscoveryMode command.
        /// </summary>
        System.Threading.Tasks.Task<SetRemoteDiscoveryModeResponse> SetRemoteDiscoveryModeAsync(SetRemoteDiscoveryModeRequest request);
        
        /// <summary>
        /// This operation gets the remote DP address or addresses from a device. If the device supports
        ///				remote discovery, as specified in Section 7.4, the device shall support retrieval of the remote
        ///				DP address(es) through the GetDPAddresses command.
        /// </summary>
        System.Threading.Tasks.Task<GetDPAddressesResponse> GetDPAddressesAsync(GetDPAddressesRequest request);
        
        /// <summary>
        /// This operation sets the remote DP address or addresses on a device. If the device supports
        ///				remote discovery, as specified in Section 7.4, the device shall support configuration of the
        ///				remote DP address(es) through the SetDPAddresses command.
        /// </summary>
        System.Threading.Tasks.Task<SetDPAddressesResponse> SetDPAddressesAsync(SetDPAddressesRequest request);
        
        /// <summary>
        /// A client can ask for the device service endpoint reference address property that can be used
        ///				to derive the password equivalent for remote user operation. The device shall support the
        ///				GetEndpointReference command returning the address property of the device service
        ///				endpoint reference.
        /// </summary>
        System.Threading.Tasks.Task<GetEndpointReferenceResponse> GetEndpointReferenceAsync(GetEndpointReferenceRequest request);
        
        /// <summary>
        /// This operation returns the configured remote user (if any). A device supporting remote user
        ///				handling shall support this operation. The user is only valid for the WS-UserToken profile or
        ///				as a HTTP / RTSP user.
        ///				The algorithm to use for deriving the password is described in section 5.12.2.1 of the core specification.
        /// </summary>
        System.Threading.Tasks.Task<GetRemoteUserResponse> GetRemoteUserAsync(GetRemoteUserRequest request);
        
        /// <summary>
        /// This operation sets the remote user. A device supporting remote user handling shall support this
        ///				operation. The user is only valid for the WS-UserToken profile or as a HTTP / RTSP user.
        ///				The password that is set shall always be the original (not derived) password.
        ///				If UseDerivedPassword is set password derivation shall be done by the device when connecting to a
        ///				remote device.The algorithm to use for deriving the password is described in section 5.12.2.1 of the core specification.
        ///				To remove the remote user SetRemoteUser should be called without the RemoteUser parameter.
        /// </summary>
        System.Threading.Tasks.Task<SetRemoteUserResponse> SetRemoteUserAsync(SetRemoteUserRequest request);
        
        /// <summary>
        /// This operation lists the registered users and corresponding credentials on a device. The
        ///				device shall support retrieval of registered device users and their credentials for the user
        ///				token through the GetUsers command.
        /// </summary>
        System.Threading.Tasks.Task<GetUsersResponse> GetUsersAsync(GetUsersRequest request);
        
        /// <summary>
        /// This operation creates new device users and corresponding credentials on a device for authentication purposes. 
        ///				The device shall support creation of device users and their credentials through the CreateUsers
        ///				command. Either all users are created successfully or a fault message shall be returned
        ///				without creating any user.
        ///				ONVIF compliant devices are recommended to support password length of at least 28 bytes,
        ///				as clients may follow the password derivation mechanism which results in 'password
        ///				equivalent' of length 28 bytes, as described in section 3.1.2 of the ONVIF security white paper.
        /// </summary>
        System.Threading.Tasks.Task<CreateUsersResponse> CreateUsersAsync(CreateUsersRequest request);
        
        /// <summary>
        /// This operation deletes users on a device. The device shall support deletion of device users and their credentials 
        ///				through the DeleteUsers command. A device may have one or more fixed users
        ///				that cannot be deleted to ensure access to the unit. Either all users are deleted successfully or a
        ///				fault message shall be returned and no users be deleted.
        /// </summary>
        System.Threading.Tasks.Task<DeleteUsersResponse> DeleteUsersAsync(DeleteUsersRequest request);
        
        /// <summary>
        /// This operation updates the settings for one or several users on a device for authentication purposes.
        ///				The device shall support update of device users and their credentials through the SetUser command. 
        ///				Either all change requests are processed successfully or a fault message shall be returned and no change requests be processed.
        /// </summary>
        System.Threading.Tasks.Task<SetUserResponse> SetUserAsync(SetUserRequest request);
        
        /// <summary>
        /// It is possible for an endpoint to request a URL that can be used to retrieve the complete
        ///				schema and WSDL definitions of a device. The command gives in return a URL entry point
        ///				where all the necessary product specific WSDL and schema definitions can be retrieved. The
        ///				device shall provide a URL for WSDL and schema download through the GetWsdlUrl command.
        /// </summary>
        System.Threading.Tasks.Task<GetWsdlUrlResponse> GetWsdlUrlAsync(GetWsdlUrlRequest request);
        
        /// <summary>
        /// Any endpoint can ask for the capabilities of a device using the capability exchange request
        ///				response operation. The device shall indicate all its ONVIF compliant capabilities through the
        ///				GetCapabilities command.
        ///				The capability list includes references to the addresses (XAddr) of the service implementing
        ///				the interface operations in the category. Apart from the addresses, the
        ///				capabilities only reflect optional functions.
        /// </summary>
        System.Threading.Tasks.Task<GetCapabilitiesResponse> GetCapabilitiesAsync(GetCapabilitiesRequest request);
        
        /// <summary>
        /// This operation is used by an endpoint to get the hostname from a device. The device shall
        ///				return its hostname configurations through the GetHostname command.
        /// </summary>
        System.Threading.Tasks.Task<GetHostnameResponse> GetHostnameAsync(GetHostnameRequest request);
        
        /// <summary>
        /// This operation sets the hostname on a device. It shall be possible to set the device hostname
        ///				configurations through the SetHostname command.
        ///				A device shall accept string formated according to RFC 1123 section 2.1 or alternatively to RFC 952, 
        ///				other string shall be considered as invalid strings. 
        ///			
        /// </summary>
        System.Threading.Tasks.Task<SetHostnameResponse> SetHostnameAsync(SetHostnameRequest request);
        
        /// <summary>
        /// This operation controls whether the hostname is set manually or retrieved via DHCP.
        /// </summary>
        System.Threading.Tasks.Task<SetHostnameFromDHCPResponse> SetHostnameFromDHCPAsync(SetHostnameFromDHCPRequest request);
        
        /// <summary>
        /// This operation gets the DNS settings from a device. The device shall return its DNS
        ///				configurations through the GetDNS command.
        /// </summary>
        System.Threading.Tasks.Task<GetDNSResponse> GetDNSAsync(GetDNSRequest request);
        
        /// <summary>
        /// This operation sets the DNS settings on a device. It shall be possible to set the device DNS
        ///				configurations through the SetDNS command.
        /// </summary>
        System.Threading.Tasks.Task<SetDNSResponse> SetDNSAsync(SetDNSRequest request);
        
        /// <summary>
        /// This operation gets the NTP settings from a device. If the device supports NTP, it shall be
        ///				possible to get the NTP server settings through the GetNTP command.
        /// </summary>
        System.Threading.Tasks.Task<GetNTPResponse> GetNTPAsync(GetNTPRequest request);
        
        /// <summary>
        /// This operation sets the NTP settings on a device. If the device supports NTP, it shall be
        ///				possible to set the NTP server settings through the SetNTP command.
        ///				A device shall accept string formated according to RFC 1123 section 2.1 or alternatively to RFC 952, 
        ///				other string shall be considered as invalid strings. 
        ///				Changes to the NTP server list will not affect the clock mode DateTimeType. Use SetSystemDateAndTime to activate NTP operation.
        ///			
        /// </summary>
        System.Threading.Tasks.Task<SetNTPResponse> SetNTPAsync(SetNTPRequest request);
        
        /// <summary>
        /// This operation gets the dynamic DNS settings from a device. If the device supports dynamic
        ///				DNS as specified in [RFC 2136] and [RFC 4702], it shall be possible to get the type, name
        ///				and TTL through the GetDynamicDNS command.
        /// </summary>
        System.Threading.Tasks.Task<GetDynamicDNSResponse> GetDynamicDNSAsync(GetDynamicDNSRequest request);
        
        /// <summary>
        /// This operation sets the dynamic DNS settings on a device. If the device supports dynamic
        ///				DNS as specified in [RFC 2136] and [RFC 4702], it shall be possible to set the type, name
        ///				and TTL through the SetDynamicDNS command.
        /// </summary>
        System.Threading.Tasks.Task<SetDynamicDNSResponse> SetDynamicDNSAsync(SetDynamicDNSRequest request);
        
        /// <summary>
        /// This operation gets the network interface configuration from a device. The device shall
        ///				support return of network interface configuration settings as defined by the NetworkInterface
        ///				type through the GetNetworkInterfaces command.
        /// </summary>
        System.Threading.Tasks.Task<GetNetworkInterfacesResponse> GetNetworkInterfacesAsync(GetNetworkInterfacesRequest request);
        
        /// <summary>
        /// This operation sets the network interface configuration on a device. The device shall support
        ///				network configuration of supported network interfaces through the SetNetworkInterfaces
        ///				command.
        ///				For interoperability with a client unaware of the IEEE 802.11 extension a device shall retain
        ///				its IEEE 802.11 configuration if the IEEE 802.11 configuration element isn’t present in the
        ///				request.
        /// </summary>
        System.Threading.Tasks.Task<SetNetworkInterfacesResponse> SetNetworkInterfacesAsync(SetNetworkInterfacesRequest request);
        
        /// <summary>
        /// This operation gets defined network protocols from a device. The device shall support the
        ///				GetNetworkProtocols command returning configured network protocols.
        /// </summary>
        System.Threading.Tasks.Task<GetNetworkProtocolsResponse> GetNetworkProtocolsAsync(GetNetworkProtocolsRequest request);
        
        /// <summary>
        /// This operation configures defined network protocols on a device. The device shall support
        ///				configuration of defined network protocols through the SetNetworkProtocols command.
        /// </summary>
        System.Threading.Tasks.Task<SetNetworkProtocolsResponse> SetNetworkProtocolsAsync(SetNetworkProtocolsRequest request);
        
        /// <summary>
        /// This operation gets the default gateway settings from a device. The device shall support the
        ///				GetNetworkDefaultGateway command returning configured default gateway address(es).
        /// </summary>
        System.Threading.Tasks.Task<GetNetworkDefaultGatewayResponse> GetNetworkDefaultGatewayAsync(GetNetworkDefaultGatewayRequest request);
        
        /// <summary>
        /// This operation sets the default gateway settings on a device. The device shall support
        ///				configuration of default gateway through the SetNetworkDefaultGateway command.
        /// </summary>
        System.Threading.Tasks.Task<SetNetworkDefaultGatewayResponse> SetNetworkDefaultGatewayAsync(SetNetworkDefaultGatewayRequest request);
        
        /// <summary>
        /// This operation gets the zero-configuration from a device. If the device supports dynamic IP
        ///				configuration according to [RFC3927], it shall support the return of IPv4 zero configuration
        ///				address and status through the GetZeroConfiguration command.
        ///			Devices supporting zero configuration on more than one interface shall use the extension to list the additional interface settings.
        /// </summary>
        System.Threading.Tasks.Task<GetZeroConfigurationResponse> GetZeroConfigurationAsync(GetZeroConfigurationRequest request);
        
        /// <summary>
        /// This operation sets the zero-configuration. Use GetCapalities to get if zero-zero-configuration is supported or not.
        /// </summary>
        System.Threading.Tasks.Task<SetZeroConfigurationResponse> SetZeroConfigurationAsync(SetZeroConfigurationRequest request);
        
        /// <summary>
        /// This operation gets the IP address filter settings from a device. If the device supports device
        ///				access control based on IP filtering rules (denied or accepted ranges of IP addresses), the
        ///				device shall support the GetIPAddressFilter command.
        /// </summary>
        System.Threading.Tasks.Task<GetIPAddressFilterResponse> GetIPAddressFilterAsync(GetIPAddressFilterRequest request);
        
        /// <summary>
        /// This operation sets the IP address filter settings on a device. If the device supports device
        ///				access control based on IP filtering rules (denied or accepted ranges of IP addresses), the
        ///				device shall support configuration of IP filtering rules through the SetIPAddressFilter
        ///				command.
        /// </summary>
        System.Threading.Tasks.Task<SetIPAddressFilterResponse> SetIPAddressFilterAsync(SetIPAddressFilterRequest request);
        
        /// <summary>
        /// This operation adds an IP filter address to a device. If the device supports device access
        ///				control based on IP filtering rules (denied or accepted ranges of IP addresses), the device
        ///				shall support adding of IP filtering addresses through the AddIPAddressFilter command.
        /// </summary>
        System.Threading.Tasks.Task<AddIPAddressFilterResponse> AddIPAddressFilterAsync(AddIPAddressFilterRequest request);
        
        /// <summary>
        /// This operation deletes an IP filter address from a device. If the device supports device access
        ///				control based on IP filtering rules (denied or accepted ranges of IP addresses), the device
        ///				shall support deletion of IP filtering addresses through the RemoveIPAddressFilter command.
        /// </summary>
        System.Threading.Tasks.Task<RemoveIPAddressFilterResponse> RemoveIPAddressFilterAsync(RemoveIPAddressFilterRequest request);
        
        /// <summary>
        /// Access to different services and sub-sets of services should be subject to access control. The
        ///				WS-Security framework gives the prerequisite for end-point authentication. Authorization
        ///				decisions can then be taken using an access security policy. This standard does not mandate
        ///				any particular policy description format or security policy but this is up to the device
        ///				manufacturer or system provider to choose policy and policy description format of choice.
        ///				However, an access policy (in arbitrary format) can be requested using this command. If the
        ///				device supports access policy settings based on WS-Security authentication, then the device
        ///				shall support this command.
        /// </summary>
        System.Threading.Tasks.Task<GetAccessPolicyResponse> GetAccessPolicyAsync(GetAccessPolicyRequest request);
        
        /// <summary>
        /// This command sets the device access security policy (for more details on the access security
        ///				policy see the Get command). If the device supports access policy settings
        ///				based on WS-Security authentication, then the device shall support this command.
        /// </summary>
        System.Threading.Tasks.Task<SetAccessPolicyResponse> SetAccessPolicyAsync(SetAccessPolicyRequest request);
        
        /// <summary>
        /// This operation generates a private/public key pair and also can create a self-signed device
        ///				certificate as a result of key pair generation. The certificate is created using a suitable
        ///				onboard key pair generation mechanism.
        ///				If a device supports onboard key pair generation, the device that supports TLS shall support
        ///				this certificate creation command. And also, if a device supports onboard key pair generation,
        ///				the device that support IEEE 802.1X shall support this command for the purpose of key pair
        ///				generation. Certificates and key pairs are identified using certificate IDs. These IDs are either
        ///				chosen by the certificate generation requester or by the device (in case that no ID value is
        ///				given).
        /// </summary>
        System.Threading.Tasks.Task<CreateCertificateResponse> CreateCertificateAsync(CreateCertificateRequest request);
        
        /// <summary>
        /// This operation gets all device server certificates (including self-signed) for the purpose of TLS
        ///				authentication and all device client certificates for the purpose of IEEE 802.1X authentication.
        ///				This command lists only the TLS server certificates and IEEE 802.1X client certificates for the
        ///				device (neither trusted CA certificates nor trusted root certificates). The certificates are
        ///				returned as binary data. A device that supports TLS shall support this command and the
        ///				certificates shall be encoded using ASN.1 [X.681], [X.682], [X.683] DER [X.690] encoding
        ///				rules.
        /// </summary>
        System.Threading.Tasks.Task<GetCertificatesResponse> GetCertificatesAsync(GetCertificatesRequest request);
        
        /// <summary>
        /// This operation is specific to TLS functionality. This operation gets the status
        ///				(enabled/disabled) of the device TLS server certificates. A device that supports TLS shall
        ///				support this command.
        /// </summary>
        System.Threading.Tasks.Task<GetCertificatesStatusResponse> GetCertificatesStatusAsync(GetCertificatesStatusRequest request);
        
        /// <summary>
        /// This operation is specific to TLS functionality. This operation sets the status (enable/disable)
        ///				of the device TLS server certificates. A device that supports TLS shall support this command.
        ///				Typically only one device server certificate is allowed to be enabled at a time.
        /// </summary>
        System.Threading.Tasks.Task<SetCertificatesStatusResponse> SetCertificatesStatusAsync(SetCertificatesStatusRequest request);
        
        /// <summary>
        /// This operation deletes a certificate or multiple certificates. The device MAY also delete a
        ///				private/public key pair which is coupled with the certificate to be deleted. The device that
        ///				support either TLS or IEEE 802.1X shall support the deletion of a certificate or multiple
        ///				certificates through this command. Either all certificates are deleted successfully or a fault
        ///				message shall be returned without deleting any certificate.
        /// </summary>
        System.Threading.Tasks.Task<DeleteCertificatesResponse> DeleteCertificatesAsync(DeleteCertificatesRequest request);
        
        /// <summary>
        /// This operation requests a PKCS #10 certificate signature request from the device. The
        ///				returned information field shall be either formatted exactly as specified in [PKCS#10] or PEM
        ///				encoded [PKCS#10] format. In order for this command to work, the device must already have
        ///				a private/public key pair. This key pair should be referred by CertificateID as specified in the
        ///				input parameter description. This CertificateID refers to the key pair generated using
        ///				CreateCertificate command.
        ///				A device that support onboard key pair generation that supports either TLS or IEEE 802.1X
        ///				using client certificate shall support this command.
        /// </summary>
        System.Threading.Tasks.Task<GetPkcs10RequestResponse> GetPkcs10RequestAsync(GetPkcs10RequestRequest request);
        
        /// <summary>
        /// TLS server certificate(s) or IEEE 802.1X client certificate(s) created using the PKCS#10
        ///				certificate request command can be loaded into the device using this command (see Section
        ///				8.4.13). The certificate ID in the request shall be present. The device may sort the received
        ///				certificate(s) based on the public key and subject information in the certificate(s).
        ///				The certificate ID in the request will be the ID value the client wish to have. The device is
        ///				supposed to scan the generated key pairs present in the device to identify which is the
        ///				correspondent key pair with the loaded certificate and then make the link between the
        ///				certificate and the key pair.
        ///				A device that supports onboard key pair generation that support either TLS or IEEE 802.1X
        ///				shall support this command.
        ///				The certificates shall be encoded using ASN.1 [X.681], [X.682], [X.683] DER [X.690] encoding
        ///				rules.
        ///				This command is applicable to any device type, although the parameter name is called for
        ///				historical reasons NVTCertificate.
        /// </summary>
        System.Threading.Tasks.Task<LoadCertificatesResponse> LoadCertificatesAsync(LoadCertificatesRequest request);
        
        /// <summary>
        /// This operation is specific to TLS functionality. This operation gets the status
        ///				(enabled/disabled) of the device TLS client authentication. A device that supports TLS shall
        ///				support this command.
        /// </summary>
        System.Threading.Tasks.Task<GetClientCertificateModeResponse> GetClientCertificateModeAsync(GetClientCertificateModeRequest request);
        
        /// <summary>
        /// This operation is specific to TLS functionality. This operation sets the status
        ///				(enabled/disabled) of the device TLS client authentication. A device that supports TLS shall
        ///				support this command.
        /// </summary>
        System.Threading.Tasks.Task<SetClientCertificateModeResponse> SetClientCertificateModeAsync(SetClientCertificateModeRequest request);
        
        /// <summary>
        /// This operation gets a list of all available relay outputs and their settings.
        ///				This method has been depricated with version 2.0. Refer to the DeviceIO service.
        /// </summary>
        System.Threading.Tasks.Task<GetRelayOutputsResponse> GetRelayOutputsAsync(GetRelayOutputsRequest request);
        
        /// <summary>
        /// This operation sets the settings of a relay output.
        ///				This method has been depricated with version 2.0. Refer to the DeviceIO service.
        /// </summary>
        System.Threading.Tasks.Task<SetRelayOutputSettingsResponse> SetRelayOutputSettingsAsync(SetRelayOutputSettingsRequest request);
        
        /// <summary>
        /// This operation sets the state of a relay output.
        ///				This method has been depricated with version 2.0. Refer to the DeviceIO service.
        /// </summary>
        System.Threading.Tasks.Task<SetRelayOutputStateResponse> SetRelayOutputStateAsync(SetRelayOutputStateRequest request);
        
        /// <summary>
        /// Manage auxiliary commands supported by a device, such as controlling an Infrared (IR) lamp, 
        ///				a heater or a wiper or a thermometer that is connected to the device.
        ///				The supported commands can be retrieved via the AuxiliaryCommands capability.
        ///				Although the name of the auxiliary commands can be freely defined, commands starting with the prefix tt: are 
        ///				reserved to define frequently used commands and these reserved commands shall all share the "tt:command|parameter" syntax.
        ///				tt:Wiper|On – Request to start the wiper.tt:Wiper|Off – Request to stop the wiper.tt:Washer|On – Request to start the washer.tt:Washer|Off – Request to stop the washer.tt:WashingProcedure|On – Request to start the washing procedure.tt: WashingProcedure |Off – Request to stop the washing procedure.tt:IRLamp|On – Request to turn ON an IR illuminator attached to the unit.tt:IRLamp|Off – Request to turn OFF an IR illuminator attached to the unit.tt:IRLamp|Auto – Request to configure an IR illuminator attached to the unit so that it automatically turns ON and OFF.
        ///				A device that indicates auxiliary service capability shall support this command.
        /// </summary>
        System.Threading.Tasks.Task<SendAuxiliaryCommandResponse> SendAuxiliaryCommandAsync(SendAuxiliaryCommandRequest request);
        
        /// <summary>
        /// CA certificates will be loaded into a device and be used for the sake of following two cases.
        ///				The one is for the purpose of TLS client authentication in TLS server function. The other one
        ///				is for the purpose of Authentication Server authentication in IEEE 802.1X function. This
        ///				operation gets all CA certificates loaded into a device. A device that supports either TLS client
        ///				authentication or IEEE 802.1X shall support this command and the returned certificates shall
        ///				be encoded using ASN.1 [X.681], [X.682], [X.683] DER [X.690] encoding rules.
        /// </summary>
        System.Threading.Tasks.Task<GetCACertificatesResponse> GetCACertificatesAsync(GetCACertificatesRequest request);
        
        /// <summary>
        /// There might be some cases that a Certificate Authority or some other equivalent creates a
        ///				certificate without having PKCS#10 certificate signing request. In such cases, the certificate
        ///				will be bundled in conjunction with its private key. This command will be used for such use
        ///				case scenarios. The certificate ID in the request is optionally set to the ID value the client
        ///				wish to have. If the certificate ID is not specified in the request, device can choose the ID
        ///				accordingly.
        ///				This operation imports a private/public key pair into the device.
        ///				The certificates shall be encoded using ASN.1 [X.681], [X.682], [X.683] DER [X.690] encoding
        ///				rules.
        ///				A device that does not support onboard key pair generation and support either TLS or IEEE
        ///				802.1X using client certificate shall support this command. A device that support onboard key
        ///				pair generation MAY support this command. The security policy of a device that supports this
        ///				operation should make sure that the private key is sufficiently protected.
        /// </summary>
        System.Threading.Tasks.Task<LoadCertificateWithPrivateKeyResponse> LoadCertificateWithPrivateKeyAsync(LoadCertificateWithPrivateKeyRequest request);
        
        /// <summary>
        /// This operation requests the information of a certificate specified by certificate ID. The device
        ///				should respond with its “Issuer DN”, “Subject DN”, “Key usage”, "Extended key usage”, “Key
        ///				Length”, “Version”, “Serial Number”, “Signature Algorithm” and “Validity” data as the
        ///				information of the certificate, as long as the device can retrieve such information from the
        ///				specified certificate.
        ///				A device that supports either TLS or IEEE 802.1X should support this command.
        /// </summary>
        System.Threading.Tasks.Task<GetCertificateInformationResponse> GetCertificateInformationAsync(GetCertificateInformationRequest request);
        
        /// <summary>
        /// This command is used when it is necessary to load trusted CA certificates or trusted root
        ///				certificates for the purpose of verification for its counterpart i.e. client certificate verification in
        ///				TLS function or server certificate verification in IEEE 802.1X function.
        ///				A device that support either TLS or IEEE 802.1X shall support this command. As for the
        ///				supported certificate format, either DER format or PEM format is possible to be used. But a
        ///				device that support this command shall support at least DER format as supported format type.
        ///				The device may sort the received certificate(s) based on the public key and subject
        ///				information in the certificate(s). Either all CA certificates are loaded successfully or a fault
        ///				message shall be returned without loading any CA certificate.
        /// </summary>
        System.Threading.Tasks.Task<LoadCACertificatesResponse> LoadCACertificatesAsync(LoadCACertificatesRequest request);
        
        /// <summary>
        /// This operation newly creates IEEE 802.1X configuration parameter set of the device. The
        ///				device shall support this command if it supports IEEE 802.1X. If the device receives this
        ///				request with already existing configuration token (Dot1XConfigurationToken) specification, the
        ///				device should respond with 'ter:ReferenceToken ' error to indicate there is some configuration
        ///				conflict.
        /// </summary>
        System.Threading.Tasks.Task<CreateDot1XConfigurationResponse> CreateDot1XConfigurationAsync(CreateDot1XConfigurationRequest request);
        
        /// <summary>
        /// While the CreateDot1XConfiguration command is trying to create a new configuration
        ///				parameter set, this operation modifies existing IEEE 802.1X configuration parameter set of
        ///				the device. A device that support IEEE 802.1X shall support this command.
        /// </summary>
        System.Threading.Tasks.Task<SetDot1XConfigurationResponse> SetDot1XConfigurationAsync(SetDot1XConfigurationRequest request);
        
        /// <summary>
        /// This operation gets one IEEE 802.1X configuration parameter set from the device by
        ///				specifying the configuration token (Dot1XConfigurationToken).
        ///				A device that supports IEEE 802.1X shall support this command.
        ///				Regardless of whether the 802.1X method in the retrieved configuration has a password or
        ///				not, the device shall not include the Password element in the response.
        /// </summary>
        System.Threading.Tasks.Task<GetDot1XConfigurationResponse> GetDot1XConfigurationAsync(GetDot1XConfigurationRequest request);
        
        /// <summary>
        /// This operation gets all the existing IEEE 802.1X configuration parameter sets from the device.
        ///				The device shall respond with all the IEEE 802.1X configurations so that the client can get to
        ///				know how many IEEE 802.1X configurations are existing and how they are configured.
        ///				A device that support IEEE 802.1X shall support this command.
        ///				Regardless of whether the 802.1X method in the retrieved configuration has a password or
        ///				not, the device shall not include the Password element in the response.
        /// </summary>
        System.Threading.Tasks.Task<GetDot1XConfigurationsResponse> GetDot1XConfigurationsAsync(GetDot1XConfigurationsRequest request);
        
        /// <summary>
        /// This operation deletes an IEEE 802.1X configuration parameter set from the device. Which
        ///				configuration should be deleted is specified by the 'Dot1XConfigurationToken' in the request.
        ///				A device that support IEEE 802.1X shall support this command.
        /// </summary>
        System.Threading.Tasks.Task<DeleteDot1XConfigurationResponse> DeleteDot1XConfigurationAsync(DeleteDot1XConfigurationRequest request);
        
        /// <summary>
        /// This operation returns the IEEE802.11 capabilities. The device shall support
        ///				this operation.
        /// </summary>
        System.Threading.Tasks.Task<GetDot11CapabilitiesResponse> GetDot11CapabilitiesAsync(GetDot11CapabilitiesRequest request);
        
        /// <summary>
        /// This operation returns the status of a wireless network interface. The device shall support this
        ///				command.
        /// </summary>
        System.Threading.Tasks.Task<GetDot11StatusResponse> GetDot11StatusAsync(GetDot11StatusRequest request);
        
        /// <summary>
        /// This operation returns a lists of the wireless networks in range of the device. A device should
        ///				support this operation.
        /// </summary>
        System.Threading.Tasks.Task<ScanAvailableDot11NetworksResponse> ScanAvailableDot11NetworksAsync(ScanAvailableDot11NetworksRequest request);
        
        /// <summary>
        /// This operation is used to retrieve URIs from which system information may be downloaded
        ///				using HTTP. URIs may be returned for the following system information:
        ///				System Logs. Multiple system logs may be returned, of different types. The exact format of
        ///				the system logs is outside the scope of this specification.
        ///				Support Information. This consists of arbitrary device diagnostics information from a device.
        ///				The exact format of the diagnostic information is outside the scope of this specification.
        ///				System Backup. The received file is a backup file that can be used to restore the current
        ///				device configuration at a later date. The exact format of the backup configuration file is
        ///				outside the scope of this specification.
        ///				If the device allows retrieval of system logs, support information or system backup data, it
        ///				should make them available via HTTP GET. If it does, it shall support the GetSystemUris
        ///				command.
        /// </summary>
        System.Threading.Tasks.Task<GetSystemUrisResponse> GetSystemUrisAsync(GetSystemUrisRequest request);
        
        /// <summary>
        /// This operation initiates a firmware upgrade using the HTTP POST mechanism. The response
        ///				to the command includes an HTTP URL to which the upgrade file may be uploaded. The
        ///				actual upgrade takes place as soon as the HTTP POST operation has completed. The device
        ///				should support firmware upgrade through the StartFirmwareUpgrade command. The exact
        ///				format of the firmware data is outside the scope of this specification.
        ///				Firmware upgrade over HTTP may be achieved using the following steps:Client calls StartFirmwareUpgrade.Server responds with upload URI and optional delay value.Client waits for delay duration if specified by server.Client transmits the firmware image to the upload URI using HTTP POST.Server reprograms itself using the uploaded image, then reboots.
        ///				If the firmware upgrade fails because the upgrade file was invalid, the HTTP POST response
        ///				shall be “415 Unsupported Media Type”. If the firmware upgrade fails due to an error at the
        ///				device, the HTTP POST response shall be “500 Internal Server Error”.
        ///				The value of the Content-Type header in the HTTP POST request shall be “application/octetstream”.
        /// </summary>
        System.Threading.Tasks.Task<StartFirmwareUpgradeResponse> StartFirmwareUpgradeAsync(StartFirmwareUpgradeRequest request);
        
        /// <summary>
        /// This operation initiates a system restore from backed up configuration data using the HTTP
        ///				POST mechanism. The response to the command includes an HTTP URL to which the backup
        ///				file may be uploaded. The actual restore takes place as soon as the HTTP POST operation
        ///				has completed. Devices should support system restore through the StartSystemRestore
        ///				command. The exact format of the backup configuration data is outside the scope of this
        ///				specification.
        ///				System restore over HTTP may be achieved using the following steps:Client calls StartSystemRestore.Server responds with upload URI.Client transmits the configuration data to the upload URI using HTTP POST.Server applies the uploaded configuration, then reboots if necessary.
        ///				If the system restore fails because the uploaded file was invalid, the HTTP POST response
        ///				shall be “415 Unsupported Media Type”. If the system restore fails due to an error at the
        ///				device, the HTTP POST response shall be “500 Internal Server Error”.
        ///				The value of the Content-Type header in the HTTP POST request shall be “application/octetstream”.
        /// </summary>
        System.Threading.Tasks.Task<StartSystemRestoreResponse> StartSystemRestoreAsync(StartSystemRestoreRequest request);
        
        /// <summary>
        /// 
        ///			This operation lists all existing storage configurations for the device. 
        ///			
        /// </summary>
        System.Threading.Tasks.Task<GetStorageConfigurationsResponse> GetStorageConfigurationsAsync(GetStorageConfigurationsRequest request);
        
        /// <summary>
        /// 
        ///			This operation creates a new storage configuration. 
        ///			The configuration data shall be created in the device and shall be persistent (remain after reboot).
        ///			
        /// </summary>
        System.Threading.Tasks.Task<CreateStorageConfigurationResponse> CreateStorageConfigurationAsync(CreateStorageConfigurationRequest request);
        
        /// <summary>
        /// 
        ///			This operation retrieves the Storage configuration associated with the given storage configuration token.
        ///			
        /// </summary>
        System.Threading.Tasks.Task<GetStorageConfigurationResponse> GetStorageConfigurationAsync(GetStorageConfigurationRequest request);
        
        /// <summary>
        /// 
        ///			This operation modifies an existing Storage configuration.
        ///			
        /// </summary>
        System.Threading.Tasks.Task<SetStorageConfigurationResponse> SetStorageConfigurationAsync(SetStorageConfigurationRequest request);
        
        /// <summary>
        /// 
        ///			This operation deletes the given storage configuration and configuration change shall always be persistent.
        ///			
        /// </summary>
        System.Threading.Tasks.Task<DeleteStorageConfigurationResponse> DeleteStorageConfigurationAsync(DeleteStorageConfigurationRequest request);
    }
    
    public partial class DeviceClient : SoapServices.SoapClientBase, Device
    {
        
        /// <summary>
        /// Returns information about services on the device.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetServicesResponse> GetServicesAsync(GetServicesRequest request)
        {
            return this.CallAsync<GetServicesRequest, GetServicesResponse>(null, request);
        }
        
        /// <summary>
        /// Returns the capabilities of the device service. The result is returned in a typed answer.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetServiceCapabilitiesResponse> GetServiceCapabilitiesAsync(GetServiceCapabilitiesRequest request)
        {
            return this.CallAsync<GetServiceCapabilitiesRequest, GetServiceCapabilitiesResponse>(null, request);
        }
        
        /// <summary>
        /// This operation gets basic device information from the device.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetDeviceInformationResponse> GetDeviceInformationAsync(GetDeviceInformationRequest request)
        {
            return this.CallAsync<GetDeviceInformationRequest, GetDeviceInformationResponse>(null, request);
        }
        
        /// <summary>
        /// This operation sets the device system date and time. The device shall support the
        ///				configuration of the daylight saving setting and of the manual system date and time (if
        ///				applicable) or indication of NTP time (if applicable) through the SetSystemDateAndTime
        ///				command. 
        ///				If system time and date are set manually, the client shall include UTCDateTime in the request.
        ///				A TimeZone token which is not formed according to the rules of IEEE 1003.1 section 8.3 is considered as invalid timezone.
        ///				The DayLightSavings flag should be set to true to activate any DST settings of the TimeZone string. 
        ///				Clear the DayLightSavings flag if the DST portion of the TimeZone settings should be ignored.
        ///			
        /// </summary>
        public virtual System.Threading.Tasks.Task<SetSystemDateAndTimeResponse> SetSystemDateAndTimeAsync(SetSystemDateAndTimeRequest request)
        {
            return this.CallAsync<SetSystemDateAndTimeRequest, SetSystemDateAndTimeResponse>(null, request);
        }
        
        /// <summary>
        /// This operation gets the device system date and time. The device shall support the return of
        ///				the daylight saving setting and of the manual system date and time (if applicable) or indication
        ///				of NTP time (if applicable) through the GetSystemDateAndTime command.
        ///				A device shall provide the UTCDateTime information.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetSystemDateAndTimeResponse> GetSystemDateAndTimeAsync(GetSystemDateAndTimeRequest request)
        {
            return this.CallAsync<GetSystemDateAndTimeRequest, GetSystemDateAndTimeResponse>(null, request);
        }
        
        /// <summary>
        /// This operation reloads the parameters on the device to their factory default values.
        /// </summary>
        public virtual System.Threading.Tasks.Task<SetSystemFactoryDefaultResponse> SetSystemFactoryDefaultAsync(SetSystemFactoryDefaultRequest request)
        {
            return this.CallAsync<SetSystemFactoryDefaultRequest, SetSystemFactoryDefaultResponse>(null, request);
        }
        
        /// <summary>
        /// This operation upgrades a device firmware version. After a successful upgrade the response
        ///				message is sent before the device reboots. The device should support firmware upgrade
        ///				through the UpgradeSystemFirmware command. The exact format of the firmware data is
        ///				outside the scope of this standard.
        /// </summary>
        public virtual System.Threading.Tasks.Task<UpgradeSystemFirmwareResponse> UpgradeSystemFirmwareAsync(UpgradeSystemFirmwareRequest request)
        {
            return this.CallAsync<UpgradeSystemFirmwareRequest, UpgradeSystemFirmwareResponse>(null, request);
        }
        
        /// <summary>
        /// This operation reboots the device.
        /// </summary>
        public virtual System.Threading.Tasks.Task<SystemRebootResponse> SystemRebootAsync(SystemRebootRequest request)
        {
            return this.CallAsync<SystemRebootRequest, SystemRebootResponse>(null, request);
        }
        
        /// <summary>
        /// This operation restores the system backup configuration files(s) previously retrieved from a
        ///				device. The device should support restore of backup configuration file(s) through the
        ///				RestoreSystem command. The exact format of the backup configuration file(s) is outside the
        ///				scope of this standard. If the command is supported, it shall accept backup files returned by
        ///				the GetSystemBackup command.
        /// </summary>
        public virtual System.Threading.Tasks.Task<RestoreSystemResponse> RestoreSystemAsync(RestoreSystemRequest request)
        {
            return this.CallAsync<RestoreSystemRequest, RestoreSystemResponse>(null, request);
        }
        
        /// <summary>
        /// This operation is retrieves system backup configuration file(s) from a device. The device
        ///				should support return of back up configuration file(s) through the GetSystemBackup command.
        ///				The backup is returned with reference to a name and mime-type together with binary data.
        ///				The exact format of the backup configuration files is outside the scope of this standard.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetSystemBackupResponse> GetSystemBackupAsync(GetSystemBackupRequest request)
        {
            return this.CallAsync<GetSystemBackupRequest, GetSystemBackupResponse>(null, request);
        }
        
        /// <summary>
        /// This operation gets a system log from the device. The exact format of the system logs is outside the scope of this standard.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetSystemLogResponse> GetSystemLogAsync(GetSystemLogRequest request)
        {
            return this.CallAsync<GetSystemLogRequest, GetSystemLogResponse>(null, request);
        }
        
        /// <summary>
        /// This operation gets arbitary device diagnostics information from the device.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetSystemSupportInformationResponse> GetSystemSupportInformationAsync(GetSystemSupportInformationRequest request)
        {
            return this.CallAsync<GetSystemSupportInformationRequest, GetSystemSupportInformationResponse>(null, request);
        }
        
        /// <summary>
        /// This operation requests the scope parameters of a device. The scope parameters are used in
        ///				the device discovery to match a probe message, see Section 7. The Scope parameters are of
        ///				two different types: FixedConfigurable
        ///				Fixed scope parameters are permanent device characteristics and cannot be removed through the device management interface. 
        ///				The scope type is indicated in the scope list returned in the get scope parameters response. A device shall support 
        ///				retrieval of discovery scope parameters through the GetScopes command. As some scope parameters are mandatory, 
        ///				the device shall return a non-empty scope list in the response.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetScopesResponse> GetScopesAsync(GetScopesRequest request)
        {
            return this.CallAsync<GetScopesRequest, GetScopesResponse>(null, request);
        }
        
        /// <summary>
        /// This operation sets the scope parameters of a device. The scope parameters are used in the
        ///				device discovery to match a probe message.
        ///				This operation replaces all existing configurable scope parameters (not fixed parameters). If
        ///				this shall be avoided, one should use the scope add command instead. The device shall
        ///				support configuration of discovery scope parameters through the SetScopes command.
        /// </summary>
        public virtual System.Threading.Tasks.Task<SetScopesResponse> SetScopesAsync(SetScopesRequest request)
        {
            return this.CallAsync<SetScopesRequest, SetScopesResponse>(null, request);
        }
        
        /// <summary>
        /// This operation adds new configurable scope parameters to a device. The scope parameters
        ///				are used in the device discovery to match a probe message. The device shall
        ///				support addition of discovery scope parameters through the AddScopes command.
        /// </summary>
        public virtual System.Threading.Tasks.Task<AddScopesResponse> AddScopesAsync(AddScopesRequest request)
        {
            return this.CallAsync<AddScopesRequest, AddScopesResponse>(null, request);
        }
        
        /// <summary>
        /// This operation deletes scope-configurable scope parameters from a device. The scope
        ///				parameters are used in the device discovery to match a probe message, see Section 7. The
        ///				device shall support deletion of discovery scope parameters through the RemoveScopes
        ///				command.
        ///				Table
        /// </summary>
        public virtual System.Threading.Tasks.Task<RemoveScopesResponse> RemoveScopesAsync(RemoveScopesRequest request)
        {
            return this.CallAsync<RemoveScopesRequest, RemoveScopesResponse>(null, request);
        }
        
        /// <summary>
        /// This operation gets the discovery mode of a device. See Section 7.2 for the definition of the
        ///				different device discovery modes. The device shall support retrieval of the discovery mode
        ///				setting through the GetDiscoveryMode command.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetDiscoveryModeResponse> GetDiscoveryModeAsync(GetDiscoveryModeRequest request)
        {
            return this.CallAsync<GetDiscoveryModeRequest, GetDiscoveryModeResponse>(null, request);
        }
        
        /// <summary>
        /// This operation sets the discovery mode operation of a device. See Section 7.2 for the
        ///				definition of the different device discovery modes. The device shall support configuration of
        ///				the discovery mode setting through the SetDiscoveryMode command.
        /// </summary>
        public virtual System.Threading.Tasks.Task<SetDiscoveryModeResponse> SetDiscoveryModeAsync(SetDiscoveryModeRequest request)
        {
            return this.CallAsync<SetDiscoveryModeRequest, SetDiscoveryModeResponse>(null, request);
        }
        
        /// <summary>
        /// This operation gets the remote discovery mode of a device. See Section 7.4 for the definition
        ///				of remote discovery extensions. A device that supports remote discovery shall support
        ///				retrieval of the remote discovery mode setting through the GetRemoteDiscoveryMode
        ///				command.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetRemoteDiscoveryModeResponse> GetRemoteDiscoveryModeAsync(GetRemoteDiscoveryModeRequest request)
        {
            return this.CallAsync<GetRemoteDiscoveryModeRequest, GetRemoteDiscoveryModeResponse>(null, request);
        }
        
        /// <summary>
        /// This operation sets the remote discovery mode of operation of a device. See Section 7.4 for
        ///				the definition of remote discovery remote extensions. A device that supports remote discovery
        ///				shall support configuration of the discovery mode setting through the
        ///				SetRemoteDiscoveryMode command.
        /// </summary>
        public virtual System.Threading.Tasks.Task<SetRemoteDiscoveryModeResponse> SetRemoteDiscoveryModeAsync(SetRemoteDiscoveryModeRequest request)
        {
            return this.CallAsync<SetRemoteDiscoveryModeRequest, SetRemoteDiscoveryModeResponse>(null, request);
        }
        
        /// <summary>
        /// This operation gets the remote DP address or addresses from a device. If the device supports
        ///				remote discovery, as specified in Section 7.4, the device shall support retrieval of the remote
        ///				DP address(es) through the GetDPAddresses command.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetDPAddressesResponse> GetDPAddressesAsync(GetDPAddressesRequest request)
        {
            return this.CallAsync<GetDPAddressesRequest, GetDPAddressesResponse>(null, request);
        }
        
        /// <summary>
        /// This operation sets the remote DP address or addresses on a device. If the device supports
        ///				remote discovery, as specified in Section 7.4, the device shall support configuration of the
        ///				remote DP address(es) through the SetDPAddresses command.
        /// </summary>
        public virtual System.Threading.Tasks.Task<SetDPAddressesResponse> SetDPAddressesAsync(SetDPAddressesRequest request)
        {
            return this.CallAsync<SetDPAddressesRequest, SetDPAddressesResponse>(null, request);
        }
        
        /// <summary>
        /// A client can ask for the device service endpoint reference address property that can be used
        ///				to derive the password equivalent for remote user operation. The device shall support the
        ///				GetEndpointReference command returning the address property of the device service
        ///				endpoint reference.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetEndpointReferenceResponse> GetEndpointReferenceAsync(GetEndpointReferenceRequest request)
        {
            return this.CallAsync<GetEndpointReferenceRequest, GetEndpointReferenceResponse>(null, request);
        }
        
        /// <summary>
        /// This operation returns the configured remote user (if any). A device supporting remote user
        ///				handling shall support this operation. The user is only valid for the WS-UserToken profile or
        ///				as a HTTP / RTSP user.
        ///				The algorithm to use for deriving the password is described in section 5.12.2.1 of the core specification.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetRemoteUserResponse> GetRemoteUserAsync(GetRemoteUserRequest request)
        {
            return this.CallAsync<GetRemoteUserRequest, GetRemoteUserResponse>(null, request);
        }
        
        /// <summary>
        /// This operation sets the remote user. A device supporting remote user handling shall support this
        ///				operation. The user is only valid for the WS-UserToken profile or as a HTTP / RTSP user.
        ///				The password that is set shall always be the original (not derived) password.
        ///				If UseDerivedPassword is set password derivation shall be done by the device when connecting to a
        ///				remote device.The algorithm to use for deriving the password is described in section 5.12.2.1 of the core specification.
        ///				To remove the remote user SetRemoteUser should be called without the RemoteUser parameter.
        /// </summary>
        public virtual System.Threading.Tasks.Task<SetRemoteUserResponse> SetRemoteUserAsync(SetRemoteUserRequest request)
        {
            return this.CallAsync<SetRemoteUserRequest, SetRemoteUserResponse>(null, request);
        }
        
        /// <summary>
        /// This operation lists the registered users and corresponding credentials on a device. The
        ///				device shall support retrieval of registered device users and their credentials for the user
        ///				token through the GetUsers command.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetUsersResponse> GetUsersAsync(GetUsersRequest request)
        {
            return this.CallAsync<GetUsersRequest, GetUsersResponse>(null, request);
        }
        
        /// <summary>
        /// This operation creates new device users and corresponding credentials on a device for authentication purposes. 
        ///				The device shall support creation of device users and their credentials through the CreateUsers
        ///				command. Either all users are created successfully or a fault message shall be returned
        ///				without creating any user.
        ///				ONVIF compliant devices are recommended to support password length of at least 28 bytes,
        ///				as clients may follow the password derivation mechanism which results in 'password
        ///				equivalent' of length 28 bytes, as described in section 3.1.2 of the ONVIF security white paper.
        /// </summary>
        public virtual System.Threading.Tasks.Task<CreateUsersResponse> CreateUsersAsync(CreateUsersRequest request)
        {
            return this.CallAsync<CreateUsersRequest, CreateUsersResponse>(null, request);
        }
        
        /// <summary>
        /// This operation deletes users on a device. The device shall support deletion of device users and their credentials 
        ///				through the DeleteUsers command. A device may have one or more fixed users
        ///				that cannot be deleted to ensure access to the unit. Either all users are deleted successfully or a
        ///				fault message shall be returned and no users be deleted.
        /// </summary>
        public virtual System.Threading.Tasks.Task<DeleteUsersResponse> DeleteUsersAsync(DeleteUsersRequest request)
        {
            return this.CallAsync<DeleteUsersRequest, DeleteUsersResponse>(null, request);
        }
        
        /// <summary>
        /// This operation updates the settings for one or several users on a device for authentication purposes.
        ///				The device shall support update of device users and their credentials through the SetUser command. 
        ///				Either all change requests are processed successfully or a fault message shall be returned and no change requests be processed.
        /// </summary>
        public virtual System.Threading.Tasks.Task<SetUserResponse> SetUserAsync(SetUserRequest request)
        {
            return this.CallAsync<SetUserRequest, SetUserResponse>(null, request);
        }
        
        /// <summary>
        /// It is possible for an endpoint to request a URL that can be used to retrieve the complete
        ///				schema and WSDL definitions of a device. The command gives in return a URL entry point
        ///				where all the necessary product specific WSDL and schema definitions can be retrieved. The
        ///				device shall provide a URL for WSDL and schema download through the GetWsdlUrl command.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetWsdlUrlResponse> GetWsdlUrlAsync(GetWsdlUrlRequest request)
        {
            return this.CallAsync<GetWsdlUrlRequest, GetWsdlUrlResponse>(null, request);
        }
        
        /// <summary>
        /// Any endpoint can ask for the capabilities of a device using the capability exchange request
        ///				response operation. The device shall indicate all its ONVIF compliant capabilities through the
        ///				GetCapabilities command.
        ///				The capability list includes references to the addresses (XAddr) of the service implementing
        ///				the interface operations in the category. Apart from the addresses, the
        ///				capabilities only reflect optional functions.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetCapabilitiesResponse> GetCapabilitiesAsync(GetCapabilitiesRequest request)
        {
            return this.CallAsync<GetCapabilitiesRequest, GetCapabilitiesResponse>(null, request);
        }
        
        /// <summary>
        /// This operation is used by an endpoint to get the hostname from a device. The device shall
        ///				return its hostname configurations through the GetHostname command.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetHostnameResponse> GetHostnameAsync(GetHostnameRequest request)
        {
            return this.CallAsync<GetHostnameRequest, GetHostnameResponse>(null, request);
        }
        
        /// <summary>
        /// This operation sets the hostname on a device. It shall be possible to set the device hostname
        ///				configurations through the SetHostname command.
        ///				A device shall accept string formated according to RFC 1123 section 2.1 or alternatively to RFC 952, 
        ///				other string shall be considered as invalid strings. 
        ///			
        /// </summary>
        public virtual System.Threading.Tasks.Task<SetHostnameResponse> SetHostnameAsync(SetHostnameRequest request)
        {
            return this.CallAsync<SetHostnameRequest, SetHostnameResponse>(null, request);
        }
        
        /// <summary>
        /// This operation controls whether the hostname is set manually or retrieved via DHCP.
        /// </summary>
        public virtual System.Threading.Tasks.Task<SetHostnameFromDHCPResponse> SetHostnameFromDHCPAsync(SetHostnameFromDHCPRequest request)
        {
            return this.CallAsync<SetHostnameFromDHCPRequest, SetHostnameFromDHCPResponse>(null, request);
        }
        
        /// <summary>
        /// This operation gets the DNS settings from a device. The device shall return its DNS
        ///				configurations through the GetDNS command.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetDNSResponse> GetDNSAsync(GetDNSRequest request)
        {
            return this.CallAsync<GetDNSRequest, GetDNSResponse>(null, request);
        }
        
        /// <summary>
        /// This operation sets the DNS settings on a device. It shall be possible to set the device DNS
        ///				configurations through the SetDNS command.
        /// </summary>
        public virtual System.Threading.Tasks.Task<SetDNSResponse> SetDNSAsync(SetDNSRequest request)
        {
            return this.CallAsync<SetDNSRequest, SetDNSResponse>(null, request);
        }
        
        /// <summary>
        /// This operation gets the NTP settings from a device. If the device supports NTP, it shall be
        ///				possible to get the NTP server settings through the GetNTP command.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetNTPResponse> GetNTPAsync(GetNTPRequest request)
        {
            return this.CallAsync<GetNTPRequest, GetNTPResponse>(null, request);
        }
        
        /// <summary>
        /// This operation sets the NTP settings on a device. If the device supports NTP, it shall be
        ///				possible to set the NTP server settings through the SetNTP command.
        ///				A device shall accept string formated according to RFC 1123 section 2.1 or alternatively to RFC 952, 
        ///				other string shall be considered as invalid strings. 
        ///				Changes to the NTP server list will not affect the clock mode DateTimeType. Use SetSystemDateAndTime to activate NTP operation.
        ///			
        /// </summary>
        public virtual System.Threading.Tasks.Task<SetNTPResponse> SetNTPAsync(SetNTPRequest request)
        {
            return this.CallAsync<SetNTPRequest, SetNTPResponse>(null, request);
        }
        
        /// <summary>
        /// This operation gets the dynamic DNS settings from a device. If the device supports dynamic
        ///				DNS as specified in [RFC 2136] and [RFC 4702], it shall be possible to get the type, name
        ///				and TTL through the GetDynamicDNS command.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetDynamicDNSResponse> GetDynamicDNSAsync(GetDynamicDNSRequest request)
        {
            return this.CallAsync<GetDynamicDNSRequest, GetDynamicDNSResponse>(null, request);
        }
        
        /// <summary>
        /// This operation sets the dynamic DNS settings on a device. If the device supports dynamic
        ///				DNS as specified in [RFC 2136] and [RFC 4702], it shall be possible to set the type, name
        ///				and TTL through the SetDynamicDNS command.
        /// </summary>
        public virtual System.Threading.Tasks.Task<SetDynamicDNSResponse> SetDynamicDNSAsync(SetDynamicDNSRequest request)
        {
            return this.CallAsync<SetDynamicDNSRequest, SetDynamicDNSResponse>(null, request);
        }
        
        /// <summary>
        /// This operation gets the network interface configuration from a device. The device shall
        ///				support return of network interface configuration settings as defined by the NetworkInterface
        ///				type through the GetNetworkInterfaces command.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetNetworkInterfacesResponse> GetNetworkInterfacesAsync(GetNetworkInterfacesRequest request)
        {
            return this.CallAsync<GetNetworkInterfacesRequest, GetNetworkInterfacesResponse>(null, request);
        }
        
        /// <summary>
        /// This operation sets the network interface configuration on a device. The device shall support
        ///				network configuration of supported network interfaces through the SetNetworkInterfaces
        ///				command.
        ///				For interoperability with a client unaware of the IEEE 802.11 extension a device shall retain
        ///				its IEEE 802.11 configuration if the IEEE 802.11 configuration element isn’t present in the
        ///				request.
        /// </summary>
        public virtual System.Threading.Tasks.Task<SetNetworkInterfacesResponse> SetNetworkInterfacesAsync(SetNetworkInterfacesRequest request)
        {
            return this.CallAsync<SetNetworkInterfacesRequest, SetNetworkInterfacesResponse>(null, request);
        }
        
        /// <summary>
        /// This operation gets defined network protocols from a device. The device shall support the
        ///				GetNetworkProtocols command returning configured network protocols.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetNetworkProtocolsResponse> GetNetworkProtocolsAsync(GetNetworkProtocolsRequest request)
        {
            return this.CallAsync<GetNetworkProtocolsRequest, GetNetworkProtocolsResponse>(null, request);
        }
        
        /// <summary>
        /// This operation configures defined network protocols on a device. The device shall support
        ///				configuration of defined network protocols through the SetNetworkProtocols command.
        /// </summary>
        public virtual System.Threading.Tasks.Task<SetNetworkProtocolsResponse> SetNetworkProtocolsAsync(SetNetworkProtocolsRequest request)
        {
            return this.CallAsync<SetNetworkProtocolsRequest, SetNetworkProtocolsResponse>(null, request);
        }
        
        /// <summary>
        /// This operation gets the default gateway settings from a device. The device shall support the
        ///				GetNetworkDefaultGateway command returning configured default gateway address(es).
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetNetworkDefaultGatewayResponse> GetNetworkDefaultGatewayAsync(GetNetworkDefaultGatewayRequest request)
        {
            return this.CallAsync<GetNetworkDefaultGatewayRequest, GetNetworkDefaultGatewayResponse>(null, request);
        }
        
        /// <summary>
        /// This operation sets the default gateway settings on a device. The device shall support
        ///				configuration of default gateway through the SetNetworkDefaultGateway command.
        /// </summary>
        public virtual System.Threading.Tasks.Task<SetNetworkDefaultGatewayResponse> SetNetworkDefaultGatewayAsync(SetNetworkDefaultGatewayRequest request)
        {
            return this.CallAsync<SetNetworkDefaultGatewayRequest, SetNetworkDefaultGatewayResponse>(null, request);
        }
        
        /// <summary>
        /// This operation gets the zero-configuration from a device. If the device supports dynamic IP
        ///				configuration according to [RFC3927], it shall support the return of IPv4 zero configuration
        ///				address and status through the GetZeroConfiguration command.
        ///			Devices supporting zero configuration on more than one interface shall use the extension to list the additional interface settings.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetZeroConfigurationResponse> GetZeroConfigurationAsync(GetZeroConfigurationRequest request)
        {
            return this.CallAsync<GetZeroConfigurationRequest, GetZeroConfigurationResponse>(null, request);
        }
        
        /// <summary>
        /// This operation sets the zero-configuration. Use GetCapalities to get if zero-zero-configuration is supported or not.
        /// </summary>
        public virtual System.Threading.Tasks.Task<SetZeroConfigurationResponse> SetZeroConfigurationAsync(SetZeroConfigurationRequest request)
        {
            return this.CallAsync<SetZeroConfigurationRequest, SetZeroConfigurationResponse>(null, request);
        }
        
        /// <summary>
        /// This operation gets the IP address filter settings from a device. If the device supports device
        ///				access control based on IP filtering rules (denied or accepted ranges of IP addresses), the
        ///				device shall support the GetIPAddressFilter command.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetIPAddressFilterResponse> GetIPAddressFilterAsync(GetIPAddressFilterRequest request)
        {
            return this.CallAsync<GetIPAddressFilterRequest, GetIPAddressFilterResponse>(null, request);
        }
        
        /// <summary>
        /// This operation sets the IP address filter settings on a device. If the device supports device
        ///				access control based on IP filtering rules (denied or accepted ranges of IP addresses), the
        ///				device shall support configuration of IP filtering rules through the SetIPAddressFilter
        ///				command.
        /// </summary>
        public virtual System.Threading.Tasks.Task<SetIPAddressFilterResponse> SetIPAddressFilterAsync(SetIPAddressFilterRequest request)
        {
            return this.CallAsync<SetIPAddressFilterRequest, SetIPAddressFilterResponse>(null, request);
        }
        
        /// <summary>
        /// This operation adds an IP filter address to a device. If the device supports device access
        ///				control based on IP filtering rules (denied or accepted ranges of IP addresses), the device
        ///				shall support adding of IP filtering addresses through the AddIPAddressFilter command.
        /// </summary>
        public virtual System.Threading.Tasks.Task<AddIPAddressFilterResponse> AddIPAddressFilterAsync(AddIPAddressFilterRequest request)
        {
            return this.CallAsync<AddIPAddressFilterRequest, AddIPAddressFilterResponse>(null, request);
        }
        
        /// <summary>
        /// This operation deletes an IP filter address from a device. If the device supports device access
        ///				control based on IP filtering rules (denied or accepted ranges of IP addresses), the device
        ///				shall support deletion of IP filtering addresses through the RemoveIPAddressFilter command.
        /// </summary>
        public virtual System.Threading.Tasks.Task<RemoveIPAddressFilterResponse> RemoveIPAddressFilterAsync(RemoveIPAddressFilterRequest request)
        {
            return this.CallAsync<RemoveIPAddressFilterRequest, RemoveIPAddressFilterResponse>(null, request);
        }
        
        /// <summary>
        /// Access to different services and sub-sets of services should be subject to access control. The
        ///				WS-Security framework gives the prerequisite for end-point authentication. Authorization
        ///				decisions can then be taken using an access security policy. This standard does not mandate
        ///				any particular policy description format or security policy but this is up to the device
        ///				manufacturer or system provider to choose policy and policy description format of choice.
        ///				However, an access policy (in arbitrary format) can be requested using this command. If the
        ///				device supports access policy settings based on WS-Security authentication, then the device
        ///				shall support this command.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetAccessPolicyResponse> GetAccessPolicyAsync(GetAccessPolicyRequest request)
        {
            return this.CallAsync<GetAccessPolicyRequest, GetAccessPolicyResponse>(null, request);
        }
        
        /// <summary>
        /// This command sets the device access security policy (for more details on the access security
        ///				policy see the Get command). If the device supports access policy settings
        ///				based on WS-Security authentication, then the device shall support this command.
        /// </summary>
        public virtual System.Threading.Tasks.Task<SetAccessPolicyResponse> SetAccessPolicyAsync(SetAccessPolicyRequest request)
        {
            return this.CallAsync<SetAccessPolicyRequest, SetAccessPolicyResponse>(null, request);
        }
        
        /// <summary>
        /// This operation generates a private/public key pair and also can create a self-signed device
        ///				certificate as a result of key pair generation. The certificate is created using a suitable
        ///				onboard key pair generation mechanism.
        ///				If a device supports onboard key pair generation, the device that supports TLS shall support
        ///				this certificate creation command. And also, if a device supports onboard key pair generation,
        ///				the device that support IEEE 802.1X shall support this command for the purpose of key pair
        ///				generation. Certificates and key pairs are identified using certificate IDs. These IDs are either
        ///				chosen by the certificate generation requester or by the device (in case that no ID value is
        ///				given).
        /// </summary>
        public virtual System.Threading.Tasks.Task<CreateCertificateResponse> CreateCertificateAsync(CreateCertificateRequest request)
        {
            return this.CallAsync<CreateCertificateRequest, CreateCertificateResponse>(null, request);
        }
        
        /// <summary>
        /// This operation gets all device server certificates (including self-signed) for the purpose of TLS
        ///				authentication and all device client certificates for the purpose of IEEE 802.1X authentication.
        ///				This command lists only the TLS server certificates and IEEE 802.1X client certificates for the
        ///				device (neither trusted CA certificates nor trusted root certificates). The certificates are
        ///				returned as binary data. A device that supports TLS shall support this command and the
        ///				certificates shall be encoded using ASN.1 [X.681], [X.682], [X.683] DER [X.690] encoding
        ///				rules.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetCertificatesResponse> GetCertificatesAsync(GetCertificatesRequest request)
        {
            return this.CallAsync<GetCertificatesRequest, GetCertificatesResponse>(null, request);
        }
        
        /// <summary>
        /// This operation is specific to TLS functionality. This operation gets the status
        ///				(enabled/disabled) of the device TLS server certificates. A device that supports TLS shall
        ///				support this command.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetCertificatesStatusResponse> GetCertificatesStatusAsync(GetCertificatesStatusRequest request)
        {
            return this.CallAsync<GetCertificatesStatusRequest, GetCertificatesStatusResponse>(null, request);
        }
        
        /// <summary>
        /// This operation is specific to TLS functionality. This operation sets the status (enable/disable)
        ///				of the device TLS server certificates. A device that supports TLS shall support this command.
        ///				Typically only one device server certificate is allowed to be enabled at a time.
        /// </summary>
        public virtual System.Threading.Tasks.Task<SetCertificatesStatusResponse> SetCertificatesStatusAsync(SetCertificatesStatusRequest request)
        {
            return this.CallAsync<SetCertificatesStatusRequest, SetCertificatesStatusResponse>(null, request);
        }
        
        /// <summary>
        /// This operation deletes a certificate or multiple certificates. The device MAY also delete a
        ///				private/public key pair which is coupled with the certificate to be deleted. The device that
        ///				support either TLS or IEEE 802.1X shall support the deletion of a certificate or multiple
        ///				certificates through this command. Either all certificates are deleted successfully or a fault
        ///				message shall be returned without deleting any certificate.
        /// </summary>
        public virtual System.Threading.Tasks.Task<DeleteCertificatesResponse> DeleteCertificatesAsync(DeleteCertificatesRequest request)
        {
            return this.CallAsync<DeleteCertificatesRequest, DeleteCertificatesResponse>(null, request);
        }
        
        /// <summary>
        /// This operation requests a PKCS #10 certificate signature request from the device. The
        ///				returned information field shall be either formatted exactly as specified in [PKCS#10] or PEM
        ///				encoded [PKCS#10] format. In order for this command to work, the device must already have
        ///				a private/public key pair. This key pair should be referred by CertificateID as specified in the
        ///				input parameter description. This CertificateID refers to the key pair generated using
        ///				CreateCertificate command.
        ///				A device that support onboard key pair generation that supports either TLS or IEEE 802.1X
        ///				using client certificate shall support this command.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetPkcs10RequestResponse> GetPkcs10RequestAsync(GetPkcs10RequestRequest request)
        {
            return this.CallAsync<GetPkcs10RequestRequest, GetPkcs10RequestResponse>(null, request);
        }
        
        /// <summary>
        /// TLS server certificate(s) or IEEE 802.1X client certificate(s) created using the PKCS#10
        ///				certificate request command can be loaded into the device using this command (see Section
        ///				8.4.13). The certificate ID in the request shall be present. The device may sort the received
        ///				certificate(s) based on the public key and subject information in the certificate(s).
        ///				The certificate ID in the request will be the ID value the client wish to have. The device is
        ///				supposed to scan the generated key pairs present in the device to identify which is the
        ///				correspondent key pair with the loaded certificate and then make the link between the
        ///				certificate and the key pair.
        ///				A device that supports onboard key pair generation that support either TLS or IEEE 802.1X
        ///				shall support this command.
        ///				The certificates shall be encoded using ASN.1 [X.681], [X.682], [X.683] DER [X.690] encoding
        ///				rules.
        ///				This command is applicable to any device type, although the parameter name is called for
        ///				historical reasons NVTCertificate.
        /// </summary>
        public virtual System.Threading.Tasks.Task<LoadCertificatesResponse> LoadCertificatesAsync(LoadCertificatesRequest request)
        {
            return this.CallAsync<LoadCertificatesRequest, LoadCertificatesResponse>(null, request);
        }
        
        /// <summary>
        /// This operation is specific to TLS functionality. This operation gets the status
        ///				(enabled/disabled) of the device TLS client authentication. A device that supports TLS shall
        ///				support this command.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetClientCertificateModeResponse> GetClientCertificateModeAsync(GetClientCertificateModeRequest request)
        {
            return this.CallAsync<GetClientCertificateModeRequest, GetClientCertificateModeResponse>(null, request);
        }
        
        /// <summary>
        /// This operation is specific to TLS functionality. This operation sets the status
        ///				(enabled/disabled) of the device TLS client authentication. A device that supports TLS shall
        ///				support this command.
        /// </summary>
        public virtual System.Threading.Tasks.Task<SetClientCertificateModeResponse> SetClientCertificateModeAsync(SetClientCertificateModeRequest request)
        {
            return this.CallAsync<SetClientCertificateModeRequest, SetClientCertificateModeResponse>(null, request);
        }
        
        /// <summary>
        /// This operation gets a list of all available relay outputs and their settings.
        ///				This method has been depricated with version 2.0. Refer to the DeviceIO service.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetRelayOutputsResponse> GetRelayOutputsAsync(GetRelayOutputsRequest request)
        {
            return this.CallAsync<GetRelayOutputsRequest, GetRelayOutputsResponse>(null, request);
        }
        
        /// <summary>
        /// This operation sets the settings of a relay output.
        ///				This method has been depricated with version 2.0. Refer to the DeviceIO service.
        /// </summary>
        public virtual System.Threading.Tasks.Task<SetRelayOutputSettingsResponse> SetRelayOutputSettingsAsync(SetRelayOutputSettingsRequest request)
        {
            return this.CallAsync<SetRelayOutputSettingsRequest, SetRelayOutputSettingsResponse>(null, request);
        }
        
        /// <summary>
        /// This operation sets the state of a relay output.
        ///				This method has been depricated with version 2.0. Refer to the DeviceIO service.
        /// </summary>
        public virtual System.Threading.Tasks.Task<SetRelayOutputStateResponse> SetRelayOutputStateAsync(SetRelayOutputStateRequest request)
        {
            return this.CallAsync<SetRelayOutputStateRequest, SetRelayOutputStateResponse>(null, request);
        }
        
        /// <summary>
        /// Manage auxiliary commands supported by a device, such as controlling an Infrared (IR) lamp, 
        ///				a heater or a wiper or a thermometer that is connected to the device.
        ///				The supported commands can be retrieved via the AuxiliaryCommands capability.
        ///				Although the name of the auxiliary commands can be freely defined, commands starting with the prefix tt: are 
        ///				reserved to define frequently used commands and these reserved commands shall all share the "tt:command|parameter" syntax.
        ///				tt:Wiper|On – Request to start the wiper.tt:Wiper|Off – Request to stop the wiper.tt:Washer|On – Request to start the washer.tt:Washer|Off – Request to stop the washer.tt:WashingProcedure|On – Request to start the washing procedure.tt: WashingProcedure |Off – Request to stop the washing procedure.tt:IRLamp|On – Request to turn ON an IR illuminator attached to the unit.tt:IRLamp|Off – Request to turn OFF an IR illuminator attached to the unit.tt:IRLamp|Auto – Request to configure an IR illuminator attached to the unit so that it automatically turns ON and OFF.
        ///				A device that indicates auxiliary service capability shall support this command.
        /// </summary>
        public virtual System.Threading.Tasks.Task<SendAuxiliaryCommandResponse> SendAuxiliaryCommandAsync(SendAuxiliaryCommandRequest request)
        {
            return this.CallAsync<SendAuxiliaryCommandRequest, SendAuxiliaryCommandResponse>(null, request);
        }
        
        /// <summary>
        /// CA certificates will be loaded into a device and be used for the sake of following two cases.
        ///				The one is for the purpose of TLS client authentication in TLS server function. The other one
        ///				is for the purpose of Authentication Server authentication in IEEE 802.1X function. This
        ///				operation gets all CA certificates loaded into a device. A device that supports either TLS client
        ///				authentication or IEEE 802.1X shall support this command and the returned certificates shall
        ///				be encoded using ASN.1 [X.681], [X.682], [X.683] DER [X.690] encoding rules.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetCACertificatesResponse> GetCACertificatesAsync(GetCACertificatesRequest request)
        {
            return this.CallAsync<GetCACertificatesRequest, GetCACertificatesResponse>(null, request);
        }
        
        /// <summary>
        /// There might be some cases that a Certificate Authority or some other equivalent creates a
        ///				certificate without having PKCS#10 certificate signing request. In such cases, the certificate
        ///				will be bundled in conjunction with its private key. This command will be used for such use
        ///				case scenarios. The certificate ID in the request is optionally set to the ID value the client
        ///				wish to have. If the certificate ID is not specified in the request, device can choose the ID
        ///				accordingly.
        ///				This operation imports a private/public key pair into the device.
        ///				The certificates shall be encoded using ASN.1 [X.681], [X.682], [X.683] DER [X.690] encoding
        ///				rules.
        ///				A device that does not support onboard key pair generation and support either TLS or IEEE
        ///				802.1X using client certificate shall support this command. A device that support onboard key
        ///				pair generation MAY support this command. The security policy of a device that supports this
        ///				operation should make sure that the private key is sufficiently protected.
        /// </summary>
        public virtual System.Threading.Tasks.Task<LoadCertificateWithPrivateKeyResponse> LoadCertificateWithPrivateKeyAsync(LoadCertificateWithPrivateKeyRequest request)
        {
            return this.CallAsync<LoadCertificateWithPrivateKeyRequest, LoadCertificateWithPrivateKeyResponse>(null, request);
        }
        
        /// <summary>
        /// This operation requests the information of a certificate specified by certificate ID. The device
        ///				should respond with its “Issuer DN”, “Subject DN”, “Key usage”, "Extended key usage”, “Key
        ///				Length”, “Version”, “Serial Number”, “Signature Algorithm” and “Validity” data as the
        ///				information of the certificate, as long as the device can retrieve such information from the
        ///				specified certificate.
        ///				A device that supports either TLS or IEEE 802.1X should support this command.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetCertificateInformationResponse> GetCertificateInformationAsync(GetCertificateInformationRequest request)
        {
            return this.CallAsync<GetCertificateInformationRequest, GetCertificateInformationResponse>(null, request);
        }
        
        /// <summary>
        /// This command is used when it is necessary to load trusted CA certificates or trusted root
        ///				certificates for the purpose of verification for its counterpart i.e. client certificate verification in
        ///				TLS function or server certificate verification in IEEE 802.1X function.
        ///				A device that support either TLS or IEEE 802.1X shall support this command. As for the
        ///				supported certificate format, either DER format or PEM format is possible to be used. But a
        ///				device that support this command shall support at least DER format as supported format type.
        ///				The device may sort the received certificate(s) based on the public key and subject
        ///				information in the certificate(s). Either all CA certificates are loaded successfully or a fault
        ///				message shall be returned without loading any CA certificate.
        /// </summary>
        public virtual System.Threading.Tasks.Task<LoadCACertificatesResponse> LoadCACertificatesAsync(LoadCACertificatesRequest request)
        {
            return this.CallAsync<LoadCACertificatesRequest, LoadCACertificatesResponse>(null, request);
        }
        
        /// <summary>
        /// This operation newly creates IEEE 802.1X configuration parameter set of the device. The
        ///				device shall support this command if it supports IEEE 802.1X. If the device receives this
        ///				request with already existing configuration token (Dot1XConfigurationToken) specification, the
        ///				device should respond with 'ter:ReferenceToken ' error to indicate there is some configuration
        ///				conflict.
        /// </summary>
        public virtual System.Threading.Tasks.Task<CreateDot1XConfigurationResponse> CreateDot1XConfigurationAsync(CreateDot1XConfigurationRequest request)
        {
            return this.CallAsync<CreateDot1XConfigurationRequest, CreateDot1XConfigurationResponse>(null, request);
        }
        
        /// <summary>
        /// While the CreateDot1XConfiguration command is trying to create a new configuration
        ///				parameter set, this operation modifies existing IEEE 802.1X configuration parameter set of
        ///				the device. A device that support IEEE 802.1X shall support this command.
        /// </summary>
        public virtual System.Threading.Tasks.Task<SetDot1XConfigurationResponse> SetDot1XConfigurationAsync(SetDot1XConfigurationRequest request)
        {
            return this.CallAsync<SetDot1XConfigurationRequest, SetDot1XConfigurationResponse>(null, request);
        }
        
        /// <summary>
        /// This operation gets one IEEE 802.1X configuration parameter set from the device by
        ///				specifying the configuration token (Dot1XConfigurationToken).
        ///				A device that supports IEEE 802.1X shall support this command.
        ///				Regardless of whether the 802.1X method in the retrieved configuration has a password or
        ///				not, the device shall not include the Password element in the response.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetDot1XConfigurationResponse> GetDot1XConfigurationAsync(GetDot1XConfigurationRequest request)
        {
            return this.CallAsync<GetDot1XConfigurationRequest, GetDot1XConfigurationResponse>(null, request);
        }
        
        /// <summary>
        /// This operation gets all the existing IEEE 802.1X configuration parameter sets from the device.
        ///				The device shall respond with all the IEEE 802.1X configurations so that the client can get to
        ///				know how many IEEE 802.1X configurations are existing and how they are configured.
        ///				A device that support IEEE 802.1X shall support this command.
        ///				Regardless of whether the 802.1X method in the retrieved configuration has a password or
        ///				not, the device shall not include the Password element in the response.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetDot1XConfigurationsResponse> GetDot1XConfigurationsAsync(GetDot1XConfigurationsRequest request)
        {
            return this.CallAsync<GetDot1XConfigurationsRequest, GetDot1XConfigurationsResponse>(null, request);
        }
        
        /// <summary>
        /// This operation deletes an IEEE 802.1X configuration parameter set from the device. Which
        ///				configuration should be deleted is specified by the 'Dot1XConfigurationToken' in the request.
        ///				A device that support IEEE 802.1X shall support this command.
        /// </summary>
        public virtual System.Threading.Tasks.Task<DeleteDot1XConfigurationResponse> DeleteDot1XConfigurationAsync(DeleteDot1XConfigurationRequest request)
        {
            return this.CallAsync<DeleteDot1XConfigurationRequest, DeleteDot1XConfigurationResponse>(null, request);
        }
        
        /// <summary>
        /// This operation returns the IEEE802.11 capabilities. The device shall support
        ///				this operation.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetDot11CapabilitiesResponse> GetDot11CapabilitiesAsync(GetDot11CapabilitiesRequest request)
        {
            return this.CallAsync<GetDot11CapabilitiesRequest, GetDot11CapabilitiesResponse>(null, request);
        }
        
        /// <summary>
        /// This operation returns the status of a wireless network interface. The device shall support this
        ///				command.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetDot11StatusResponse> GetDot11StatusAsync(GetDot11StatusRequest request)
        {
            return this.CallAsync<GetDot11StatusRequest, GetDot11StatusResponse>(null, request);
        }
        
        /// <summary>
        /// This operation returns a lists of the wireless networks in range of the device. A device should
        ///				support this operation.
        /// </summary>
        public virtual System.Threading.Tasks.Task<ScanAvailableDot11NetworksResponse> ScanAvailableDot11NetworksAsync(ScanAvailableDot11NetworksRequest request)
        {
            return this.CallAsync<ScanAvailableDot11NetworksRequest, ScanAvailableDot11NetworksResponse>(null, request);
        }
        
        /// <summary>
        /// This operation is used to retrieve URIs from which system information may be downloaded
        ///				using HTTP. URIs may be returned for the following system information:
        ///				System Logs. Multiple system logs may be returned, of different types. The exact format of
        ///				the system logs is outside the scope of this specification.
        ///				Support Information. This consists of arbitrary device diagnostics information from a device.
        ///				The exact format of the diagnostic information is outside the scope of this specification.
        ///				System Backup. The received file is a backup file that can be used to restore the current
        ///				device configuration at a later date. The exact format of the backup configuration file is
        ///				outside the scope of this specification.
        ///				If the device allows retrieval of system logs, support information or system backup data, it
        ///				should make them available via HTTP GET. If it does, it shall support the GetSystemUris
        ///				command.
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetSystemUrisResponse> GetSystemUrisAsync(GetSystemUrisRequest request)
        {
            return this.CallAsync<GetSystemUrisRequest, GetSystemUrisResponse>(null, request);
        }
        
        /// <summary>
        /// This operation initiates a firmware upgrade using the HTTP POST mechanism. The response
        ///				to the command includes an HTTP URL to which the upgrade file may be uploaded. The
        ///				actual upgrade takes place as soon as the HTTP POST operation has completed. The device
        ///				should support firmware upgrade through the StartFirmwareUpgrade command. The exact
        ///				format of the firmware data is outside the scope of this specification.
        ///				Firmware upgrade over HTTP may be achieved using the following steps:Client calls StartFirmwareUpgrade.Server responds with upload URI and optional delay value.Client waits for delay duration if specified by server.Client transmits the firmware image to the upload URI using HTTP POST.Server reprograms itself using the uploaded image, then reboots.
        ///				If the firmware upgrade fails because the upgrade file was invalid, the HTTP POST response
        ///				shall be “415 Unsupported Media Type”. If the firmware upgrade fails due to an error at the
        ///				device, the HTTP POST response shall be “500 Internal Server Error”.
        ///				The value of the Content-Type header in the HTTP POST request shall be “application/octetstream”.
        /// </summary>
        public virtual System.Threading.Tasks.Task<StartFirmwareUpgradeResponse> StartFirmwareUpgradeAsync(StartFirmwareUpgradeRequest request)
        {
            return this.CallAsync<StartFirmwareUpgradeRequest, StartFirmwareUpgradeResponse>(null, request);
        }
        
        /// <summary>
        /// This operation initiates a system restore from backed up configuration data using the HTTP
        ///				POST mechanism. The response to the command includes an HTTP URL to which the backup
        ///				file may be uploaded. The actual restore takes place as soon as the HTTP POST operation
        ///				has completed. Devices should support system restore through the StartSystemRestore
        ///				command. The exact format of the backup configuration data is outside the scope of this
        ///				specification.
        ///				System restore over HTTP may be achieved using the following steps:Client calls StartSystemRestore.Server responds with upload URI.Client transmits the configuration data to the upload URI using HTTP POST.Server applies the uploaded configuration, then reboots if necessary.
        ///				If the system restore fails because the uploaded file was invalid, the HTTP POST response
        ///				shall be “415 Unsupported Media Type”. If the system restore fails due to an error at the
        ///				device, the HTTP POST response shall be “500 Internal Server Error”.
        ///				The value of the Content-Type header in the HTTP POST request shall be “application/octetstream”.
        /// </summary>
        public virtual System.Threading.Tasks.Task<StartSystemRestoreResponse> StartSystemRestoreAsync(StartSystemRestoreRequest request)
        {
            return this.CallAsync<StartSystemRestoreRequest, StartSystemRestoreResponse>(null, request);
        }
        
        /// <summary>
        /// 
        ///			This operation lists all existing storage configurations for the device. 
        ///			
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetStorageConfigurationsResponse> GetStorageConfigurationsAsync(GetStorageConfigurationsRequest request)
        {
            return this.CallAsync<GetStorageConfigurationsRequest, GetStorageConfigurationsResponse>(null, request);
        }
        
        /// <summary>
        /// 
        ///			This operation creates a new storage configuration. 
        ///			The configuration data shall be created in the device and shall be persistent (remain after reboot).
        ///			
        /// </summary>
        public virtual System.Threading.Tasks.Task<CreateStorageConfigurationResponse> CreateStorageConfigurationAsync(CreateStorageConfigurationRequest request)
        {
            return this.CallAsync<CreateStorageConfigurationRequest, CreateStorageConfigurationResponse>(null, request);
        }
        
        /// <summary>
        /// 
        ///			This operation retrieves the Storage configuration associated with the given storage configuration token.
        ///			
        /// </summary>
        public virtual System.Threading.Tasks.Task<GetStorageConfigurationResponse> GetStorageConfigurationAsync(GetStorageConfigurationRequest request)
        {
            return this.CallAsync<GetStorageConfigurationRequest, GetStorageConfigurationResponse>(null, request);
        }
        
        /// <summary>
        /// 
        ///			This operation modifies an existing Storage configuration.
        ///			
        /// </summary>
        public virtual System.Threading.Tasks.Task<SetStorageConfigurationResponse> SetStorageConfigurationAsync(SetStorageConfigurationRequest request)
        {
            return this.CallAsync<SetStorageConfigurationRequest, SetStorageConfigurationResponse>(null, request);
        }
        
        /// <summary>
        /// 
        ///			This operation deletes the given storage configuration and configuration change shall always be persistent.
        ///			
        /// </summary>
        public virtual System.Threading.Tasks.Task<DeleteStorageConfigurationResponse> DeleteStorageConfigurationAsync(DeleteStorageConfigurationRequest request)
        {
            return this.CallAsync<DeleteStorageConfigurationRequest, DeleteStorageConfigurationResponse>(null, request);
        }
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetServicesRequest
    {
        
        /// <summary>
        /// Indicates if the service capabilities (untyped) should be included in the response.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool IncludeCapability;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetServicesResponse
    {
        
        /// <summary>
        /// Each Service element contains information about one service.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Service Service;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class Service
    {
        
        /// <summary>
        /// Namespace of the service being described. This parameter allows to match the service capabilities to the service. Note that only one set of capabilities is supported per namespace.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Namespace;
        
        /// <summary>
        /// The transport addresses where the service can be reached. The scheme and IP part shall match the one used in the request (i.e. the GetServices request).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string XAddr;
        
        /// <summary>
        /// The version of the service (not the ONVIF core spec version).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public OnvifVersion Version;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class OnvifVersion
    {
        
        /// <summary>
        /// Major version number.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Major;
        
        /// <summary>
        /// Two digit minor version number (e.g. X.0.1 maps to "01" and X.2.1 maps to "21" where X stands for Major version number).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int Minor;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetServiceCapabilitiesRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetServiceCapabilitiesResponse
    {
        
        /// <summary>
        /// The capabilities for the device service is returned in the Capabilities element.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DeviceServiceCapabilities Capabilities;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class DeviceServiceCapabilities
    {
        
        /// <summary>
        /// Network capabilities.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public NetworkCapabilities Network;
        
        /// <summary>
        /// Security capabilities.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public SecurityCapabilities Security;
        
        /// <summary>
        /// System capabilities.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public SystemCapabilities System;
        
        /// <summary>
        /// Capabilities that do not fit in any of the other categories.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public MiscCapabilities Misc;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class NetworkCapabilities
    {
        
        /// <summary>
        /// Indicates support for IP filtering.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool IPFilter;
        
        /// <summary>
        /// Indicates support for zeroconf.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool ZeroConfiguration;
        
        /// <summary>
        /// Indicates support for IPv6.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool IPVersion6;
        
        /// <summary>
        /// Indicates support for dynamic DNS configuration.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool DynDNS;
        
        /// <summary>
        /// Indicates support for IEEE 802.11 configuration.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool Dot11Configuration;
        
        /// <summary>
        /// Indicates the maximum number of Dot1X configurations supported by the device
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Dot1XConfigurations;
        
        /// <summary>
        /// Indicates support for retrieval of hostname from DHCP.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool HostnameFromDHCP;
        
        /// <summary>
        /// Maximum number of NTP servers supported by the devices SetNTP command.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int NTP;
        
        /// <summary>
        /// Indicates support for Stateful IPv6 DHCP.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool DHCPv6;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SecurityCapabilities
    {
        
        /// <summary>
        /// Indicates support for TLS 1.0.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool TLS10;
        
        /// <summary>
        /// Indicates support for TLS 1.1.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool TLS11;
        
        /// <summary>
        /// Indicates support for TLS 1.2.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool TLS12;
        
        /// <summary>
        /// Indicates support for onboard key generation.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool OnboardKeyGeneration;
        
        /// <summary>
        /// Indicates support for access policy configuration.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool AccessPolicyConfig;
        
        /// <summary>
        /// Indicates support for the ONVIF default access policy.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool DefaultAccessPolicy;
        
        /// <summary>
        /// Indicates support for IEEE 802.1X configuration.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool Dot1X;
        
        /// <summary>
        /// Indicates support for remote user configuration. Used when accessing another device.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool RemoteUserHandling;
        
        /// <summary>
        /// Indicates support for WS-Security X.509 token.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool X509Token;
        
        /// <summary>
        /// Indicates support for WS-Security SAML token.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool SAMLToken;
        
        /// <summary>
        /// Indicates support for WS-Security Kerberos token.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool KerberosToken;
        
        /// <summary>
        /// Indicates support for WS-Security Username token.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool UsernameToken;
        
        /// <summary>
        /// Indicates support for WS over HTTP digest authenticated communication layer.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool HttpDigest;
        
        /// <summary>
        /// Indicates support for WS-Security REL token.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool RELToken;
        
        /// <summary>
        /// EAP Methods supported by the device. The int values refer to the IANA EAP Registry.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int[] SupportedEAPMethods;
        
        /// <summary>
        /// The maximum number of users that the device supports.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int MaxUsers;
        
        /// <summary>
        /// Maximum number of characters supported for the username by CreateUsers.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int MaxUserNameLength;
        
        /// <summary>
        /// Maximum number of characters supported for the password by CreateUsers and SetUser.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int MaxPasswordLength;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SystemCapabilities
    {
        
        /// <summary>
        /// Indicates support for WS Discovery resolve requests.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool DiscoveryResolve;
        
        /// <summary>
        /// Indicates support for WS-Discovery Bye.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool DiscoveryBye;
        
        /// <summary>
        /// Indicates support for remote discovery.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool RemoteDiscovery;
        
        /// <summary>
        /// Indicates support for system backup through MTOM.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool SystemBackup;
        
        /// <summary>
        /// Indicates support for retrieval of system logging through MTOM.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool SystemLogging;
        
        /// <summary>
        /// Indicates support for firmware upgrade through MTOM.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool FirmwareUpgrade;
        
        /// <summary>
        /// Indicates support for firmware upgrade through HTTP.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool HttpFirmwareUpgrade;
        
        /// <summary>
        /// Indicates support for system backup through HTTP.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool HttpSystemBackup;
        
        /// <summary>
        /// Indicates support for retrieval of system logging through HTTP.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool HttpSystemLogging;
        
        /// <summary>
        /// Indicates support for retrieving support information through HTTP.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool HttpSupportInformation;
        
        /// <summary>
        /// Indicates support for storage configuration interfaces.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool StorageConfiguration;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class MiscCapabilities
    {
        
        /// <summary>
        /// Lists of commands supported by SendAuxiliaryCommand.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string[] AuxiliaryCommands;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetDeviceInformationRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetDeviceInformationResponse
    {
        
        /// <summary>
        /// The manufactor of the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Manufacturer;
        
        /// <summary>
        /// The device model.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Model;
        
        /// <summary>
        /// The firmware version in the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string FirmwareVersion;
        
        /// <summary>
        /// The serial number of the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string SerialNumber;
        
        /// <summary>
        /// The hardware ID of the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string HardwareId;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetSystemDateAndTimeRequest
    {
        
        /// <summary>
        /// Defines if the date and time is set via NTP or manually.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public SetDateTimeType DateTimeType;
        
        /// <summary>
        /// Automatically adjust Daylight savings if defined in TimeZone.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool DaylightSavings;
        
        /// <summary>
        /// The time zone in POSIX 1003.1 format
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public TimeZone TimeZone;
        
        /// <summary>
        /// Date and time in UTC. If time is obtained via NTP, UTCDateTime has no meaning
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public DateTime UTCDateTime;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum SetDateTimeType
    {
        
        Manual,
        
        NTP,
    }
    
    /// <summary>
    /// The TZ format is specified by POSIX, please refer to POSIX 1003.1 section 8.3
    ///				Example: Europe, Paris TZ=CET-1CEST,M3.5.0/2,M10.5.0/3
    ///				CET = designation for standard time when daylight saving is not in force
    ///				-1 = offset in hours = negative so 1 hour east of Greenwich meridian
    ///				CEST = designation when daylight saving is in force ("Central European Summer Time")
    ///				, = no offset number between code and comma, so default to one hour ahead for daylight saving
    ///				M3.5.0 = when daylight saving starts = the last Sunday in March (the "5th" week means the last in the month)
    ///				/2, = the local time when the switch occurs = 2 a.m. in this case
    ///				M10.5.0 = when daylight saving ends = the last Sunday in October.
    ///				/3, = the local time when the switch occurs = 3 a.m. in this case
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class TimeZone
    {
        
        /// <summary>
        /// Posix timezone string.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string TZ;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class DateTime
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Time Time;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public Date Date;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Time
    {
        
        /// <summary>
        /// Range is 0 to 23.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Hour;
        
        /// <summary>
        /// Range is 0 to 59.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int Minute;
        
        /// <summary>
        /// Range is 0 to 61 (typically 59).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int Second;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Date
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Year;
        
        /// <summary>
        /// Range is 1 to 12.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int Month;
        
        /// <summary>
        /// Range is 1 to 31.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int Day;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetSystemDateAndTimeResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetSystemDateAndTimeRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetSystemDateAndTimeResponse
    {
        
        /// <summary>
        /// Contains information whether system date and time are set manually or by NTP, daylight savings is on or off, time zone in POSIX 1003.1 format and system date and time in UTC and also local system date and time.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public SystemDateTime SystemDateAndTime;
    }
    
    /// <summary>
    /// General date time inforamtion returned by the GetSystemDateTime method.
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class SystemDateTime
    {
        
        /// <summary>
        /// Indicates if the time is set manully or through NTP.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public SetDateTimeType DateTimeType;
        
        /// <summary>
        /// Informative indicator whether daylight savings is currently on/off.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool DaylightSavings;
        
        /// <summary>
        /// Timezone information in Posix format.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public TimeZone TimeZone;
        
        /// <summary>
        /// Current system date and time in UTC format. This field is mandatory since version 2.0.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public DateTime UTCDateTime;
        
        /// <summary>
        /// Date and time in local format.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public DateTime LocalDateTime;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public SystemDateTimeExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class SystemDateTimeExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetSystemFactoryDefaultRequest
    {
        
        /// <summary>
        /// Specifies the factory default action type.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public FactoryDefaultType FactoryDefault;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum FactoryDefaultType
    {
        
        Hard,
        
        Soft,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetSystemFactoryDefaultResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class UpgradeSystemFirmwareRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AttachmentData Firmware;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class AttachmentData
    {
        
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.w3.org/2005/05/xmlmime")]
        public string contentType;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Include Include;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.w3.org/2004/08/xop/include")]
    public class Include
    {
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string href;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class UpgradeSystemFirmwareResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Message;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SystemRebootRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SystemRebootResponse
    {
        
        /// <summary>
        /// Contains the reboot message sent by the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Message;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class RestoreSystemRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public BackupFile BackupFiles;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class BackupFile
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public AttachmentData Data;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class RestoreSystemResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetSystemBackupRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetSystemBackupResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public BackupFile BackupFiles;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetSystemLogRequest
    {
        
        /// <summary>
        /// Specifies the type of system log to get.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public SystemLogType LogType;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum SystemLogType
    {
        
        System,
        
        Access,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetSystemLogResponse
    {
        
        /// <summary>
        /// Contains the system log information.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public SystemLog SystemLog;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class SystemLog
    {
        
        /// <summary>
        /// The log information as attachment data.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AttachmentData Binary;
        
        /// <summary>
        /// The log information as character data.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string String;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetSystemSupportInformationRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetSystemSupportInformationResponse
    {
        
        /// <summary>
        /// Contains the arbitary device diagnostics information.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public SupportInformation SupportInformation;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class SupportInformation
    {
        
        /// <summary>
        /// The support information as attachment data.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AttachmentData Binary;
        
        /// <summary>
        /// The support information as character data.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string String;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetScopesRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetScopesResponse
    {
        
        /// <summary>
        /// Contains a list of URI definining the device scopes. Scope parameters can be of two types: fixed and configurable. Fixed parameters can not be altered.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Scope Scopes;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Scope
    {
        
        /// <summary>
        /// Indicates if the scope is fixed or configurable.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ScopeDefinition ScopeDef;
        
        /// <summary>
        /// Scope item URI.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ScopeItem;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum ScopeDefinition
    {
        
        Fixed,
        
        Configurable,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetScopesRequest
    {
        
        /// <summary>
        /// Contains a list of scope parameters that will replace all existing configurable scope parameters.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Scopes;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetScopesResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class AddScopesRequest
    {
        
        /// <summary>
        /// Contains a list of new configurable scope parameters that will be added to the existing configurable scope.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ScopeItem;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class AddScopesResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class RemoveScopesRequest
    {
        
        /// <summary>
        /// Contains a list of URIs that should be removed from the device scope.
        ///									Note that the response message always will match the request or an error will be returned. The use of the response is for that reason deprecated.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ScopeItem;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class RemoveScopesResponse
    {
        
        /// <summary>
        /// Contains a list of URIs that has been removed from the device scope
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string[] ScopeItem;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetDiscoveryModeRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetDiscoveryModeResponse
    {
        
        /// <summary>
        /// Indicator of discovery mode: Discoverable, NonDiscoverable.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DiscoveryMode DiscoveryMode;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum DiscoveryMode
    {
        
        Discoverable,
        
        NonDiscoverable,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetDiscoveryModeRequest
    {
        
        /// <summary>
        /// Indicator of discovery mode: Discoverable, NonDiscoverable.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DiscoveryMode DiscoveryMode;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetDiscoveryModeResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetRemoteDiscoveryModeRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetRemoteDiscoveryModeResponse
    {
        
        /// <summary>
        /// Indicator of discovery mode: Discoverable, NonDiscoverable.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DiscoveryMode RemoteDiscoveryMode;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetRemoteDiscoveryModeRequest
    {
        
        /// <summary>
        /// Indicator of discovery mode: Discoverable, NonDiscoverable.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DiscoveryMode RemoteDiscoveryMode;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetRemoteDiscoveryModeResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetDPAddressesRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetDPAddressesResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public NetworkHost[] DPAddress;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NetworkHost
    {
        
        /// <summary>
        /// Network host type: IPv4, IPv6 or DNS.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public NetworkHostType Type;
        
        /// <summary>
        /// IPv4 address.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string IPv4Address;
        
        /// <summary>
        /// IPv6 address.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string IPv6Address;
        
        /// <summary>
        /// DNS name.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string DNSname;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public NetworkHostExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum NetworkHostType
    {
        
        IPv4,
        
        IPv6,
        
        DNS,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NetworkHostExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetDPAddressesRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public NetworkHost[] DPAddress;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetDPAddressesResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetEndpointReferenceRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetEndpointReferenceResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string GUID;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetRemoteUserRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetRemoteUserResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public RemoteUser RemoteUser;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class RemoteUser
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Username;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Password;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool UseDerivedPassword;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetRemoteUserRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public RemoteUser RemoteUser;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetRemoteUserResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetUsersRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetUsersResponse
    {
        
        /// <summary>
        /// Contains a list of the onvif users and following information is included in each entry: username and user level.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public User[] User;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class User
    {
        
        /// <summary>
        /// Username string.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Username;
        
        /// <summary>
        /// Password string.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Password;
        
        /// <summary>
        /// User level string.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public UserLevel UserLevel;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public UserExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum UserLevel
    {
        
        Administrator,
        
        Operator,
        
        User,
        
        Anonymous,
        
        Extended,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class UserExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class CreateUsersRequest
    {
        
        /// <summary>
        /// Creates new device users and corresponding credentials. Each user entry includes: username, password and user level. Either all users are created successfully or a fault message MUST be returned without creating any user. If trying to create several users with exactly the same username the request is rejected and no users are created. If password is missing, then fault message Too weak password is returned.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public User User;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class CreateUsersResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class DeleteUsersRequest
    {
        
        /// <summary>
        /// Deletes users on an device and there may exist users that cannot be deleted to ensure access to the unit. Either all users are deleted successfully or a fault message MUST be returned and no users be deleted. If a username exists multiple times in the request, then a fault message is returned.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Username;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class DeleteUsersResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetUserRequest
    {
        
        /// <summary>
        /// Updates the credentials for one or several users on an device. Either all change requests are processed successfully or a fault message MUST be returned. If the request contains the same username multiple times, a fault message is returned.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public User User;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetUserResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetWsdlUrlRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetWsdlUrlResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string WsdlUrl;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetCapabilitiesRequest
    {
        
        /// <summary>
        /// List of categories to retrieve capability information on.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public CapabilityCategory[] Category;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum CapabilityCategory
    {
        
        All,
        
        Analytics,
        
        Device,
        
        Events,
        
        Imaging,
        
        Media,
        
        PTZ,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetCapabilitiesResponse
    {
        
        /// <summary>
        /// Capability information.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Capabilities Capabilities;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Capabilities
    {
        
        /// <summary>
        /// Analytics capabilities
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AnalyticsCapabilities Analytics;
        
        /// <summary>
        /// Device capabilities
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public DeviceCapabilities Device;
        
        /// <summary>
        /// Event capabilities
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public EventCapabilities Events;
        
        /// <summary>
        /// Imaging capabilities
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public ImagingCapabilities Imaging;
        
        /// <summary>
        /// Media capabilities
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public MediaCapabilities Media;
        
        /// <summary>
        /// PTZ capabilities
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public PTZCapabilities PTZ;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public CapabilitiesExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class AnalyticsCapabilities
    {
        
        /// <summary>
        /// Analytics service URI.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string XAddr;
        
        /// <summary>
        /// Indicates whether or not rules are supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool RuleSupport;
        
        /// <summary>
        /// Indicates whether or not modules are supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool AnalyticsModuleSupport;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class DeviceCapabilities
    {
        
        /// <summary>
        /// Device service URI.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string XAddr;
        
        /// <summary>
        /// Network capabilities.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public NetworkCapabilities1 Network;
        
        /// <summary>
        /// System capabilities.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public SystemCapabilities1 System;
        
        /// <summary>
        /// I/O capabilities.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public IOCapabilities IO;
        
        /// <summary>
        /// Security capabilities.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public SecurityCapabilities1 Security;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public DeviceCapabilitiesExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NetworkCapabilities1
    {
        
        /// <summary>
        /// Indicates whether or not IP filtering is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool IPFilter;
        
        /// <summary>
        /// Indicates whether or not zeroconf is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool ZeroConfiguration;
        
        /// <summary>
        /// Indicates whether or not IPv6 is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool IPVersion6;
        
        /// <summary>
        /// Indicates whether or not  is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public bool DynDNS;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public NetworkCapabilitiesExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NetworkCapabilitiesExtension
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool Dot11Configuration;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public NetworkCapabilitiesExtension2 Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NetworkCapabilitiesExtension2
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class SystemCapabilities1
    {
        
        /// <summary>
        /// Indicates whether or not WS Discovery resolve requests are supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool DiscoveryResolve;
        
        /// <summary>
        /// Indicates whether or not WS-Discovery Bye is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool DiscoveryBye;
        
        /// <summary>
        /// Indicates whether or not remote discovery is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool RemoteDiscovery;
        
        /// <summary>
        /// Indicates whether or not system backup is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public bool SystemBackup;
        
        /// <summary>
        /// Indicates whether or not system logging is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public bool SystemLogging;
        
        /// <summary>
        /// Indicates whether or not firmware upgrade is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public bool FirmwareUpgrade;
        
        /// <summary>
        /// Indicates supported ONVIF version(s).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public OnvifVersion SupportedVersions;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public SystemCapabilitiesExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class SystemCapabilitiesExtension
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool HttpFirmwareUpgrade;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool HttpSystemBackup;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool HttpSystemLogging;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public bool HttpSupportInformation;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public SystemCapabilitiesExtension2 Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class SystemCapabilitiesExtension2
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class IOCapabilities
    {
        
        /// <summary>
        /// Number of input connectors.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int InputConnectors;
        
        /// <summary>
        /// Number of relay outputs.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int RelayOutputs;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public IOCapabilitiesExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class IOCapabilitiesExtension
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool Auxiliary;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string[] AuxiliaryCommands;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public IOCapabilitiesExtension2 Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class IOCapabilitiesExtension2
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class SecurityCapabilities1
    {
        
        /// <summary>
        /// Indicates whether or not TLS 1.1 is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName="TLS1.1", Order=0)]
        public bool TLS11;
        
        /// <summary>
        /// Indicates whether or not TLS 1.2 is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName="TLS1.2", Order=1)]
        public bool TLS12;
        
        /// <summary>
        /// Indicates whether or not onboard key generation is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool OnboardKeyGeneration;
        
        /// <summary>
        /// Indicates whether or not access policy configuration is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public bool AccessPolicyConfig;
        
        /// <summary>
        /// Indicates whether or not WS-Security X.509 token is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName="X.509Token", Order=4)]
        public bool X509Token;
        
        /// <summary>
        /// Indicates whether or not WS-Security SAML token is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public bool SAMLToken;
        
        /// <summary>
        /// Indicates whether or not WS-Security Kerberos token is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public bool KerberosToken;
        
        /// <summary>
        /// Indicates whether or not WS-Security REL token is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public bool RELToken;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public SecurityCapabilitiesExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class SecurityCapabilitiesExtension
    {
        
        [System.Xml.Serialization.XmlElementAttribute(ElementName="TLS1.0", Order=0)]
        public bool TLS10;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public SecurityCapabilitiesExtension2 Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class SecurityCapabilitiesExtension2
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool Dot1X;
        
        /// <summary>
        /// EAP Methods supported by the device. The int values refer to the IANA EAP Registry.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int[] SupportedEAPMethod;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool RemoteUserHandling;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class DeviceCapabilitiesExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class EventCapabilities
    {
        
        /// <summary>
        /// Event service URI.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string XAddr;
        
        /// <summary>
        /// Indicates whether or not WS Subscription policy is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool WSSubscriptionPolicySupport;
        
        /// <summary>
        /// Indicates whether or not WS Pull Point is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool WSPullPointSupport;
        
        /// <summary>
        /// Indicates whether or not WS Pausable Subscription Manager Interface is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public bool WSPausableSubscriptionManagerInterfaceSupport;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class ImagingCapabilities
    {
        
        /// <summary>
        /// Imaging service URI.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string XAddr;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class MediaCapabilities
    {
        
        /// <summary>
        /// Media service URI.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string XAddr;
        
        /// <summary>
        /// Streaming capabilities.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public RealTimeStreamingCapabilities StreamingCapabilities;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public MediaCapabilitiesExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class RealTimeStreamingCapabilities
    {
        
        /// <summary>
        /// Indicates whether or not RTP multicast is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool RTPMulticast;
        
        /// <summary>
        /// Indicates whether or not RTP over TCP is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool RTP_TCP;
        
        /// <summary>
        /// Indicates whether or not RTP/RTSP/TCP is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool RTP_RTSP_TCP;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public RealTimeStreamingCapabilitiesExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class RealTimeStreamingCapabilitiesExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class MediaCapabilitiesExtension
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ProfileCapabilities ProfileCapabilities;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class ProfileCapabilities
    {
        
        /// <summary>
        /// Maximum number of profiles.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int MaximumNumberOfProfiles;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZCapabilities
    {
        
        /// <summary>
        /// PTZ service URI.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string XAddr;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class CapabilitiesExtension
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DeviceIOCapabilities DeviceIO;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public DisplayCapabilities Display;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public RecordingCapabilities Recording;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public SearchCapabilities Search;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public ReplayCapabilities Replay;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public ReceiverCapabilities Receiver;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public AnalyticsDeviceCapabilities AnalyticsDevice;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public CapabilitiesExtension2 Extensions;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class DeviceIOCapabilities
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string XAddr;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int VideoSources;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int VideoOutputs;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public int AudioSources;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public int AudioOutputs;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public int RelayOutputs;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class DisplayCapabilities
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string XAddr;
        
        /// <summary>
        /// Indication that the SetLayout command supports only predefined layouts.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool FixedLayout;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class RecordingCapabilities
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string XAddr;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool ReceiverSource;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool MediaProfileSource;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public bool DynamicRecordings;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public bool DynamicTracks;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public int MaxStringLength;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class SearchCapabilities
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string XAddr;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool MetadataSearch;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class ReplayCapabilities
    {
        
        /// <summary>
        /// The address of the replay service.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string XAddr;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class ReceiverCapabilities
    {
        
        /// <summary>
        /// The address of the receiver service.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string XAddr;
        
        /// <summary>
        /// Indicates whether the device can receive RTP multicast streams.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool RTP_Multicast;
        
        /// <summary>
        /// Indicates whether the device can receive RTP/TCP streams
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool RTP_TCP;
        
        /// <summary>
        /// Indicates whether the device can receive RTP/RTSP/TCP streams.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public bool RTP_RTSP_TCP;
        
        /// <summary>
        /// The maximum number of receivers supported by the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public int SupportedReceivers;
        
        /// <summary>
        /// The maximum allowed length for RTSP URIs.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public int MaximumRTSPURILength;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class AnalyticsDeviceCapabilities
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string XAddr;
        
        /// <summary>
        /// Obsolete property.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool RuleSupport;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public AnalyticsDeviceExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class AnalyticsDeviceExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class CapabilitiesExtension2
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetHostnameRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetHostnameResponse
    {
        
        /// <summary>
        /// Contains the hostname information.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public HostnameInformation HostnameInformation;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class HostnameInformation
    {
        
        /// <summary>
        /// Indicates whether the hostname is obtained from DHCP or not.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool FromDHCP;
        
        /// <summary>
        /// Indicates the hostname.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public HostnameInformationExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class HostnameInformationExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetHostnameRequest
    {
        
        /// <summary>
        /// The hostname to set.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetHostnameResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetHostnameFromDHCPRequest
    {
        
        /// <summary>
        /// True if the hostname shall be obtained via DHCP.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool FromDHCP;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetHostnameFromDHCPResponse
    {
        
        /// <summary>
        /// Indicates whether or not a reboot is required after configuration updates.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool RebootNeeded;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetDNSRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetDNSResponse
    {
        
        /// <summary>
        /// DNS information.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DNSInformation DNSInformation;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class DNSInformation
    {
        
        /// <summary>
        /// Indicates whether or not DNS information is retrieved from DHCP.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool FromDHCP;
        
        /// <summary>
        /// Search domain.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string[] SearchDomain;
        
        /// <summary>
        /// List of DNS addresses received from DHCP.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public IPAddress[] DNSFromDHCP;
        
        /// <summary>
        /// List of manually entered DNS addresses.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public IPAddress[] DNSManual;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public DNSInformationExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class IPAddress
    {
        
        /// <summary>
        /// Indicates if the address is an IPv4 or IPv6 address.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public IPType Type;
        
        /// <summary>
        /// IPv4 address.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string IPv4Address;
        
        /// <summary>
        /// IPv6 address
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string IPv6Address;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum IPType
    {
        
        IPv4,
        
        IPv6,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class DNSInformationExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetDNSRequest
    {
        
        /// <summary>
        /// Indicate if the DNS address is to be retrieved using DHCP.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool FromDHCP;
        
        /// <summary>
        /// DNS search domain.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string[] SearchDomain;
        
        /// <summary>
        /// DNS address(es) set manually.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public IPAddress[] DNSManual;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetDNSResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetNTPRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetNTPResponse
    {
        
        /// <summary>
        /// NTP information.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public NTPInformation NTPInformation;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NTPInformation
    {
        
        /// <summary>
        /// Indicates if NTP information is to be retrieved by using DHCP.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool FromDHCP;
        
        /// <summary>
        /// List of NTP addresses retrieved by using DHCP.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public NetworkHost[] NTPFromDHCP;
        
        /// <summary>
        /// List of manually entered NTP addresses.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public NetworkHost[] NTPManual;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public NTPInformationExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NTPInformationExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetNTPRequest
    {
        
        /// <summary>
        /// Indicate if NTP address information is to be retrieved using DHCP.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool FromDHCP;
        
        /// <summary>
        /// Manual NTP settings.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public NetworkHost[] NTPManual;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetNTPResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetDynamicDNSRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetDynamicDNSResponse
    {
        
        /// <summary>
        /// Dynamic DNS information.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DynamicDNSInformation DynamicDNSInformation;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class DynamicDNSInformation
    {
        
        /// <summary>
        /// Dynamic DNS type.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DynamicDNSType Type;
        
        /// <summary>
        /// DNS name.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name;
        
        /// <summary>
        /// Time to live.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string TTL;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public DynamicDNSInformationExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum DynamicDNSType
    {
        
        NoUpdate,
        
        ClientUpdates,
        
        ServerUpdates,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class DynamicDNSInformationExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetDynamicDNSRequest
    {
        
        /// <summary>
        /// Dynamic DNS type.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DynamicDNSType Type;
        
        /// <summary>
        /// DNS name.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name;
        
        /// <summary>
        /// DNS record time to live.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string TTL;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetDynamicDNSResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetNetworkInterfacesRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetNetworkInterfacesResponse
    {
        
        /// <summary>
        /// List of network interfaces.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public NetworkInterface NetworkInterfaces;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NetworkInterface : DeviceEntity
    {
        
        /// <summary>
        /// Indicates whether or not an interface is enabled.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool Enabled;
        
        /// <summary>
        /// Network interface information
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public NetworkInterfaceInfo Info;
        
        /// <summary>
        /// Link configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public NetworkInterfaceLink Link;
        
        /// <summary>
        /// IPv4 network interface configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public IPv4NetworkInterface IPv4;
        
        /// <summary>
        /// IPv6 network interface configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public IPv6NetworkInterface IPv6;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public NetworkInterfaceExtension Extension;
    }
    
    /// <summary>
    /// Base class for physical entities like inputs and outputs.
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NetworkInterface))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RelayOutput))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StorageConfiguration))]
    public class DeviceEntity
    {
        
        /// <summary>
        /// Unique identifier referencing the physical entity.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string token;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NetworkInterfaceInfo
    {
        
        /// <summary>
        /// Network interface name, for example eth0.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name;
        
        /// <summary>
        /// Network interface MAC address.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string HwAddress;
        
        /// <summary>
        /// Maximum transmission unit.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int MTU;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NetworkInterfaceLink
    {
        
        /// <summary>
        /// Configured link settings.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public NetworkInterfaceConnectionSetting AdminSettings;
        
        /// <summary>
        /// Current active link settings.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public NetworkInterfaceConnectionSetting OperSettings;
        
        /// <summary>
        /// Integer indicating interface type, for example: 6 is ethernet.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int InterfaceType;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NetworkInterfaceConnectionSetting
    {
        
        /// <summary>
        /// Auto negotiation on/off.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool AutoNegotiation;
        
        /// <summary>
        /// Speed.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int Speed;
        
        /// <summary>
        /// Duplex type, Half or Full.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public Duplex Duplex;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum Duplex
    {
        
        Full,
        
        Half,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class IPv4NetworkInterface
    {
        
        /// <summary>
        /// Indicates whether or not IPv4 is enabled.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool Enabled;
        
        /// <summary>
        /// IPv4 configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public IPv4Configuration Config;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class IPv4Configuration
    {
        
        /// <summary>
        /// List of manually added IPv4 addresses.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PrefixedIPv4Address[] Manual;
        
        /// <summary>
        /// Link local address.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public PrefixedIPv4Address LinkLocal;
        
        /// <summary>
        /// IPv4 address configured by using DHCP.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public PrefixedIPv4Address FromDHCP;
        
        /// <summary>
        /// Indicates whether or not DHCP is used.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public bool DHCP;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PrefixedIPv4Address
    {
        
        /// <summary>
        /// IPv4 address
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Address;
        
        /// <summary>
        /// Prefix/submask length
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int PrefixLength;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class IPv6NetworkInterface
    {
        
        /// <summary>
        /// Indicates whether or not IPv6 is enabled.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool Enabled;
        
        /// <summary>
        /// IPv6 configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public IPv6Configuration Config;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class IPv6Configuration
    {
        
        /// <summary>
        /// Indicates whether router advertisment is used.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool AcceptRouterAdvert;
        
        /// <summary>
        /// DHCP configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public IPv6DHCPConfiguration DHCP;
        
        /// <summary>
        /// List of manually entered IPv6 addresses.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public PrefixedIPv6Address[] Manual;
        
        /// <summary>
        /// List of link local IPv6 addresses.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public PrefixedIPv6Address[] LinkLocal;
        
        /// <summary>
        /// List of IPv6 addresses configured by using DHCP.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public PrefixedIPv6Address[] FromDHCP;
        
        /// <summary>
        /// List of IPv6 addresses configured by using router advertisment.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public PrefixedIPv6Address[] FromRA;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public IPv6ConfigurationExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum IPv6DHCPConfiguration
    {
        
        Auto,
        
        Stateful,
        
        Stateless,
        
        Off,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PrefixedIPv6Address
    {
        
        /// <summary>
        /// IPv6 address
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Address;
        
        /// <summary>
        /// Prefix/submask length
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int PrefixLength;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class IPv6ConfigurationExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NetworkInterfaceExtension
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int InterfaceType;
        
        /// <summary>
        /// Extension point prepared for future 802.3 configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public Dot3Configuration[] Dot3;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public Dot11Configuration[] Dot11;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public NetworkInterfaceExtension2 Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Dot3Configuration
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Dot11Configuration
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public byte[] SSID;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public Dot11StationMode Mode;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Alias;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public int Priority;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public Dot11SecurityConfiguration Security;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum Dot11StationMode
    {
        
        Adhoc,
        
        Infrastructure,
        
        Extended,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Dot11SecurityConfiguration
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Dot11SecurityMode Mode;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public Dot11Cipher Algorithm;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public Dot11PSKSet PSK;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Dot1X;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public Dot11SecurityConfigurationExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum Dot11SecurityMode
    {
        
        None,
        
        WEP,
        
        PSK,
        
        Dot1X,
        
        Extended,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum Dot11Cipher
    {
        
        CCMP,
        
        TKIP,
        
        Any,
        
        Extended,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Dot11PSKSet
    {
        
        /// <summary>
        /// According to IEEE802.11-2007 H.4.1 the RSNA PSK consists of 256 bits, or 64 octets when represented in hex
        ///					Either Key or Passphrase shall be given, if both are supplied Key shall be used by the device and Passphrase ignored.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public byte[] Key;
        
        /// <summary>
        /// According to IEEE802.11-2007 H.4.1 a pass-phrase is a sequence of between 8 and 63 ASCII-encoded characters and
        ///					each character in the pass-phrase must have an encoding in the range of 32 to 126 (decimal),inclusive.
        ///					If only Passpharse is supplied the Key shall be derived using the algorithm described in IEEE802.11-2007 section H.4
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Passphrase;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public Dot11PSKSetExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Dot11PSKSetExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Dot11SecurityConfigurationExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NetworkInterfaceExtension2
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetNetworkInterfacesRequest
    {
        
        /// <summary>
        /// Symbolic network interface name.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string InterfaceToken;
        
        /// <summary>
        /// Network interface name.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public NetworkInterfaceSetConfiguration NetworkInterface;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NetworkInterfaceSetConfiguration
    {
        
        /// <summary>
        /// Indicates whether or not an interface is enabled.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool Enabled;
        
        /// <summary>
        /// Link configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public NetworkInterfaceConnectionSetting Link;
        
        /// <summary>
        /// Maximum transmission unit.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int MTU;
        
        /// <summary>
        /// IPv4 network interface configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public IPv4NetworkInterfaceSetConfiguration IPv4;
        
        /// <summary>
        /// IPv6 network interface configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public IPv6NetworkInterfaceSetConfiguration IPv6;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public NetworkInterfaceSetConfigurationExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class IPv4NetworkInterfaceSetConfiguration
    {
        
        /// <summary>
        /// Indicates whether or not IPv4 is enabled.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool Enabled;
        
        /// <summary>
        /// List of manually added IPv4 addresses.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public PrefixedIPv4Address[] Manual;
        
        /// <summary>
        /// Indicates whether or not DHCP is used.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool DHCP;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class IPv6NetworkInterfaceSetConfiguration
    {
        
        /// <summary>
        /// Indicates whether or not IPv6 is enabled.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool Enabled;
        
        /// <summary>
        /// Indicates whether router advertisment is used.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool AcceptRouterAdvert;
        
        /// <summary>
        /// List of manually added IPv6 addresses.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public PrefixedIPv6Address[] Manual;
        
        /// <summary>
        /// DHCP configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public IPv6DHCPConfiguration DHCP;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NetworkInterfaceSetConfigurationExtension
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Dot3Configuration[] Dot3;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public Dot11Configuration[] Dot11;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public NetworkInterfaceSetConfigurationExtension2 Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NetworkInterfaceSetConfigurationExtension2
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetNetworkInterfacesResponse
    {
        
        /// <summary>
        /// Indicates whether or not a reboot is required after configuration updates.
        ///									If a device responds with RebootNeeded set to false, the device can be reached
        ///									via the new IP address without further action. A client should be aware that a device
        ///									may not be responsive for a short period of time until it signals availability at
        ///									the new address via the discovery Hello messages.
        ///									If a device responds with RebootNeeded set to true, it will be further available under
        ///									its previous IP address. The settings will only be activated when the device is
        ///									rebooted via the SystemReboot command.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool RebootNeeded;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetNetworkProtocolsRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetNetworkProtocolsResponse
    {
        
        /// <summary>
        /// Contains an array of defined protocols supported by the device. There are three protocols defined; HTTP, HTTPS and RTSP. The following parameters can be retrieved for each protocol: port and enable/disable.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public NetworkProtocol[] NetworkProtocols;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NetworkProtocol
    {
        
        /// <summary>
        /// Network protocol type string.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public NetworkProtocolType Name;
        
        /// <summary>
        /// Indicates if the protocol is enabled or not.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool Enabled;
        
        /// <summary>
        /// The port that is used by the protocol.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int Port;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public NetworkProtocolExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum NetworkProtocolType
    {
        
        HTTP,
        
        HTTPS,
        
        RTSP,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NetworkProtocolExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetNetworkProtocolsRequest
    {
        
        /// <summary>
        /// Configures one or more defined network protocols supported by the device. There are currently three protocols defined; HTTP, HTTPS and RTSP. The following parameters can be set for each protocol: port and enable/disable.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public NetworkProtocol NetworkProtocols;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetNetworkProtocolsResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetNetworkDefaultGatewayRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetNetworkDefaultGatewayResponse
    {
        
        /// <summary>
        /// Gets the default IPv4 and IPv6 gateway settings from the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public NetworkGateway NetworkGateway;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NetworkGateway
    {
        
        /// <summary>
        /// IPv4 address string.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string[] IPv4Address;
        
        /// <summary>
        /// IPv6 address string.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string[] IPv6Address;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetNetworkDefaultGatewayRequest
    {
        
        /// <summary>
        /// Sets IPv4 gateway address used as default setting.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string[] IPv4Address;
        
        /// <summary>
        /// Sets IPv6 gateway address used as default setting.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string[] IPv6Address;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetNetworkDefaultGatewayResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetZeroConfigurationRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetZeroConfigurationResponse
    {
        
        /// <summary>
        /// Contains the zero-configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public NetworkZeroConfiguration ZeroConfiguration;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NetworkZeroConfiguration
    {
        
        /// <summary>
        /// Unique identifier of network interface.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string InterfaceToken;
        
        /// <summary>
        /// Indicates whether the zero-configuration is enabled or not.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool Enabled;
        
        /// <summary>
        /// The zero-configuration IPv4 address(es)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string[] Addresses;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public NetworkZeroConfigurationExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NetworkZeroConfigurationExtension
    {
        
        /// <summary>
        /// Optional array holding the configuration for the second and possibly further interfaces.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public NetworkZeroConfiguration[] Additional;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public NetworkZeroConfigurationExtension2 Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NetworkZeroConfigurationExtension2
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetZeroConfigurationRequest
    {
        
        /// <summary>
        /// Unique identifier referencing the physical interface.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string InterfaceToken;
        
        /// <summary>
        /// Specifies if the zero-configuration should be enabled or not.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool Enabled;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetZeroConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetIPAddressFilterRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetIPAddressFilterResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public IPAddressFilter IPAddressFilter;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class IPAddressFilter
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public IPAddressFilterType Type;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public PrefixedIPv4Address[] IPv4Address;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public PrefixedIPv6Address[] IPv6Address;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public IPAddressFilterExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum IPAddressFilterType
    {
        
        Allow,
        
        Deny,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class IPAddressFilterExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetIPAddressFilterRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public IPAddressFilter IPAddressFilter;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetIPAddressFilterResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class AddIPAddressFilterRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public IPAddressFilter IPAddressFilter;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class AddIPAddressFilterResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class RemoveIPAddressFilterRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public IPAddressFilter IPAddressFilter;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class RemoveIPAddressFilterResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetAccessPolicyRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetAccessPolicyResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public BinaryData PolicyFile;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class BinaryData
    {
        
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.w3.org/2005/05/xmlmime")]
        public string contentType;
        
        /// <summary>
        /// base64 encoded binary data.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public byte[] Data;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetAccessPolicyRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public BinaryData PolicyFile;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetAccessPolicyResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class CreateCertificateRequest
    {
        
        /// <summary>
        /// Certificate id.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string CertificateID;
        
        /// <summary>
        /// Identification of the entity associated with the public-key.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Subject;
        
        /// <summary>
        /// Certificate validity start date.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public System.DateTime ValidNotBefore;
        
        /// <summary>
        /// Certificate expiry start date.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public System.DateTime ValidNotAfter;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class CreateCertificateResponse
    {
        
        /// <summary>
        /// base64 encoded DER representation of certificate.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Certificate NvtCertificate;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Certificate
    {
        
        /// <summary>
        /// Certificate id.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string CertificateID;
        
        /// <summary>
        /// base64 encoded DER representation of certificate.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Certificate", Order=1)]
        public BinaryData Certificate1;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetCertificatesRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetCertificatesResponse
    {
        
        /// <summary>
        /// Id and base64 encoded DER representation of all available certificates.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Certificate[] NvtCertificate;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetCertificatesStatusRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetCertificatesStatusResponse
    {
        
        /// <summary>
        /// Indicates if a certificate is used in an optional HTTPS configuration of the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public CertificateStatus[] CertificateStatus;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class CertificateStatus
    {
        
        /// <summary>
        /// Certificate id.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string CertificateID;
        
        /// <summary>
        /// Indicates whether or not a certificate is used in a HTTPS configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool Status;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetCertificatesStatusRequest
    {
        
        /// <summary>
        /// Indicates if a certificate is to be used in an optional HTTPS configuration of the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public CertificateStatus[] CertificateStatus;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetCertificatesStatusResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class DeleteCertificatesRequest
    {
        
        /// <summary>
        /// List of ids of certificates to delete.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string CertificateID;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class DeleteCertificatesResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetPkcs10RequestRequest
    {
        
        /// <summary>
        /// List of ids of certificates to delete.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string CertificateID;
        
        /// <summary>
        /// Relative Dinstinguished Name(RDN) CommonName(CN).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Subject;
        
        /// <summary>
        /// Optional base64 encoded DER attributes.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public BinaryData Attributes;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetPkcs10RequestResponse
    {
        
        /// <summary>
        /// base64 encoded DER representation of certificate.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public BinaryData Pkcs10Request;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class LoadCertificatesRequest
    {
        
        /// <summary>
        /// Optional id and base64 encoded DER representation of certificate.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Certificate NVTCertificate;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class LoadCertificatesResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetClientCertificateModeRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetClientCertificateModeResponse
    {
        
        /// <summary>
        /// Indicates whether or not client certificates are required by device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool Enabled;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetClientCertificateModeRequest
    {
        
        /// <summary>
        /// Indicates whether or not client certificates are required by device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool Enabled;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetClientCertificateModeResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetRelayOutputsRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetRelayOutputsResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public RelayOutput[] RelayOutputs;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class RelayOutput : DeviceEntity
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public RelayOutputSettings Properties;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class RelayOutputSettings
    {
        
        /// <summary>
        /// 'Bistable' or 'Monostable'
        ///					Bistable – After setting the state, the relay remains in this state.Monostable – After setting the state, the relay returns to its idle state after the specified time.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public RelayMode Mode;
        
        /// <summary>
        /// Time after which the relay returns to its idle state if it is in monostable mode. If the Mode field is set to bistable mode the value of the parameter can be ignored.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string DelayTime;
        
        /// <summary>
        /// 'open' or 'closed'
        ///			'open' means that the relay is open when the relay state is set to 'inactive' through the trigger command and closed when the state is set to 'active' through the same command.'closed' means that the relay is closed when the relay state is set to 'inactive' through the trigger command and open when the state is set to 'active' through the same command.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public RelayIdleState IdleState;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum RelayMode
    {
        
        Monostable,
        
        Bistable,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum RelayIdleState
    {
        
        closed,
        
        open,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetRelayOutputSettingsRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string RelayOutputToken;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public RelayOutputSettings Properties;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetRelayOutputSettingsResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetRelayOutputStateRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string RelayOutputToken;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public RelayLogicalState LogicalState;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum RelayLogicalState
    {
        
        active,
        
        inactive,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetRelayOutputStateResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SendAuxiliaryCommandRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string AuxiliaryCommand;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SendAuxiliaryCommandResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string AuxiliaryCommandResponse;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetCACertificatesRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetCACertificatesResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Certificate[] CACertificate;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class LoadCertificateWithPrivateKeyRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public CertificateWithPrivateKey CertificateWithPrivateKey;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class CertificateWithPrivateKey
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string CertificateID;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public BinaryData Certificate;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public BinaryData PrivateKey;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class LoadCertificateWithPrivateKeyResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetCertificateInformationRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string CertificateID;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetCertificateInformationResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public CertificateInformation CertificateInformation;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class CertificateInformation
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string CertificateID;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string IssuerDN;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string SubjectDN;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public CertificateUsage KeyUsage;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public CertificateUsage ExtendedKeyUsage;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public int KeyLength;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string Version;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string SerialNum;
        
        /// <summary>
        /// Validity Range is from "NotBefore" to "NotAfter"; the corresponding DateTimeRange is from "From" to "Until"
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string SignatureAlgorithm;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public DateTimeRange Validity;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public CertificateInformationExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class CertificateUsage
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class DateTimeRange
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public System.DateTime From;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public System.DateTime Until;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class CertificateInformationExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class LoadCACertificatesRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Certificate CACertificate;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class LoadCACertificatesResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class CreateDot1XConfigurationRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Dot1XConfiguration Dot1XConfiguration;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Dot1XConfiguration
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Dot1XConfigurationToken;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Identity;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string AnonymousID;
        
        /// <summary>
        /// EAP Method type as defined in IANA EAP Registry.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public int EAPMethod;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string[] CACertificateID;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public EAPMethodConfiguration EAPMethodConfiguration;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public Dot1XConfigurationExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class EAPMethodConfiguration
    {
        
        /// <summary>
        /// Confgiuration information for TLS Method.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public TLSConfiguration TLSConfiguration;
        
        /// <summary>
        /// Password for those EAP Methods that require a password. The password shall never be returned on a get method.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Password;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public EapMethodExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class TLSConfiguration
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string CertificateID;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class EapMethodExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Dot1XConfigurationExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class CreateDot1XConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetDot1XConfigurationRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Dot1XConfiguration Dot1XConfiguration;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetDot1XConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetDot1XConfigurationRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Dot1XConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetDot1XConfigurationResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Dot1XConfiguration Dot1XConfiguration;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetDot1XConfigurationsRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetDot1XConfigurationsResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Dot1XConfiguration[] Dot1XConfiguration;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class DeleteDot1XConfigurationRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string[] Dot1XConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class DeleteDot1XConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetDot11CapabilitiesRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetDot11CapabilitiesResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Dot11Capabilities Capabilities;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Dot11Capabilities
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool TKIP;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool ScanAvailableNetworks;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool MultipleConfiguration;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public bool AdHocStationMode;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public bool WEP;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetDot11StatusRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string InterfaceToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetDot11StatusResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Dot11Status Status;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Dot11Status
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public byte[] SSID;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string BSSID;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public Dot11Cipher PairCipher;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public Dot11Cipher GroupCipher;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public Dot11SignalStrength SignalStrength;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string ActiveConfigAlias;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum Dot11SignalStrength
    {
        
        None,
        
        VeryBad,
        
        Bad,
        
        Good,
        
        VeryGood,
        
        Extended,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class ScanAvailableDot11NetworksRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string InterfaceToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class ScanAvailableDot11NetworksResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Dot11AvailableNetworks[] Networks;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Dot11AvailableNetworks
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public byte[] SSID;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string BSSID;
        
        /// <summary>
        /// See IEEE802.11 7.3.2.25.2 for details.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public Dot11AuthAndMangementSuite[] AuthAndMangementSuite;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public Dot11Cipher[] PairCipher;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public Dot11Cipher[] GroupCipher;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public Dot11SignalStrength SignalStrength;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public Dot11AvailableNetworksExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum Dot11AuthAndMangementSuite
    {
        
        None,
        
        Dot1X,
        
        PSK,
        
        Extended,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Dot11AvailableNetworksExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetSystemUrisRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetSystemUrisResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public SystemLogUriList SystemLogUris;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string SupportInfoUri;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string SystemBackupUri;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class SystemLogUriList
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public SystemLogUri[] SystemLog;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class SystemLogUri
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public SystemLogType Type;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Uri;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class StartFirmwareUpgradeRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class StartFirmwareUpgradeResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string UploadUri;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string UploadDelay;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string ExpectedDownTime;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class StartSystemRestoreRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class StartSystemRestoreResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string UploadUri;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ExpectedDownTime;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetStorageConfigurationsRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetStorageConfigurationsResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public StorageConfiguration[] StorageConfigurations;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class StorageConfiguration : DeviceEntity
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public StorageConfigurationData Data;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class StorageConfigurationData
    {
        
        /// <summary>
        /// StorageType lists the acceptable values for type attribute
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string type;
        
        /// <summary>
        /// local path
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string LocalPath;
        
        /// <summary>
        /// Storage server address
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string StorageUri;
        
        /// <summary>
        /// User credential for the storage server
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public UserCredential User;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class UserCredential
    {
        
        /// <summary>
        /// User name
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string UserName;
        
        /// <summary>
        /// optional password
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Password;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class CreateStorageConfigurationRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public StorageConfigurationData StorageConfiguration;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class CreateStorageConfigurationResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Token;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetStorageConfigurationRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Token;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetStorageConfigurationResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public StorageConfiguration StorageConfiguration;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetStorageConfigurationRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public StorageConfiguration StorageConfiguration;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetStorageConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class DeleteStorageConfigurationRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Token;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class DeleteStorageConfigurationResponse
    {
    }
}
