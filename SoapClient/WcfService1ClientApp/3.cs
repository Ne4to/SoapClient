//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AstroSoft.WindowsStore.Onvif.Proxies.OnvifServices.DeviceManagement
{
    
    
    public interface Device
    {
        
        System.Threading.Tasks.Task<GetServicesResponse> GetServicesAsync(GetServicesRequest request);
        
        System.Threading.Tasks.Task<GetServiceCapabilitiesResponse> GetServiceCapabilitiesAsync(GetServiceCapabilitiesRequest request);
        
        System.Threading.Tasks.Task<GetDeviceInformationResponse> GetDeviceInformationAsync(GetDeviceInformationRequest request);
        
        System.Threading.Tasks.Task<SetSystemDateAndTimeResponse> SetSystemDateAndTimeAsync(SetSystemDateAndTimeRequest request);
        
        System.Threading.Tasks.Task<GetSystemDateAndTimeResponse> GetSystemDateAndTimeAsync(GetSystemDateAndTimeRequest request);
        
        System.Threading.Tasks.Task<SetSystemFactoryDefaultResponse> SetSystemFactoryDefaultAsync(SetSystemFactoryDefaultRequest request);
        
        System.Threading.Tasks.Task<UpgradeSystemFirmwareResponse> UpgradeSystemFirmwareAsync(UpgradeSystemFirmwareRequest request);
        
        System.Threading.Tasks.Task<SystemRebootResponse> SystemRebootAsync(SystemRebootRequest request);
        
        System.Threading.Tasks.Task<RestoreSystemResponse> RestoreSystemAsync(RestoreSystemRequest request);
        
        System.Threading.Tasks.Task<GetSystemBackupResponse> GetSystemBackupAsync(GetSystemBackupRequest request);
        
        System.Threading.Tasks.Task<GetSystemLogResponse> GetSystemLogAsync(GetSystemLogRequest request);
        
        System.Threading.Tasks.Task<GetSystemSupportInformationResponse> GetSystemSupportInformationAsync(GetSystemSupportInformationRequest request);
        
        System.Threading.Tasks.Task<GetScopesResponse> GetScopesAsync(GetScopesRequest request);
        
        System.Threading.Tasks.Task<SetScopesResponse> SetScopesAsync(SetScopesRequest request);
        
        System.Threading.Tasks.Task<AddScopesResponse> AddScopesAsync(AddScopesRequest request);
        
        System.Threading.Tasks.Task<RemoveScopesResponse> RemoveScopesAsync(RemoveScopesRequest request);
        
        System.Threading.Tasks.Task<GetDiscoveryModeResponse> GetDiscoveryModeAsync(GetDiscoveryModeRequest request);
        
        System.Threading.Tasks.Task<SetDiscoveryModeResponse> SetDiscoveryModeAsync(SetDiscoveryModeRequest request);
        
        System.Threading.Tasks.Task<GetRemoteDiscoveryModeResponse> GetRemoteDiscoveryModeAsync(GetRemoteDiscoveryModeRequest request);
        
        System.Threading.Tasks.Task<SetRemoteDiscoveryModeResponse> SetRemoteDiscoveryModeAsync(SetRemoteDiscoveryModeRequest request);
        
        System.Threading.Tasks.Task<GetDPAddressesResponse> GetDPAddressesAsync(GetDPAddressesRequest request);
        
        System.Threading.Tasks.Task<SetDPAddressesResponse> SetDPAddressesAsync(SetDPAddressesRequest request);
        
        System.Threading.Tasks.Task<GetEndpointReferenceResponse> GetEndpointReferenceAsync(GetEndpointReferenceRequest request);
        
        System.Threading.Tasks.Task<GetRemoteUserResponse> GetRemoteUserAsync(GetRemoteUserRequest request);
        
        System.Threading.Tasks.Task<SetRemoteUserResponse> SetRemoteUserAsync(SetRemoteUserRequest request);
        
        System.Threading.Tasks.Task<GetUsersResponse> GetUsersAsync(GetUsersRequest request);
        
        System.Threading.Tasks.Task<CreateUsersResponse> CreateUsersAsync(CreateUsersRequest request);
        
        System.Threading.Tasks.Task<DeleteUsersResponse> DeleteUsersAsync(DeleteUsersRequest request);
        
        System.Threading.Tasks.Task<SetUserResponse> SetUserAsync(SetUserRequest request);
        
        System.Threading.Tasks.Task<GetWsdlUrlResponse> GetWsdlUrlAsync(GetWsdlUrlRequest request);
        
        System.Threading.Tasks.Task<GetCapabilitiesResponse> GetCapabilitiesAsync(GetCapabilitiesRequest request);
        
        System.Threading.Tasks.Task<GetHostnameResponse> GetHostnameAsync(GetHostnameRequest request);
        
        System.Threading.Tasks.Task<SetHostnameResponse> SetHostnameAsync(SetHostnameRequest request);
        
        System.Threading.Tasks.Task<SetHostnameFromDHCPResponse> SetHostnameFromDHCPAsync(SetHostnameFromDHCPRequest request);
        
        System.Threading.Tasks.Task<GetDNSResponse> GetDNSAsync(GetDNSRequest request);
        
        System.Threading.Tasks.Task<SetDNSResponse> SetDNSAsync(SetDNSRequest request);
        
        System.Threading.Tasks.Task<GetNTPResponse> GetNTPAsync(GetNTPRequest request);
        
        System.Threading.Tasks.Task<SetNTPResponse> SetNTPAsync(SetNTPRequest request);
        
        System.Threading.Tasks.Task<GetDynamicDNSResponse> GetDynamicDNSAsync(GetDynamicDNSRequest request);
        
        System.Threading.Tasks.Task<SetDynamicDNSResponse> SetDynamicDNSAsync(SetDynamicDNSRequest request);
        
        System.Threading.Tasks.Task<GetNetworkInterfacesResponse> GetNetworkInterfacesAsync(GetNetworkInterfacesRequest request);
        
        System.Threading.Tasks.Task<SetNetworkInterfacesResponse> SetNetworkInterfacesAsync(SetNetworkInterfacesRequest request);
        
        System.Threading.Tasks.Task<GetNetworkProtocolsResponse> GetNetworkProtocolsAsync(GetNetworkProtocolsRequest request);
        
        System.Threading.Tasks.Task<SetNetworkProtocolsResponse> SetNetworkProtocolsAsync(SetNetworkProtocolsRequest request);
        
        System.Threading.Tasks.Task<GetNetworkDefaultGatewayResponse> GetNetworkDefaultGatewayAsync(GetNetworkDefaultGatewayRequest request);
        
        System.Threading.Tasks.Task<SetNetworkDefaultGatewayResponse> SetNetworkDefaultGatewayAsync(SetNetworkDefaultGatewayRequest request);
        
        System.Threading.Tasks.Task<GetZeroConfigurationResponse> GetZeroConfigurationAsync(GetZeroConfigurationRequest request);
        
        System.Threading.Tasks.Task<SetZeroConfigurationResponse> SetZeroConfigurationAsync(SetZeroConfigurationRequest request);
        
        System.Threading.Tasks.Task<GetIPAddressFilterResponse> GetIPAddressFilterAsync(GetIPAddressFilterRequest request);
        
        System.Threading.Tasks.Task<SetIPAddressFilterResponse> SetIPAddressFilterAsync(SetIPAddressFilterRequest request);
        
        System.Threading.Tasks.Task<AddIPAddressFilterResponse> AddIPAddressFilterAsync(AddIPAddressFilterRequest request);
        
        System.Threading.Tasks.Task<RemoveIPAddressFilterResponse> RemoveIPAddressFilterAsync(RemoveIPAddressFilterRequest request);
        
        System.Threading.Tasks.Task<GetAccessPolicyResponse> GetAccessPolicyAsync(GetAccessPolicyRequest request);
        
        System.Threading.Tasks.Task<SetAccessPolicyResponse> SetAccessPolicyAsync(SetAccessPolicyRequest request);
        
        System.Threading.Tasks.Task<CreateCertificateResponse> CreateCertificateAsync(CreateCertificateRequest request);
        
        System.Threading.Tasks.Task<GetCertificatesResponse> GetCertificatesAsync(GetCertificatesRequest request);
        
        System.Threading.Tasks.Task<GetCertificatesStatusResponse> GetCertificatesStatusAsync(GetCertificatesStatusRequest request);
        
        System.Threading.Tasks.Task<SetCertificatesStatusResponse> SetCertificatesStatusAsync(SetCertificatesStatusRequest request);
        
        System.Threading.Tasks.Task<DeleteCertificatesResponse> DeleteCertificatesAsync(DeleteCertificatesRequest request);
        
        System.Threading.Tasks.Task<GetPkcs10RequestResponse> GetPkcs10RequestAsync(GetPkcs10RequestRequest request);
        
        System.Threading.Tasks.Task<LoadCertificatesResponse> LoadCertificatesAsync(LoadCertificatesRequest request);
        
        System.Threading.Tasks.Task<GetClientCertificateModeResponse> GetClientCertificateModeAsync(GetClientCertificateModeRequest request);
        
        System.Threading.Tasks.Task<SetClientCertificateModeResponse> SetClientCertificateModeAsync(SetClientCertificateModeRequest request);
        
        System.Threading.Tasks.Task<GetRelayOutputsResponse> GetRelayOutputsAsync(GetRelayOutputsRequest request);
        
        System.Threading.Tasks.Task<SetRelayOutputSettingsResponse> SetRelayOutputSettingsAsync(SetRelayOutputSettingsRequest request);
        
        System.Threading.Tasks.Task<SetRelayOutputStateResponse> SetRelayOutputStateAsync(SetRelayOutputStateRequest request);
        
        System.Threading.Tasks.Task<SendAuxiliaryCommandResponse> SendAuxiliaryCommandAsync(SendAuxiliaryCommandRequest request);
        
        System.Threading.Tasks.Task<GetCACertificatesResponse> GetCACertificatesAsync(GetCACertificatesRequest request);
        
        System.Threading.Tasks.Task<LoadCertificateWithPrivateKeyResponse> LoadCertificateWithPrivateKeyAsync(LoadCertificateWithPrivateKeyRequest request);
        
        System.Threading.Tasks.Task<GetCertificateInformationResponse> GetCertificateInformationAsync(GetCertificateInformationRequest request);
        
        System.Threading.Tasks.Task<LoadCACertificatesResponse> LoadCACertificatesAsync(LoadCACertificatesRequest request);
        
        System.Threading.Tasks.Task<CreateDot1XConfigurationResponse> CreateDot1XConfigurationAsync(CreateDot1XConfigurationRequest request);
        
        System.Threading.Tasks.Task<SetDot1XConfigurationResponse> SetDot1XConfigurationAsync(SetDot1XConfigurationRequest request);
        
        System.Threading.Tasks.Task<GetDot1XConfigurationResponse> GetDot1XConfigurationAsync(GetDot1XConfigurationRequest request);
        
        System.Threading.Tasks.Task<GetDot1XConfigurationsResponse> GetDot1XConfigurationsAsync(GetDot1XConfigurationsRequest request);
        
        System.Threading.Tasks.Task<DeleteDot1XConfigurationResponse> DeleteDot1XConfigurationAsync(DeleteDot1XConfigurationRequest request);
        
        System.Threading.Tasks.Task<GetDot11CapabilitiesResponse> GetDot11CapabilitiesAsync(GetDot11CapabilitiesRequest request);
        
        System.Threading.Tasks.Task<GetDot11StatusResponse> GetDot11StatusAsync(GetDot11StatusRequest request);
        
        System.Threading.Tasks.Task<ScanAvailableDot11NetworksResponse> ScanAvailableDot11NetworksAsync(ScanAvailableDot11NetworksRequest request);
        
        System.Threading.Tasks.Task<GetSystemUrisResponse> GetSystemUrisAsync(GetSystemUrisRequest request);
        
        System.Threading.Tasks.Task<StartFirmwareUpgradeResponse> StartFirmwareUpgradeAsync(StartFirmwareUpgradeRequest request);
        
        System.Threading.Tasks.Task<StartSystemRestoreResponse> StartSystemRestoreAsync(StartSystemRestoreRequest request);
        
        System.Threading.Tasks.Task<GetStorageConfigurationsResponse> GetStorageConfigurationsAsync(GetStorageConfigurationsRequest request);
        
        System.Threading.Tasks.Task<CreateStorageConfigurationResponse> CreateStorageConfigurationAsync(CreateStorageConfigurationRequest request);
        
        System.Threading.Tasks.Task<GetStorageConfigurationResponse> GetStorageConfigurationAsync(GetStorageConfigurationRequest request);
        
        System.Threading.Tasks.Task<SetStorageConfigurationResponse> SetStorageConfigurationAsync(SetStorageConfigurationRequest request);
        
        System.Threading.Tasks.Task<DeleteStorageConfigurationResponse> DeleteStorageConfigurationAsync(DeleteStorageConfigurationRequest request);
    }
    
    public partial class DeviceClient : SoapServices.SoapClientBase, Device
    {
        
        public virtual System.Threading.Tasks.Task<GetServicesResponse> GetServicesAsync(GetServicesRequest request)
        {
            return this.CallAsync<GetServicesRequest, GetServicesResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetServiceCapabilitiesResponse> GetServiceCapabilitiesAsync(GetServiceCapabilitiesRequest request)
        {
            return this.CallAsync<GetServiceCapabilitiesRequest, GetServiceCapabilitiesResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetDeviceInformationResponse> GetDeviceInformationAsync(GetDeviceInformationRequest request)
        {
            return this.CallAsync<GetDeviceInformationRequest, GetDeviceInformationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetSystemDateAndTimeResponse> SetSystemDateAndTimeAsync(SetSystemDateAndTimeRequest request)
        {
            return this.CallAsync<SetSystemDateAndTimeRequest, SetSystemDateAndTimeResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetSystemDateAndTimeResponse> GetSystemDateAndTimeAsync(GetSystemDateAndTimeRequest request)
        {
            return this.CallAsync<GetSystemDateAndTimeRequest, GetSystemDateAndTimeResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetSystemFactoryDefaultResponse> SetSystemFactoryDefaultAsync(SetSystemFactoryDefaultRequest request)
        {
            return this.CallAsync<SetSystemFactoryDefaultRequest, SetSystemFactoryDefaultResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<UpgradeSystemFirmwareResponse> UpgradeSystemFirmwareAsync(UpgradeSystemFirmwareRequest request)
        {
            return this.CallAsync<UpgradeSystemFirmwareRequest, UpgradeSystemFirmwareResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SystemRebootResponse> SystemRebootAsync(SystemRebootRequest request)
        {
            return this.CallAsync<SystemRebootRequest, SystemRebootResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<RestoreSystemResponse> RestoreSystemAsync(RestoreSystemRequest request)
        {
            return this.CallAsync<RestoreSystemRequest, RestoreSystemResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetSystemBackupResponse> GetSystemBackupAsync(GetSystemBackupRequest request)
        {
            return this.CallAsync<GetSystemBackupRequest, GetSystemBackupResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetSystemLogResponse> GetSystemLogAsync(GetSystemLogRequest request)
        {
            return this.CallAsync<GetSystemLogRequest, GetSystemLogResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetSystemSupportInformationResponse> GetSystemSupportInformationAsync(GetSystemSupportInformationRequest request)
        {
            return this.CallAsync<GetSystemSupportInformationRequest, GetSystemSupportInformationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetScopesResponse> GetScopesAsync(GetScopesRequest request)
        {
            return this.CallAsync<GetScopesRequest, GetScopesResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetScopesResponse> SetScopesAsync(SetScopesRequest request)
        {
            return this.CallAsync<SetScopesRequest, SetScopesResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<AddScopesResponse> AddScopesAsync(AddScopesRequest request)
        {
            return this.CallAsync<AddScopesRequest, AddScopesResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<RemoveScopesResponse> RemoveScopesAsync(RemoveScopesRequest request)
        {
            return this.CallAsync<RemoveScopesRequest, RemoveScopesResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetDiscoveryModeResponse> GetDiscoveryModeAsync(GetDiscoveryModeRequest request)
        {
            return this.CallAsync<GetDiscoveryModeRequest, GetDiscoveryModeResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetDiscoveryModeResponse> SetDiscoveryModeAsync(SetDiscoveryModeRequest request)
        {
            return this.CallAsync<SetDiscoveryModeRequest, SetDiscoveryModeResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetRemoteDiscoveryModeResponse> GetRemoteDiscoveryModeAsync(GetRemoteDiscoveryModeRequest request)
        {
            return this.CallAsync<GetRemoteDiscoveryModeRequest, GetRemoteDiscoveryModeResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetRemoteDiscoveryModeResponse> SetRemoteDiscoveryModeAsync(SetRemoteDiscoveryModeRequest request)
        {
            return this.CallAsync<SetRemoteDiscoveryModeRequest, SetRemoteDiscoveryModeResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetDPAddressesResponse> GetDPAddressesAsync(GetDPAddressesRequest request)
        {
            return this.CallAsync<GetDPAddressesRequest, GetDPAddressesResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetDPAddressesResponse> SetDPAddressesAsync(SetDPAddressesRequest request)
        {
            return this.CallAsync<SetDPAddressesRequest, SetDPAddressesResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetEndpointReferenceResponse> GetEndpointReferenceAsync(GetEndpointReferenceRequest request)
        {
            return this.CallAsync<GetEndpointReferenceRequest, GetEndpointReferenceResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetRemoteUserResponse> GetRemoteUserAsync(GetRemoteUserRequest request)
        {
            return this.CallAsync<GetRemoteUserRequest, GetRemoteUserResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetRemoteUserResponse> SetRemoteUserAsync(SetRemoteUserRequest request)
        {
            return this.CallAsync<SetRemoteUserRequest, SetRemoteUserResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetUsersResponse> GetUsersAsync(GetUsersRequest request)
        {
            return this.CallAsync<GetUsersRequest, GetUsersResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<CreateUsersResponse> CreateUsersAsync(CreateUsersRequest request)
        {
            return this.CallAsync<CreateUsersRequest, CreateUsersResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<DeleteUsersResponse> DeleteUsersAsync(DeleteUsersRequest request)
        {
            return this.CallAsync<DeleteUsersRequest, DeleteUsersResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetUserResponse> SetUserAsync(SetUserRequest request)
        {
            return this.CallAsync<SetUserRequest, SetUserResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetWsdlUrlResponse> GetWsdlUrlAsync(GetWsdlUrlRequest request)
        {
            return this.CallAsync<GetWsdlUrlRequest, GetWsdlUrlResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetCapabilitiesResponse> GetCapabilitiesAsync(GetCapabilitiesRequest request)
        {
            return this.CallAsync<GetCapabilitiesRequest, GetCapabilitiesResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetHostnameResponse> GetHostnameAsync(GetHostnameRequest request)
        {
            return this.CallAsync<GetHostnameRequest, GetHostnameResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetHostnameResponse> SetHostnameAsync(SetHostnameRequest request)
        {
            return this.CallAsync<SetHostnameRequest, SetHostnameResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetHostnameFromDHCPResponse> SetHostnameFromDHCPAsync(SetHostnameFromDHCPRequest request)
        {
            return this.CallAsync<SetHostnameFromDHCPRequest, SetHostnameFromDHCPResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetDNSResponse> GetDNSAsync(GetDNSRequest request)
        {
            return this.CallAsync<GetDNSRequest, GetDNSResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetDNSResponse> SetDNSAsync(SetDNSRequest request)
        {
            return this.CallAsync<SetDNSRequest, SetDNSResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetNTPResponse> GetNTPAsync(GetNTPRequest request)
        {
            return this.CallAsync<GetNTPRequest, GetNTPResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetNTPResponse> SetNTPAsync(SetNTPRequest request)
        {
            return this.CallAsync<SetNTPRequest, SetNTPResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetDynamicDNSResponse> GetDynamicDNSAsync(GetDynamicDNSRequest request)
        {
            return this.CallAsync<GetDynamicDNSRequest, GetDynamicDNSResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetDynamicDNSResponse> SetDynamicDNSAsync(SetDynamicDNSRequest request)
        {
            return this.CallAsync<SetDynamicDNSRequest, SetDynamicDNSResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetNetworkInterfacesResponse> GetNetworkInterfacesAsync(GetNetworkInterfacesRequest request)
        {
            return this.CallAsync<GetNetworkInterfacesRequest, GetNetworkInterfacesResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetNetworkInterfacesResponse> SetNetworkInterfacesAsync(SetNetworkInterfacesRequest request)
        {
            return this.CallAsync<SetNetworkInterfacesRequest, SetNetworkInterfacesResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetNetworkProtocolsResponse> GetNetworkProtocolsAsync(GetNetworkProtocolsRequest request)
        {
            return this.CallAsync<GetNetworkProtocolsRequest, GetNetworkProtocolsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetNetworkProtocolsResponse> SetNetworkProtocolsAsync(SetNetworkProtocolsRequest request)
        {
            return this.CallAsync<SetNetworkProtocolsRequest, SetNetworkProtocolsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetNetworkDefaultGatewayResponse> GetNetworkDefaultGatewayAsync(GetNetworkDefaultGatewayRequest request)
        {
            return this.CallAsync<GetNetworkDefaultGatewayRequest, GetNetworkDefaultGatewayResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetNetworkDefaultGatewayResponse> SetNetworkDefaultGatewayAsync(SetNetworkDefaultGatewayRequest request)
        {
            return this.CallAsync<SetNetworkDefaultGatewayRequest, SetNetworkDefaultGatewayResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetZeroConfigurationResponse> GetZeroConfigurationAsync(GetZeroConfigurationRequest request)
        {
            return this.CallAsync<GetZeroConfigurationRequest, GetZeroConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetZeroConfigurationResponse> SetZeroConfigurationAsync(SetZeroConfigurationRequest request)
        {
            return this.CallAsync<SetZeroConfigurationRequest, SetZeroConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetIPAddressFilterResponse> GetIPAddressFilterAsync(GetIPAddressFilterRequest request)
        {
            return this.CallAsync<GetIPAddressFilterRequest, GetIPAddressFilterResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetIPAddressFilterResponse> SetIPAddressFilterAsync(SetIPAddressFilterRequest request)
        {
            return this.CallAsync<SetIPAddressFilterRequest, SetIPAddressFilterResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<AddIPAddressFilterResponse> AddIPAddressFilterAsync(AddIPAddressFilterRequest request)
        {
            return this.CallAsync<AddIPAddressFilterRequest, AddIPAddressFilterResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<RemoveIPAddressFilterResponse> RemoveIPAddressFilterAsync(RemoveIPAddressFilterRequest request)
        {
            return this.CallAsync<RemoveIPAddressFilterRequest, RemoveIPAddressFilterResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetAccessPolicyResponse> GetAccessPolicyAsync(GetAccessPolicyRequest request)
        {
            return this.CallAsync<GetAccessPolicyRequest, GetAccessPolicyResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetAccessPolicyResponse> SetAccessPolicyAsync(SetAccessPolicyRequest request)
        {
            return this.CallAsync<SetAccessPolicyRequest, SetAccessPolicyResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<CreateCertificateResponse> CreateCertificateAsync(CreateCertificateRequest request)
        {
            return this.CallAsync<CreateCertificateRequest, CreateCertificateResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetCertificatesResponse> GetCertificatesAsync(GetCertificatesRequest request)
        {
            return this.CallAsync<GetCertificatesRequest, GetCertificatesResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetCertificatesStatusResponse> GetCertificatesStatusAsync(GetCertificatesStatusRequest request)
        {
            return this.CallAsync<GetCertificatesStatusRequest, GetCertificatesStatusResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetCertificatesStatusResponse> SetCertificatesStatusAsync(SetCertificatesStatusRequest request)
        {
            return this.CallAsync<SetCertificatesStatusRequest, SetCertificatesStatusResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<DeleteCertificatesResponse> DeleteCertificatesAsync(DeleteCertificatesRequest request)
        {
            return this.CallAsync<DeleteCertificatesRequest, DeleteCertificatesResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetPkcs10RequestResponse> GetPkcs10RequestAsync(GetPkcs10RequestRequest request)
        {
            return this.CallAsync<GetPkcs10RequestRequest, GetPkcs10RequestResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<LoadCertificatesResponse> LoadCertificatesAsync(LoadCertificatesRequest request)
        {
            return this.CallAsync<LoadCertificatesRequest, LoadCertificatesResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetClientCertificateModeResponse> GetClientCertificateModeAsync(GetClientCertificateModeRequest request)
        {
            return this.CallAsync<GetClientCertificateModeRequest, GetClientCertificateModeResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetClientCertificateModeResponse> SetClientCertificateModeAsync(SetClientCertificateModeRequest request)
        {
            return this.CallAsync<SetClientCertificateModeRequest, SetClientCertificateModeResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetRelayOutputsResponse> GetRelayOutputsAsync(GetRelayOutputsRequest request)
        {
            return this.CallAsync<GetRelayOutputsRequest, GetRelayOutputsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetRelayOutputSettingsResponse> SetRelayOutputSettingsAsync(SetRelayOutputSettingsRequest request)
        {
            return this.CallAsync<SetRelayOutputSettingsRequest, SetRelayOutputSettingsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetRelayOutputStateResponse> SetRelayOutputStateAsync(SetRelayOutputStateRequest request)
        {
            return this.CallAsync<SetRelayOutputStateRequest, SetRelayOutputStateResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SendAuxiliaryCommandResponse> SendAuxiliaryCommandAsync(SendAuxiliaryCommandRequest request)
        {
            return this.CallAsync<SendAuxiliaryCommandRequest, SendAuxiliaryCommandResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetCACertificatesResponse> GetCACertificatesAsync(GetCACertificatesRequest request)
        {
            return this.CallAsync<GetCACertificatesRequest, GetCACertificatesResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<LoadCertificateWithPrivateKeyResponse> LoadCertificateWithPrivateKeyAsync(LoadCertificateWithPrivateKeyRequest request)
        {
            return this.CallAsync<LoadCertificateWithPrivateKeyRequest, LoadCertificateWithPrivateKeyResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetCertificateInformationResponse> GetCertificateInformationAsync(GetCertificateInformationRequest request)
        {
            return this.CallAsync<GetCertificateInformationRequest, GetCertificateInformationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<LoadCACertificatesResponse> LoadCACertificatesAsync(LoadCACertificatesRequest request)
        {
            return this.CallAsync<LoadCACertificatesRequest, LoadCACertificatesResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<CreateDot1XConfigurationResponse> CreateDot1XConfigurationAsync(CreateDot1XConfigurationRequest request)
        {
            return this.CallAsync<CreateDot1XConfigurationRequest, CreateDot1XConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetDot1XConfigurationResponse> SetDot1XConfigurationAsync(SetDot1XConfigurationRequest request)
        {
            return this.CallAsync<SetDot1XConfigurationRequest, SetDot1XConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetDot1XConfigurationResponse> GetDot1XConfigurationAsync(GetDot1XConfigurationRequest request)
        {
            return this.CallAsync<GetDot1XConfigurationRequest, GetDot1XConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetDot1XConfigurationsResponse> GetDot1XConfigurationsAsync(GetDot1XConfigurationsRequest request)
        {
            return this.CallAsync<GetDot1XConfigurationsRequest, GetDot1XConfigurationsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<DeleteDot1XConfigurationResponse> DeleteDot1XConfigurationAsync(DeleteDot1XConfigurationRequest request)
        {
            return this.CallAsync<DeleteDot1XConfigurationRequest, DeleteDot1XConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetDot11CapabilitiesResponse> GetDot11CapabilitiesAsync(GetDot11CapabilitiesRequest request)
        {
            return this.CallAsync<GetDot11CapabilitiesRequest, GetDot11CapabilitiesResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetDot11StatusResponse> GetDot11StatusAsync(GetDot11StatusRequest request)
        {
            return this.CallAsync<GetDot11StatusRequest, GetDot11StatusResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<ScanAvailableDot11NetworksResponse> ScanAvailableDot11NetworksAsync(ScanAvailableDot11NetworksRequest request)
        {
            return this.CallAsync<ScanAvailableDot11NetworksRequest, ScanAvailableDot11NetworksResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetSystemUrisResponse> GetSystemUrisAsync(GetSystemUrisRequest request)
        {
            return this.CallAsync<GetSystemUrisRequest, GetSystemUrisResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<StartFirmwareUpgradeResponse> StartFirmwareUpgradeAsync(StartFirmwareUpgradeRequest request)
        {
            return this.CallAsync<StartFirmwareUpgradeRequest, StartFirmwareUpgradeResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<StartSystemRestoreResponse> StartSystemRestoreAsync(StartSystemRestoreRequest request)
        {
            return this.CallAsync<StartSystemRestoreRequest, StartSystemRestoreResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetStorageConfigurationsResponse> GetStorageConfigurationsAsync(GetStorageConfigurationsRequest request)
        {
            return this.CallAsync<GetStorageConfigurationsRequest, GetStorageConfigurationsResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<CreateStorageConfigurationResponse> CreateStorageConfigurationAsync(CreateStorageConfigurationRequest request)
        {
            return this.CallAsync<CreateStorageConfigurationRequest, CreateStorageConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<GetStorageConfigurationResponse> GetStorageConfigurationAsync(GetStorageConfigurationRequest request)
        {
            return this.CallAsync<GetStorageConfigurationRequest, GetStorageConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<SetStorageConfigurationResponse> SetStorageConfigurationAsync(SetStorageConfigurationRequest request)
        {
            return this.CallAsync<SetStorageConfigurationRequest, SetStorageConfigurationResponse>(null, request);
        }
        
        public virtual System.Threading.Tasks.Task<DeleteStorageConfigurationResponse> DeleteStorageConfigurationAsync(DeleteStorageConfigurationRequest request)
        {
            return this.CallAsync<DeleteStorageConfigurationRequest, DeleteStorageConfigurationResponse>(null, request);
        }
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetServicesRequest
    {
        
        /// <summary>
        /// Indicates if the service capabilities (untyped) should be included in the response.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool IncludeCapability;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetServicesResponse
    {
        
        /// <summary>
        /// Each Service element contains information about one service.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Service Service;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class Service
    {
        
        /// <summary>
        /// Namespace of the service being described. This parameter allows to match the service capabilities to the service. Note that only one set of capabilities is supported per namespace.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Namespace;
        
        /// <summary>
        /// The transport addresses where the service can be reached. The scheme and IP part shall match the one used in the request (i.e. the GetServices request).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string XAddr;
        
        /// <summary>
        /// The version of the service (not the ONVIF core spec version).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public OnvifVersion Version;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class OnvifVersion
    {
        
        /// <summary>
        /// Major version number.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Major;
        
        /// <summary>
        /// Two digit minor version number (e.g. X.0.1 maps to "01" and X.2.1 maps to "21" where X stands for Major version number).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int Minor;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetServiceCapabilitiesRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetServiceCapabilitiesResponse
    {
        
        /// <summary>
        /// The capabilities for the device service is returned in the Capabilities element.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DeviceServiceCapabilities Capabilities;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class DeviceServiceCapabilities
    {
        
        /// <summary>
        /// Network capabilities.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public NetworkCapabilities Network;
        
        /// <summary>
        /// Security capabilities.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public SecurityCapabilities Security;
        
        /// <summary>
        /// System capabilities.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public SystemCapabilities System;
        
        /// <summary>
        /// Capabilities that do not fit in any of the other categories.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public MiscCapabilities Misc;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class NetworkCapabilities
    {
        
        /// <summary>
        /// Indicates support for IP filtering.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool IPFilter;
        
        /// <summary>
        /// Indicates support for zeroconf.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool ZeroConfiguration;
        
        /// <summary>
        /// Indicates support for IPv6.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool IPVersion6;
        
        /// <summary>
        /// Indicates support for dynamic DNS configuration.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool DynDNS;
        
        /// <summary>
        /// Indicates support for IEEE 802.11 configuration.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool Dot11Configuration;
        
        /// <summary>
        /// Indicates the maximum number of Dot1X configurations supported by the device
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Dot1XConfigurations;
        
        /// <summary>
        /// Indicates support for retrieval of hostname from DHCP.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool HostnameFromDHCP;
        
        /// <summary>
        /// Maximum number of NTP servers supported by the devices SetNTP command.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int NTP;
        
        /// <summary>
        /// Indicates support for Stateful IPv6 DHCP.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool DHCPv6;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SecurityCapabilities
    {
        
        /// <summary>
        /// Indicates support for TLS 1.0.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool TLS10;
        
        /// <summary>
        /// Indicates support for TLS 1.1.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool TLS11;
        
        /// <summary>
        /// Indicates support for TLS 1.2.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool TLS12;
        
        /// <summary>
        /// Indicates support for onboard key generation.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool OnboardKeyGeneration;
        
        /// <summary>
        /// Indicates support for access policy configuration.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool AccessPolicyConfig;
        
        /// <summary>
        /// Indicates support for the ONVIF default access policy.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool DefaultAccessPolicy;
        
        /// <summary>
        /// Indicates support for IEEE 802.1X configuration.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool Dot1X;
        
        /// <summary>
        /// Indicates support for remote user configuration. Used when accessing another device.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool RemoteUserHandling;
        
        /// <summary>
        /// Indicates support for WS-Security X.509 token.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool X509Token;
        
        /// <summary>
        /// Indicates support for WS-Security SAML token.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool SAMLToken;
        
        /// <summary>
        /// Indicates support for WS-Security Kerberos token.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool KerberosToken;
        
        /// <summary>
        /// Indicates support for WS-Security Username token.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool UsernameToken;
        
        /// <summary>
        /// Indicates support for WS over HTTP digest authenticated communication layer.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool HttpDigest;
        
        /// <summary>
        /// Indicates support for WS-Security REL token.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool RELToken;
        
        /// <summary>
        /// EAP Methods supported by the device. The int values refer to the IANA EAP Registry.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int[] SupportedEAPMethods;
        
        /// <summary>
        /// The maximum number of users that the device supports.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int MaxUsers;
        
        /// <summary>
        /// Maximum number of characters supported for the username by CreateUsers.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int MaxUserNameLength;
        
        /// <summary>
        /// Maximum number of characters supported for the password by CreateUsers and SetUser.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int MaxPasswordLength;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SystemCapabilities
    {
        
        /// <summary>
        /// Indicates support for WS Discovery resolve requests.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool DiscoveryResolve;
        
        /// <summary>
        /// Indicates support for WS-Discovery Bye.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool DiscoveryBye;
        
        /// <summary>
        /// Indicates support for remote discovery.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool RemoteDiscovery;
        
        /// <summary>
        /// Indicates support for system backup through MTOM.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool SystemBackup;
        
        /// <summary>
        /// Indicates support for retrieval of system logging through MTOM.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool SystemLogging;
        
        /// <summary>
        /// Indicates support for firmware upgrade through MTOM.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool FirmwareUpgrade;
        
        /// <summary>
        /// Indicates support for firmware upgrade through HTTP.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool HttpFirmwareUpgrade;
        
        /// <summary>
        /// Indicates support for system backup through HTTP.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool HttpSystemBackup;
        
        /// <summary>
        /// Indicates support for retrieval of system logging through HTTP.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool HttpSystemLogging;
        
        /// <summary>
        /// Indicates support for retrieving support information through HTTP.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool HttpSupportInformation;
        
        /// <summary>
        /// Indicates support for storage configuration interfaces.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool StorageConfiguration;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class MiscCapabilities
    {
        
        /// <summary>
        /// Lists of commands supported by SendAuxiliaryCommand.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string[] AuxiliaryCommands;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetDeviceInformationRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetDeviceInformationResponse
    {
        
        /// <summary>
        /// The manufactor of the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Manufacturer;
        
        /// <summary>
        /// The device model.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Model;
        
        /// <summary>
        /// The firmware version in the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string FirmwareVersion;
        
        /// <summary>
        /// The serial number of the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string SerialNumber;
        
        /// <summary>
        /// The hardware ID of the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string HardwareId;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetSystemDateAndTimeRequest
    {
        
        /// <summary>
        /// Defines if the date and time is set via NTP or manually.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public SetDateTimeType DateTimeType;
        
        /// <summary>
        /// Automatically adjust Daylight savings if defined in TimeZone.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool DaylightSavings;
        
        /// <summary>
        /// The time zone in POSIX 1003.1 format
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public TimeZone TimeZone;
        
        /// <summary>
        /// Date and time in UTC. If time is obtained via NTP, UTCDateTime has no meaning
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public DateTime UTCDateTime;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum SetDateTimeType
    {
        
        Manual,
        
        NTP,
    }
    
    /// <summary>
    /// 
    ///				The TZ format is specified by POSIX, please refer to POSIX 1003.1 section 8.3
    ///				Example: Europe, Paris TZ=CET-1CEST,M3.5.0/2,M10.5.0/3
    ///				CET = designation for standard time when daylight saving is not in force
    ///				-1 = offset in hours = negative so 1 hour east of Greenwich meridian
    ///				CEST = designation when daylight saving is in force ("Central European Summer Time")
    ///				, = no offset number between code and comma, so default to one hour ahead for daylight saving
    ///				M3.5.0 = when daylight saving starts = the last Sunday in March (the "5th" week means the last in the month)
    ///				/2, = the local time when the switch occurs = 2 a.m. in this case
    ///				M10.5.0 = when daylight saving ends = the last Sunday in October.
    ///				/3, = the local time when the switch occurs = 3 a.m. in this case
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class TimeZone
    {
        
        /// <summary>
        /// Posix timezone string.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string TZ;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class DateTime
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Time Time;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public Date Date;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Time
    {
        
        /// <summary>
        /// Range is 0 to 23.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Hour;
        
        /// <summary>
        /// Range is 0 to 59.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int Minute;
        
        /// <summary>
        /// Range is 0 to 61 (typically 59).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int Second;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Date
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Year;
        
        /// <summary>
        /// Range is 1 to 12.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int Month;
        
        /// <summary>
        /// Range is 1 to 31.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int Day;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetSystemDateAndTimeResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetSystemDateAndTimeRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetSystemDateAndTimeResponse
    {
        
        /// <summary>
        /// Contains information whether system date and time are set manually or by NTP, daylight savings is on or off, time zone in POSIX 1003.1 format and system date and time in UTC and also local system date and time.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public SystemDateTime SystemDateAndTime;
    }
    
    /// <summary>
    /// General date time inforamtion returned by the GetSystemDateTime method.
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class SystemDateTime
    {
        
        /// <summary>
        /// Indicates if the time is set manully or through NTP.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public SetDateTimeType DateTimeType;
        
        /// <summary>
        /// Informative indicator whether daylight savings is currently on/off.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool DaylightSavings;
        
        /// <summary>
        /// Timezone information in Posix format.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public TimeZone TimeZone;
        
        /// <summary>
        /// Current system date and time in UTC format. This field is mandatory since version 2.0.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public DateTime UTCDateTime;
        
        /// <summary>
        /// Date and time in local format.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public DateTime LocalDateTime;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public SystemDateTimeExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class SystemDateTimeExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetSystemFactoryDefaultRequest
    {
        
        /// <summary>
        /// Specifies the factory default action type.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public FactoryDefaultType FactoryDefault;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum FactoryDefaultType
    {
        
        Hard,
        
        Soft,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetSystemFactoryDefaultResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class UpgradeSystemFirmwareRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AttachmentData Firmware;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class AttachmentData
    {
        
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.w3.org/2005/05/xmlmime")]
        public string contentType;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Include Include;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.w3.org/2004/08/xop/include")]
    public class Include
    {
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string href;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class UpgradeSystemFirmwareResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Message;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SystemRebootRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SystemRebootResponse
    {
        
        /// <summary>
        /// Contains the reboot message sent by the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Message;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class RestoreSystemRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public BackupFile BackupFiles;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class BackupFile
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public AttachmentData Data;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class RestoreSystemResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetSystemBackupRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetSystemBackupResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public BackupFile BackupFiles;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetSystemLogRequest
    {
        
        /// <summary>
        /// Specifies the type of system log to get.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public SystemLogType LogType;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum SystemLogType
    {
        
        System,
        
        Access,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetSystemLogResponse
    {
        
        /// <summary>
        /// Contains the system log information.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public SystemLog SystemLog;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class SystemLog
    {
        
        /// <summary>
        /// The log information as attachment data.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AttachmentData Binary;
        
        /// <summary>
        /// The log information as character data.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string String;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetSystemSupportInformationRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetSystemSupportInformationResponse
    {
        
        /// <summary>
        /// Contains the arbitary device diagnostics information.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public SupportInformation SupportInformation;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class SupportInformation
    {
        
        /// <summary>
        /// The support information as attachment data.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AttachmentData Binary;
        
        /// <summary>
        /// The support information as character data.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string String;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetScopesRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetScopesResponse
    {
        
        /// <summary>
        /// Contains a list of URI definining the device scopes. Scope parameters can be of two types: fixed and configurable. Fixed parameters can not be altered.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Scope Scopes;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Scope
    {
        
        /// <summary>
        /// Indicates if the scope is fixed or configurable.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ScopeDefinition ScopeDef;
        
        /// <summary>
        /// Scope item URI.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ScopeItem;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum ScopeDefinition
    {
        
        Fixed,
        
        Configurable,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetScopesRequest
    {
        
        /// <summary>
        /// Contains a list of scope parameters that will replace all existing configurable scope parameters.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Scopes;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetScopesResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class AddScopesRequest
    {
        
        /// <summary>
        /// Contains a list of new configurable scope parameters that will be added to the existing configurable scope.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ScopeItem;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class AddScopesResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class RemoveScopesRequest
    {
        
        /// <summary>
        /// Contains a list of URIs that should be removed from the device scope.
        ///									Note that the response message always will match the request or an error will be returned. The use of the response is for that reason deprecated.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ScopeItem;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class RemoveScopesResponse
    {
        
        /// <summary>
        /// Contains a list of URIs that has been removed from the device scope
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string[] ScopeItem;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetDiscoveryModeRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetDiscoveryModeResponse
    {
        
        /// <summary>
        /// 
        ///									Indicator of discovery mode: Discoverable, NonDiscoverable.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DiscoveryMode DiscoveryMode;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum DiscoveryMode
    {
        
        Discoverable,
        
        NonDiscoverable,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetDiscoveryModeRequest
    {
        
        /// <summary>
        /// 
        ///									Indicator of discovery mode: Discoverable, NonDiscoverable.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DiscoveryMode DiscoveryMode;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetDiscoveryModeResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetRemoteDiscoveryModeRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetRemoteDiscoveryModeResponse
    {
        
        /// <summary>
        /// 
        ///									Indicator of discovery mode: Discoverable, NonDiscoverable.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DiscoveryMode RemoteDiscoveryMode;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetRemoteDiscoveryModeRequest
    {
        
        /// <summary>
        /// 
        ///									Indicator of discovery mode: Discoverable, NonDiscoverable.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DiscoveryMode RemoteDiscoveryMode;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetRemoteDiscoveryModeResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetDPAddressesRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetDPAddressesResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public NetworkHost[] DPAddress;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NetworkHost
    {
        
        /// <summary>
        /// Network host type: IPv4, IPv6 or DNS.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public NetworkHostType Type;
        
        /// <summary>
        /// IPv4 address.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string IPv4Address;
        
        /// <summary>
        /// IPv6 address.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string IPv6Address;
        
        /// <summary>
        /// DNS name.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string DNSname;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public NetworkHostExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum NetworkHostType
    {
        
        IPv4,
        
        IPv6,
        
        DNS,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NetworkHostExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetDPAddressesRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public NetworkHost[] DPAddress;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetDPAddressesResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetEndpointReferenceRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetEndpointReferenceResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string GUID;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetRemoteUserRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetRemoteUserResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public RemoteUser RemoteUser;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class RemoteUser
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Username;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Password;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool UseDerivedPassword;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetRemoteUserRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public RemoteUser RemoteUser;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetRemoteUserResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetUsersRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetUsersResponse
    {
        
        /// <summary>
        /// Contains a list of the onvif users and following information is included in each entry: username and user level.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public User[] User;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class User
    {
        
        /// <summary>
        /// Username string.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Username;
        
        /// <summary>
        /// Password string.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Password;
        
        /// <summary>
        /// User level string.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public UserLevel UserLevel;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public UserExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum UserLevel
    {
        
        Administrator,
        
        Operator,
        
        User,
        
        Anonymous,
        
        Extended,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class UserExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class CreateUsersRequest
    {
        
        /// <summary>
        /// Creates new device users and corresponding credentials. Each user entry includes: username, password and user level. Either all users are created successfully or a fault message MUST be returned without creating any user. If trying to create several users with exactly the same username the request is rejected and no users are created. If password is missing, then fault message Too weak password is returned.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public User User;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class CreateUsersResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class DeleteUsersRequest
    {
        
        /// <summary>
        /// Deletes users on an device and there may exist users that cannot be deleted to ensure access to the unit. Either all users are deleted successfully or a fault message MUST be returned and no users be deleted. If a username exists multiple times in the request, then a fault message is returned.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Username;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class DeleteUsersResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetUserRequest
    {
        
        /// <summary>
        /// Updates the credentials for one or several users on an device. Either all change requests are processed successfully or a fault message MUST be returned. If the request contains the same username multiple times, a fault message is returned. 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public User User;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetUserResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetWsdlUrlRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetWsdlUrlResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string WsdlUrl;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetCapabilitiesRequest
    {
        
        /// <summary>
        /// 
        ///									List of categories to retrieve capability information on.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public CapabilityCategory[] Category;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum CapabilityCategory
    {
        
        All,
        
        Analytics,
        
        Device,
        
        Events,
        
        Imaging,
        
        Media,
        
        PTZ,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetCapabilitiesResponse
    {
        
        /// <summary>
        /// 
        ///									Capability information.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Capabilities Capabilities;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Capabilities
    {
        
        /// <summary>
        /// Analytics capabilities
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public AnalyticsCapabilities Analytics;
        
        /// <summary>
        /// Device capabilities
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public DeviceCapabilities Device;
        
        /// <summary>
        /// Event capabilities
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public EventCapabilities Events;
        
        /// <summary>
        /// Imaging capabilities
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public ImagingCapabilities Imaging;
        
        /// <summary>
        /// Media capabilities
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public MediaCapabilities Media;
        
        /// <summary>
        /// PTZ capabilities
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public PTZCapabilities PTZ;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public CapabilitiesExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class AnalyticsCapabilities
    {
        
        /// <summary>
        /// Analytics service URI.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string XAddr;
        
        /// <summary>
        /// Indicates whether or not rules are supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool RuleSupport;
        
        /// <summary>
        /// Indicates whether or not modules are supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool AnalyticsModuleSupport;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class DeviceCapabilities
    {
        
        /// <summary>
        /// Device service URI.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string XAddr;
        
        /// <summary>
        /// Network capabilities.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public NetworkCapabilities1 Network;
        
        /// <summary>
        /// System capabilities.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public SystemCapabilities1 System;
        
        /// <summary>
        /// I/O capabilities.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public IOCapabilities IO;
        
        /// <summary>
        /// Security capabilities.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public SecurityCapabilities1 Security;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public DeviceCapabilitiesExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NetworkCapabilities1
    {
        
        /// <summary>
        /// Indicates whether or not IP filtering is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool IPFilter;
        
        /// <summary>
        /// Indicates whether or not zeroconf is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool ZeroConfiguration;
        
        /// <summary>
        /// Indicates whether or not IPv6 is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool IPVersion6;
        
        /// <summary>
        /// Indicates whether or not  is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public bool DynDNS;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public NetworkCapabilitiesExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NetworkCapabilitiesExtension
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool Dot11Configuration;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public NetworkCapabilitiesExtension2 Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NetworkCapabilitiesExtension2
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class SystemCapabilities1
    {
        
        /// <summary>
        /// Indicates whether or not WS Discovery resolve requests are supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool DiscoveryResolve;
        
        /// <summary>
        /// Indicates whether or not WS-Discovery Bye is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool DiscoveryBye;
        
        /// <summary>
        /// Indicates whether or not remote discovery is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool RemoteDiscovery;
        
        /// <summary>
        /// Indicates whether or not system backup is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public bool SystemBackup;
        
        /// <summary>
        /// Indicates whether or not system logging is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public bool SystemLogging;
        
        /// <summary>
        /// Indicates whether or not firmware upgrade is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public bool FirmwareUpgrade;
        
        /// <summary>
        /// Indicates supported ONVIF version(s).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public OnvifVersion SupportedVersions;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public SystemCapabilitiesExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class SystemCapabilitiesExtension
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool HttpFirmwareUpgrade;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool HttpSystemBackup;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool HttpSystemLogging;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public bool HttpSupportInformation;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public SystemCapabilitiesExtension2 Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class SystemCapabilitiesExtension2
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class IOCapabilities
    {
        
        /// <summary>
        /// Number of input connectors.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int InputConnectors;
        
        /// <summary>
        /// Number of relay outputs.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int RelayOutputs;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public IOCapabilitiesExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class IOCapabilitiesExtension
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool Auxiliary;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string[] AuxiliaryCommands;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public IOCapabilitiesExtension2 Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class IOCapabilitiesExtension2
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class SecurityCapabilities1
    {
        
        /// <summary>
        /// Indicates whether or not TLS 1.1 is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName="TLS1.1", Order=0)]
        public bool TLS11;
        
        /// <summary>
        /// Indicates whether or not TLS 1.2 is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName="TLS1.2", Order=1)]
        public bool TLS12;
        
        /// <summary>
        /// Indicates whether or not onboard key generation is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool OnboardKeyGeneration;
        
        /// <summary>
        /// Indicates whether or not access policy configuration is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public bool AccessPolicyConfig;
        
        /// <summary>
        /// Indicates whether or not WS-Security X.509 token is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName="X.509Token", Order=4)]
        public bool X509Token;
        
        /// <summary>
        /// Indicates whether or not WS-Security SAML token is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public bool SAMLToken;
        
        /// <summary>
        /// Indicates whether or not WS-Security Kerberos token is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public bool KerberosToken;
        
        /// <summary>
        /// Indicates whether or not WS-Security REL token is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public bool RELToken;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public SecurityCapabilitiesExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class SecurityCapabilitiesExtension
    {
        
        [System.Xml.Serialization.XmlElementAttribute(ElementName="TLS1.0", Order=0)]
        public bool TLS10;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public SecurityCapabilitiesExtension2 Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class SecurityCapabilitiesExtension2
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool Dot1X;
        
        /// <summary>
        /// EAP Methods supported by the device. The int values refer to the IANA EAP Registry.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int[] SupportedEAPMethod;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool RemoteUserHandling;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class DeviceCapabilitiesExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class EventCapabilities
    {
        
        /// <summary>
        /// Event service URI.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string XAddr;
        
        /// <summary>
        /// Indicates whether or not WS Subscription policy is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool WSSubscriptionPolicySupport;
        
        /// <summary>
        /// Indicates whether or not WS Pull Point is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool WSPullPointSupport;
        
        /// <summary>
        /// Indicates whether or not WS Pausable Subscription Manager Interface is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public bool WSPausableSubscriptionManagerInterfaceSupport;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class ImagingCapabilities
    {
        
        /// <summary>
        /// Imaging service URI.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string XAddr;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class MediaCapabilities
    {
        
        /// <summary>
        /// Media service URI.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string XAddr;
        
        /// <summary>
        /// Streaming capabilities.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public RealTimeStreamingCapabilities StreamingCapabilities;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public MediaCapabilitiesExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class RealTimeStreamingCapabilities
    {
        
        /// <summary>
        /// Indicates whether or not RTP multicast is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool RTPMulticast;
        
        /// <summary>
        /// Indicates whether or not RTP over TCP is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool RTP_TCP;
        
        /// <summary>
        /// Indicates whether or not RTP/RTSP/TCP is supported.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool RTP_RTSP_TCP;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public RealTimeStreamingCapabilitiesExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class RealTimeStreamingCapabilitiesExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class MediaCapabilitiesExtension
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ProfileCapabilities ProfileCapabilities;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class ProfileCapabilities
    {
        
        /// <summary>
        /// Maximum number of profiles.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int MaximumNumberOfProfiles;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PTZCapabilities
    {
        
        /// <summary>
        /// PTZ service URI.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string XAddr;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class CapabilitiesExtension
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DeviceIOCapabilities DeviceIO;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public DisplayCapabilities Display;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public RecordingCapabilities Recording;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public SearchCapabilities Search;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public ReplayCapabilities Replay;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public ReceiverCapabilities Receiver;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public AnalyticsDeviceCapabilities AnalyticsDevice;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public CapabilitiesExtension2 Extensions;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class DeviceIOCapabilities
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string XAddr;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int VideoSources;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int VideoOutputs;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public int AudioSources;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public int AudioOutputs;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public int RelayOutputs;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class DisplayCapabilities
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string XAddr;
        
        /// <summary>
        /// Indication that the SetLayout command supports only predefined layouts.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool FixedLayout;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class RecordingCapabilities
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string XAddr;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool ReceiverSource;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool MediaProfileSource;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public bool DynamicRecordings;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public bool DynamicTracks;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public int MaxStringLength;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class SearchCapabilities
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string XAddr;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool MetadataSearch;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class ReplayCapabilities
    {
        
        /// <summary>
        /// The address of the replay service.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string XAddr;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class ReceiverCapabilities
    {
        
        /// <summary>
        /// The address of the receiver service.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string XAddr;
        
        /// <summary>
        /// Indicates whether the device can receive RTP multicast streams.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool RTP_Multicast;
        
        /// <summary>
        /// Indicates whether the device can receive RTP/TCP streams
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool RTP_TCP;
        
        /// <summary>
        /// Indicates whether the device can receive RTP/RTSP/TCP streams.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public bool RTP_RTSP_TCP;
        
        /// <summary>
        /// The maximum number of receivers supported by the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public int SupportedReceivers;
        
        /// <summary>
        /// The maximum allowed length for RTSP URIs.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public int MaximumRTSPURILength;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class AnalyticsDeviceCapabilities
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string XAddr;
        
        /// <summary>
        /// Obsolete property.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool RuleSupport;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public AnalyticsDeviceExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class AnalyticsDeviceExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class CapabilitiesExtension2
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetHostnameRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetHostnameResponse
    {
        
        /// <summary>
        /// Contains the hostname information.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public HostnameInformation HostnameInformation;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class HostnameInformation
    {
        
        /// <summary>
        /// Indicates whether the hostname is obtained from DHCP or not.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool FromDHCP;
        
        /// <summary>
        /// Indicates the hostname.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public HostnameInformationExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class HostnameInformationExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetHostnameRequest
    {
        
        /// <summary>
        /// The hostname to set.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetHostnameResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetHostnameFromDHCPRequest
    {
        
        /// <summary>
        /// True if the hostname shall be obtained via DHCP.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool FromDHCP;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetHostnameFromDHCPResponse
    {
        
        /// <summary>
        /// 
        ///									Indicates whether or not a reboot is required after configuration updates.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool RebootNeeded;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetDNSRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetDNSResponse
    {
        
        /// <summary>
        /// 
        ///									DNS information.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DNSInformation DNSInformation;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class DNSInformation
    {
        
        /// <summary>
        /// Indicates whether or not DNS information is retrieved from DHCP.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool FromDHCP;
        
        /// <summary>
        /// Search domain.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string[] SearchDomain;
        
        /// <summary>
        /// List of DNS addresses received from DHCP.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public IPAddress[] DNSFromDHCP;
        
        /// <summary>
        /// List of manually entered DNS addresses.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public IPAddress[] DNSManual;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public DNSInformationExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class IPAddress
    {
        
        /// <summary>
        /// Indicates if the address is an IPv4 or IPv6 address.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public IPType Type;
        
        /// <summary>
        /// IPv4 address.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string IPv4Address;
        
        /// <summary>
        /// IPv6 address
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string IPv6Address;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum IPType
    {
        
        IPv4,
        
        IPv6,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class DNSInformationExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetDNSRequest
    {
        
        /// <summary>
        /// 
        ///									Indicate if the DNS address is to be retrieved using DHCP.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool FromDHCP;
        
        /// <summary>
        /// 
        ///									DNS search domain.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string[] SearchDomain;
        
        /// <summary>
        /// 
        ///									DNS address(es) set manually.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public IPAddress[] DNSManual;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetDNSResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetNTPRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetNTPResponse
    {
        
        /// <summary>
        /// 
        ///									NTP information.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public NTPInformation NTPInformation;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NTPInformation
    {
        
        /// <summary>
        /// Indicates if NTP information is to be retrieved by using DHCP.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool FromDHCP;
        
        /// <summary>
        /// List of NTP addresses retrieved by using DHCP.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public NetworkHost[] NTPFromDHCP;
        
        /// <summary>
        /// List of manually entered NTP addresses.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public NetworkHost[] NTPManual;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public NTPInformationExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NTPInformationExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetNTPRequest
    {
        
        /// <summary>
        /// 
        ///									Indicate if NTP address information is to be retrieved using DHCP.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool FromDHCP;
        
        /// <summary>
        /// 
        ///									Manual NTP settings.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public NetworkHost[] NTPManual;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetNTPResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetDynamicDNSRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetDynamicDNSResponse
    {
        
        /// <summary>
        /// 
        ///									Dynamic DNS information.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DynamicDNSInformation DynamicDNSInformation;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class DynamicDNSInformation
    {
        
        /// <summary>
        /// Dynamic DNS type.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DynamicDNSType Type;
        
        /// <summary>
        /// DNS name.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name;
        
        /// <summary>
        /// Time to live.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string TTL;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public DynamicDNSInformationExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum DynamicDNSType
    {
        
        NoUpdate,
        
        ClientUpdates,
        
        ServerUpdates,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class DynamicDNSInformationExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetDynamicDNSRequest
    {
        
        /// <summary>
        /// 
        ///									Dynamic DNS type.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DynamicDNSType Type;
        
        /// <summary>
        /// 
        ///									DNS name.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name;
        
        /// <summary>
        /// 
        ///									DNS record time to live.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string TTL;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetDynamicDNSResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetNetworkInterfacesRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetNetworkInterfacesResponse
    {
        
        /// <summary>
        /// 
        ///									List of network interfaces.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public NetworkInterface NetworkInterfaces;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NetworkInterface : DeviceEntity
    {
        
        /// <summary>
        /// Indicates whether or not an interface is enabled.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool Enabled;
        
        /// <summary>
        /// Network interface information
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public NetworkInterfaceInfo Info;
        
        /// <summary>
        /// Link configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public NetworkInterfaceLink Link;
        
        /// <summary>
        /// IPv4 network interface configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public IPv4NetworkInterface IPv4;
        
        /// <summary>
        /// IPv6 network interface configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public IPv6NetworkInterface IPv6;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public NetworkInterfaceExtension Extension;
    }
    
    /// <summary>
    /// Base class for physical entities like inputs and outputs.
    /// </summary>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class DeviceEntity
    {
        
        /// <summary>
        /// Unique identifier referencing the physical entity.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string token;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NetworkInterfaceInfo
    {
        
        /// <summary>
        /// Network interface name, for example eth0.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name;
        
        /// <summary>
        /// Network interface MAC address.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string HwAddress;
        
        /// <summary>
        /// Maximum transmission unit.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int MTU;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NetworkInterfaceLink
    {
        
        /// <summary>
        /// Configured link settings.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public NetworkInterfaceConnectionSetting AdminSettings;
        
        /// <summary>
        /// Current active link settings.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public NetworkInterfaceConnectionSetting OperSettings;
        
        /// <summary>
        /// Integer indicating interface type, for example: 6 is ethernet.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int InterfaceType;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NetworkInterfaceConnectionSetting
    {
        
        /// <summary>
        /// Auto negotiation on/off.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool AutoNegotiation;
        
        /// <summary>
        /// Speed.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int Speed;
        
        /// <summary>
        /// Duplex type, Half or Full.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public Duplex Duplex;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum Duplex
    {
        
        Full,
        
        Half,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class IPv4NetworkInterface
    {
        
        /// <summary>
        /// Indicates whether or not IPv4 is enabled.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool Enabled;
        
        /// <summary>
        /// IPv4 configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public IPv4Configuration Config;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class IPv4Configuration
    {
        
        /// <summary>
        /// List of manually added IPv4 addresses.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PrefixedIPv4Address[] Manual;
        
        /// <summary>
        /// Link local address.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public PrefixedIPv4Address LinkLocal;
        
        /// <summary>
        /// IPv4 address configured by using DHCP.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public PrefixedIPv4Address FromDHCP;
        
        /// <summary>
        /// Indicates whether or not DHCP is used.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public bool DHCP;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PrefixedIPv4Address
    {
        
        /// <summary>
        /// IPv4 address
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Address;
        
        /// <summary>
        /// Prefix/submask length
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int PrefixLength;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class IPv6NetworkInterface
    {
        
        /// <summary>
        /// Indicates whether or not IPv6 is enabled.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool Enabled;
        
        /// <summary>
        /// IPv6 configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public IPv6Configuration Config;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class IPv6Configuration
    {
        
        /// <summary>
        /// Indicates whether router advertisment is used.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool AcceptRouterAdvert;
        
        /// <summary>
        /// DHCP configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public IPv6DHCPConfiguration DHCP;
        
        /// <summary>
        /// List of manually entered IPv6 addresses.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public PrefixedIPv6Address[] Manual;
        
        /// <summary>
        /// List of link local IPv6 addresses.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public PrefixedIPv6Address[] LinkLocal;
        
        /// <summary>
        /// List of IPv6 addresses configured by using DHCP.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public PrefixedIPv6Address[] FromDHCP;
        
        /// <summary>
        /// List of IPv6 addresses configured by using router advertisment.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public PrefixedIPv6Address[] FromRA;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public IPv6ConfigurationExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum IPv6DHCPConfiguration
    {
        
        Auto,
        
        Stateful,
        
        Stateless,
        
        Off,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class PrefixedIPv6Address
    {
        
        /// <summary>
        /// IPv6 address
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Address;
        
        /// <summary>
        /// Prefix/submask length
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int PrefixLength;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class IPv6ConfigurationExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NetworkInterfaceExtension
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int InterfaceType;
        
        /// <summary>
        /// Extension point prepared for future 802.3 configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public Dot3Configuration[] Dot3;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public Dot11Configuration[] Dot11;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public NetworkInterfaceExtension2 Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Dot3Configuration
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Dot11Configuration
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public byte[] SSID;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public Dot11StationMode Mode;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Alias;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public int Priority;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public Dot11SecurityConfiguration Security;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum Dot11StationMode
    {
        
        Adhoc,
        
        Infrastructure,
        
        Extended,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Dot11SecurityConfiguration
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Dot11SecurityMode Mode;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public Dot11Cipher Algorithm;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public Dot11PSKSet PSK;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Dot1X;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public Dot11SecurityConfigurationExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum Dot11SecurityMode
    {
        
        None,
        
        WEP,
        
        PSK,
        
        Dot1X,
        
        Extended,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum Dot11Cipher
    {
        
        CCMP,
        
        TKIP,
        
        Any,
        
        Extended,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Dot11PSKSet
    {
        
        /// <summary>
        /// 
        ///					According to IEEE802.11-2007 H.4.1 the RSNA PSK consists of 256 bits, or 64 octets when represented in hex
        ///					Either Key or Passphrase shall be given, if both are supplied Key shall be used by the device and Passphrase ignored.
        ///				
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public byte[] Key;
        
        /// <summary>
        /// 
        ///					According to IEEE802.11-2007 H.4.1 a pass-phrase is a sequence of between 8 and 63 ASCII-encoded characters and
        ///					each character in the pass-phrase must have an encoding in the range of 32 to 126 (decimal),inclusive.
        ///					If only Passpharse is supplied the Key shall be derived using the algorithm described in IEEE802.11-2007 section H.4
        ///				
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Passphrase;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public Dot11PSKSetExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Dot11PSKSetExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Dot11SecurityConfigurationExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NetworkInterfaceExtension2
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetNetworkInterfacesRequest
    {
        
        /// <summary>
        /// 
        ///									Symbolic network interface name.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string InterfaceToken;
        
        /// <summary>
        /// 
        ///									Network interface name.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public NetworkInterfaceSetConfiguration NetworkInterface;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NetworkInterfaceSetConfiguration
    {
        
        /// <summary>
        /// Indicates whether or not an interface is enabled.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool Enabled;
        
        /// <summary>
        /// Link configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public NetworkInterfaceConnectionSetting Link;
        
        /// <summary>
        /// Maximum transmission unit.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int MTU;
        
        /// <summary>
        /// IPv4 network interface configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public IPv4NetworkInterfaceSetConfiguration IPv4;
        
        /// <summary>
        /// IPv6 network interface configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public IPv6NetworkInterfaceSetConfiguration IPv6;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public NetworkInterfaceSetConfigurationExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class IPv4NetworkInterfaceSetConfiguration
    {
        
        /// <summary>
        /// Indicates whether or not IPv4 is enabled.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool Enabled;
        
        /// <summary>
        /// List of manually added IPv4 addresses.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public PrefixedIPv4Address[] Manual;
        
        /// <summary>
        /// Indicates whether or not DHCP is used.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool DHCP;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class IPv6NetworkInterfaceSetConfiguration
    {
        
        /// <summary>
        /// Indicates whether or not IPv6 is enabled.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool Enabled;
        
        /// <summary>
        /// Indicates whether router advertisment is used.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool AcceptRouterAdvert;
        
        /// <summary>
        /// List of manually added IPv6 addresses.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public PrefixedIPv6Address[] Manual;
        
        /// <summary>
        /// DHCP configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public IPv6DHCPConfiguration DHCP;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NetworkInterfaceSetConfigurationExtension
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Dot3Configuration[] Dot3;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public Dot11Configuration[] Dot11;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public NetworkInterfaceSetConfigurationExtension2 Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NetworkInterfaceSetConfigurationExtension2
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetNetworkInterfacesResponse
    {
        
        /// <summary>
        /// 
        ///									Indicates whether or not a reboot is required after configuration updates.
        ///									If a device responds with RebootNeeded set to false, the device can be reached
        ///									via the new IP address without further action. A client should be aware that a device
        ///									may not be responsive for a short period of time until it signals availability at
        ///									the new address via the discovery Hello messages.
        ///									If a device responds with RebootNeeded set to true, it will be further available under
        ///									its previous IP address. The settings will only be activated when the device is
        ///									rebooted via the SystemReboot command.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool RebootNeeded;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetNetworkProtocolsRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetNetworkProtocolsResponse
    {
        
        /// <summary>
        /// Contains an array of defined protocols supported by the device. There are three protocols defined; HTTP, HTTPS and RTSP. The following parameters can be retrieved for each protocol: port and enable/disable.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public NetworkProtocol[] NetworkProtocols;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NetworkProtocol
    {
        
        /// <summary>
        /// Network protocol type string.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public NetworkProtocolType Name;
        
        /// <summary>
        /// Indicates if the protocol is enabled or not.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool Enabled;
        
        /// <summary>
        /// The port that is used by the protocol.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int Port;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public NetworkProtocolExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum NetworkProtocolType
    {
        
        HTTP,
        
        HTTPS,
        
        RTSP,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NetworkProtocolExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetNetworkProtocolsRequest
    {
        
        /// <summary>
        /// Configures one or more defined network protocols supported by the device. There are currently three protocols defined; HTTP, HTTPS and RTSP. The following parameters can be set for each protocol: port and enable/disable.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public NetworkProtocol NetworkProtocols;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetNetworkProtocolsResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetNetworkDefaultGatewayRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetNetworkDefaultGatewayResponse
    {
        
        /// <summary>
        /// Gets the default IPv4 and IPv6 gateway settings from the device.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public NetworkGateway NetworkGateway;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NetworkGateway
    {
        
        /// <summary>
        /// IPv4 address string.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string[] IPv4Address;
        
        /// <summary>
        /// IPv6 address string.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string[] IPv6Address;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetNetworkDefaultGatewayRequest
    {
        
        /// <summary>
        /// Sets IPv4 gateway address used as default setting.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string[] IPv4Address;
        
        /// <summary>
        /// Sets IPv6 gateway address used as default setting.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string[] IPv6Address;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetNetworkDefaultGatewayResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetZeroConfigurationRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetZeroConfigurationResponse
    {
        
        /// <summary>
        /// Contains the zero-configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public NetworkZeroConfiguration ZeroConfiguration;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NetworkZeroConfiguration
    {
        
        /// <summary>
        /// Unique identifier of network interface.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string InterfaceToken;
        
        /// <summary>
        /// Indicates whether the zero-configuration is enabled or not.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool Enabled;
        
        /// <summary>
        /// The zero-configuration IPv4 address(es)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string[] Addresses;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public NetworkZeroConfigurationExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NetworkZeroConfigurationExtension
    {
        
        /// <summary>
        /// Optional array holding the configuration for the second and possibly further interfaces.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public NetworkZeroConfiguration[] Additional;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public NetworkZeroConfigurationExtension2 Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class NetworkZeroConfigurationExtension2
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetZeroConfigurationRequest
    {
        
        /// <summary>
        /// Unique identifier referencing the physical interface.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string InterfaceToken;
        
        /// <summary>
        /// Specifies if the zero-configuration should be enabled or not.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool Enabled;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetZeroConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetIPAddressFilterRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetIPAddressFilterResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public IPAddressFilter IPAddressFilter;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class IPAddressFilter
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public IPAddressFilterType Type;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public PrefixedIPv4Address[] IPv4Address;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public PrefixedIPv6Address[] IPv6Address;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public IPAddressFilterExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum IPAddressFilterType
    {
        
        Allow,
        
        Deny,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class IPAddressFilterExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetIPAddressFilterRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public IPAddressFilter IPAddressFilter;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetIPAddressFilterResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class AddIPAddressFilterRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public IPAddressFilter IPAddressFilter;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class AddIPAddressFilterResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class RemoveIPAddressFilterRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public IPAddressFilter IPAddressFilter;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class RemoveIPAddressFilterResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetAccessPolicyRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetAccessPolicyResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public BinaryData PolicyFile;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class BinaryData
    {
        
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.w3.org/2005/05/xmlmime")]
        public string contentType;
        
        /// <summary>
        /// base64 encoded binary data.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public byte[] Data;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetAccessPolicyRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public BinaryData PolicyFile;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetAccessPolicyResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class CreateCertificateRequest
    {
        
        /// <summary>
        /// Certificate id.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string CertificateID;
        
        /// <summary>
        /// Identification of the entity associated with the public-key.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Subject;
        
        /// <summary>
        /// Certificate validity start date.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public System.DateTime ValidNotBefore;
        
        /// <summary>
        /// Certificate expiry start date.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public System.DateTime ValidNotAfter;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class CreateCertificateResponse
    {
        
        /// <summary>
        /// 
        ///									base64 encoded DER representation of certificate.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Certificate NvtCertificate;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Certificate
    {
        
        /// <summary>
        /// Certificate id.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string CertificateID;
        
		///// <summary>
		///// base64 encoded DER representation of certificate.
		///// </summary>
		//[System.Xml.Serialization.XmlElementAttribute(Order=1)]
		//public BinaryData Certificate;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetCertificatesRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetCertificatesResponse
    {
        
        /// <summary>
        /// 
        ///									Id and base64 encoded DER representation of all available certificates.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Certificate[] NvtCertificate;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetCertificatesStatusRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetCertificatesStatusResponse
    {
        
        /// <summary>
        /// 
        ///									Indicates if a certificate is used in an optional HTTPS configuration of the device.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public CertificateStatus[] CertificateStatus;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class CertificateStatus
    {
        
        /// <summary>
        /// Certificate id.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string CertificateID;
        
        /// <summary>
        /// Indicates whether or not a certificate is used in a HTTPS configuration.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool Status;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetCertificatesStatusRequest
    {
        
        /// <summary>
        /// 
        ///									Indicates if a certificate is to be used in an optional HTTPS configuration of the device.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public CertificateStatus[] CertificateStatus;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetCertificatesStatusResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class DeleteCertificatesRequest
    {
        
        /// <summary>
        /// 
        ///									List of ids of certificates to delete.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string CertificateID;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class DeleteCertificatesResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetPkcs10RequestRequest
    {
        
        /// <summary>
        /// 
        ///									List of ids of certificates to delete.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string CertificateID;
        
        /// <summary>
        /// 
        ///									Relative Dinstinguished Name(RDN) CommonName(CN).
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Subject;
        
        /// <summary>
        /// 
        ///									Optional base64 encoded DER attributes.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public BinaryData Attributes;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetPkcs10RequestResponse
    {
        
        /// <summary>
        /// 
        ///									base64 encoded DER representation of certificate.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public BinaryData Pkcs10Request;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class LoadCertificatesRequest
    {
        
        /// <summary>
        /// 
        ///									Optional id and base64 encoded DER representation of certificate.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Certificate NVTCertificate;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class LoadCertificatesResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetClientCertificateModeRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetClientCertificateModeResponse
    {
        
        /// <summary>
        /// 
        ///									Indicates whether or not client certificates are required by device.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool Enabled;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetClientCertificateModeRequest
    {
        
        /// <summary>
        /// 
        ///									Indicates whether or not client certificates are required by device.
        ///								
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool Enabled;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetClientCertificateModeResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetRelayOutputsRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetRelayOutputsResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public RelayOutput[] RelayOutputs;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class RelayOutput : DeviceEntity
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public RelayOutputSettings Properties;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class RelayOutputSettings
    {
        
        /// <summary>
        /// 
        ///					'Bistable' or 'Monostable'
        ///					Bistable – After setting the state, the relay remains in this state.Monostable – After setting the state, the relay returns to its idle state after the specified time.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public RelayMode Mode;
        
        /// <summary>
        /// Time after which the relay returns to its idle state if it is in monostable mode. If the Mode field is set to bistable mode the value of the parameter can be ignored.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string DelayTime;
        
        /// <summary>
        /// 
        ///			'open' or 'closed'
        ///			'open' means that the relay is open when the relay state is set to 'inactive' through the trigger command and closed when the state is set to 'active' through the same command.'closed' means that the relay is closed when the relay state is set to 'inactive' through the trigger command and open when the state is set to 'active' through the same command.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public RelayIdleState IdleState;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum RelayMode
    {
        
        Monostable,
        
        Bistable,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum RelayIdleState
    {
        
        closed,
        
        open,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetRelayOutputSettingsRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string RelayOutputToken;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public RelayOutputSettings Properties;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetRelayOutputSettingsResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetRelayOutputStateRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string RelayOutputToken;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public RelayLogicalState LogicalState;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum RelayLogicalState
    {
        
        active,
        
        inactive,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetRelayOutputStateResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SendAuxiliaryCommandRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string AuxiliaryCommand;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SendAuxiliaryCommandResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string AuxiliaryCommandResponse;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetCACertificatesRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetCACertificatesResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Certificate[] CACertificate;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class LoadCertificateWithPrivateKeyRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public CertificateWithPrivateKey CertificateWithPrivateKey;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class CertificateWithPrivateKey
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string CertificateID;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public BinaryData Certificate;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public BinaryData PrivateKey;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class LoadCertificateWithPrivateKeyResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetCertificateInformationRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string CertificateID;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetCertificateInformationResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public CertificateInformation CertificateInformation;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class CertificateInformation
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string CertificateID;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string IssuerDN;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string SubjectDN;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public CertificateUsage KeyUsage;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public CertificateUsage ExtendedKeyUsage;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public int KeyLength;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string Version;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string SerialNum;
        
        /// <summary>
        /// Validity Range is from "NotBefore" to "NotAfter"; the corresponding DateTimeRange is from "From" to "Until"
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string SignatureAlgorithm;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public DateTimeRange Validity;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public CertificateInformationExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class CertificateUsage
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class DateTimeRange
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public System.DateTime From;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public System.DateTime Until;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class CertificateInformationExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class LoadCACertificatesRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Certificate CACertificate;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class LoadCACertificatesResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class CreateDot1XConfigurationRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Dot1XConfiguration Dot1XConfiguration;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Dot1XConfiguration
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Dot1XConfigurationToken;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Identity;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string AnonymousID;
        
        /// <summary>
        /// 
        ///				EAP Method type as defined in IANA EAP Registry.
        ///			
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public int EAPMethod;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string[] CACertificateID;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public EAPMethodConfiguration EAPMethodConfiguration;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public Dot1XConfigurationExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class EAPMethodConfiguration
    {
        
        /// <summary>
        /// Confgiuration information for TLS Method.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public TLSConfiguration TLSConfiguration;
        
        /// <summary>
        /// Password for those EAP Methods that require a password. The password shall never be returned on a get method.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Password;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public EapMethodExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class TLSConfiguration
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string CertificateID;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class EapMethodExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Dot1XConfigurationExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class CreateDot1XConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetDot1XConfigurationRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Dot1XConfiguration Dot1XConfiguration;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetDot1XConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetDot1XConfigurationRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Dot1XConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetDot1XConfigurationResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Dot1XConfiguration Dot1XConfiguration;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetDot1XConfigurationsRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetDot1XConfigurationsResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Dot1XConfiguration[] Dot1XConfiguration;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class DeleteDot1XConfigurationRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string[] Dot1XConfigurationToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class DeleteDot1XConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetDot11CapabilitiesRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetDot11CapabilitiesResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Dot11Capabilities Capabilities;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Dot11Capabilities
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool TKIP;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool ScanAvailableNetworks;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool MultipleConfiguration;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public bool AdHocStationMode;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public bool WEP;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetDot11StatusRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string InterfaceToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetDot11StatusResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Dot11Status Status;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Dot11Status
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public byte[] SSID;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string BSSID;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public Dot11Cipher PairCipher;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public Dot11Cipher GroupCipher;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public Dot11SignalStrength SignalStrength;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string ActiveConfigAlias;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum Dot11SignalStrength
    {
        
        None,
        
        VeryBad,
        
        Bad,
        
        Good,
        
        VeryGood,
        
        Extended,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class ScanAvailableDot11NetworksRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string InterfaceToken;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class ScanAvailableDot11NetworksResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Dot11AvailableNetworks[] Networks;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Dot11AvailableNetworks
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public byte[] SSID;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string BSSID;
        
        /// <summary>
        /// See IEEE802.11 7.3.2.25.2 for details.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public Dot11AuthAndMangementSuite[] AuthAndMangementSuite;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public Dot11Cipher[] PairCipher;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public Dot11Cipher[] GroupCipher;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public Dot11SignalStrength SignalStrength;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public Dot11AvailableNetworksExtension Extension;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public enum Dot11AuthAndMangementSuite
    {
        
        None,
        
        Dot1X,
        
        PSK,
        
        Extended,
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class Dot11AvailableNetworksExtension
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetSystemUrisRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetSystemUrisResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public SystemLogUriList SystemLogUris;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string SupportInfoUri;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string SystemBackupUri;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class SystemLogUriList
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public SystemLogUri[] SystemLog;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/schema")]
    public class SystemLogUri
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public SystemLogType Type;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Uri;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class StartFirmwareUpgradeRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class StartFirmwareUpgradeResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string UploadUri;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string UploadDelay;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string ExpectedDownTime;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class StartSystemRestoreRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class StartSystemRestoreResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string UploadUri;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ExpectedDownTime;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetStorageConfigurationsRequest
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetStorageConfigurationsResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public StorageConfiguration[] StorageConfigurations;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class StorageConfiguration : DeviceEntity
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public StorageConfigurationData Data;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class StorageConfigurationData
    {
        
        /// <summary>
        /// StorageType lists the acceptable values for type attribute 
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string type;
        
        /// <summary>
        ///  local path 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string LocalPath;
        
        /// <summary>
        ///  Storage server address 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string StorageUri;
        
        /// <summary>
        ///  User credential for the storage server 
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public UserCredential User;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class UserCredential
    {
        
        /// <summary>
        /// User name
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string UserName;
        
        /// <summary>
        ///  optional password
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Password;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class CreateStorageConfigurationRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public StorageConfigurationData StorageConfiguration;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class CreateStorageConfigurationResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Token;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetStorageConfigurationRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Token;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class GetStorageConfigurationResponse
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public StorageConfiguration StorageConfiguration;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetStorageConfigurationRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public StorageConfiguration StorageConfiguration;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class SetStorageConfigurationResponse
    {
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class DeleteStorageConfigurationRequest
    {
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Token;
    }
    
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public class DeleteStorageConfigurationResponse
    {
    }
}
